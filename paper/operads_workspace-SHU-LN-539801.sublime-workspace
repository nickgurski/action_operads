{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "operads_paper.tex",
			"settings":
			{
				"buffer_size": 7859,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					18,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAIQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					24,
					1,
					"left_delete",
					null,
					"AwAAAA8AAAAAAAAADwAAAAAAAAABAAAALw4AAAAAAAAADgAAAAAAAAABAAAALg0AAAAAAAAADQAAAAAAAAABAAAALg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"left_delete",
					null,
					"AgAAAI4BAAAAAAAAjgEAAAAAAAABAAAAL40BAAAAAAAAjQEAAAAAAAABAAAALg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8BAAAAAAAAjwEAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"right_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAfAAAAJSFURVggcm9vdCA9IG9wZXJhZHNfcGFwZXIudGV4Cg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAHwAAAAAAAAAAAAAAAADwvw"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "author-year"
					},
					"DAAAAEYBAAAAAAAARwEAAAAAAAAAAAAARwEAAAAAAABHAQAAAAAAAAoAAABhbHBoYWJldGljRwEAAAAAAABIAQAAAAAAAAAAAABIAQAAAAAAAEkBAAAAAAAAAAAAAEkBAAAAAAAASgEAAAAAAAAAAAAASgEAAAAAAABLAQAAAAAAAAAAAABLAQAAAAAAAEwBAAAAAAAAAAAAAEwBAAAAAAAATQEAAAAAAAAAAAAATQEAAAAAAABOAQAAAAAAAAAAAABOAQAAAAAAAE8BAAAAAAAAAAAAAE8BAAAAAAAAUAEAAAAAAAAAAAAAUAEAAAAAAABRAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYBAAAAAAAAUAEAAAAAAAAAAAAAAADwvw"
				],
				[
					79,
					1,
					"left_delete",
					null,
					"AQAAAEwBAAAAAAAATAEAAAAAAAABAAAALQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0BAAAAAAAATQEAAAAAAAAAAAAAAADwvw"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "\ndoi"
					},
					"BAAAAFEBAAAAAAAAUgEAAAAAAAAAAAAAUgEAAAAAAABTAQAAAAAAAAAAAABTAQAAAAAAAFQBAAAAAAAAAAAAAFQBAAAAAAAAVQEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFEBAAAAAAAAUQEAAAAAAAAAAAAAAADwvw"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFUBAAAAAAAAVgEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFUBAAAAAAAAVQEAAAAAAAAAAAAAAADwvw"
				],
				[
					85,
					1,
					"left_delete",
					null,
					"AQAAAFUBAAAAAAAAVQEAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFYBAAAAAAAAVgEAAAAAAAAAAAAAAADwvw"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "=false,"
					},
					"BwAAAFUBAAAAAAAAVgEAAAAAAAAAAAAAVgEAAAAAAABXAQAAAAAAAAAAAABXAQAAAAAAAFgBAAAAAAAAAAAAAFgBAAAAAAAAWQEAAAAAAAAAAAAAWQEAAAAAAABaAQAAAAAAAAAAAABaAQAAAAAAAFsBAAAAAAAAAAAAAFsBAAAAAAAAXAEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFUBAAAAAAAAVQEAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "\nisbn=false"
					},
					"CwAAAFwBAAAAAAAAXQEAAAAAAAAAAAAAXQEAAAAAAABeAQAAAAAAAAAAAABeAQAAAAAAAF8BAAAAAAAAAAAAAF8BAAAAAAAAYAEAAAAAAAAAAAAAYAEAAAAAAABhAQAAAAAAAAAAAABhAQAAAAAAAGIBAAAAAAAAAAAAAGIBAAAAAAAAYwEAAAAAAAAAAAAAYwEAAAAAAABkAQAAAAAAAAAAAABkAQAAAAAAAGUBAAAAAAAAAAAAAGUBAAAAAAAAZgEAAAAAAAAAAAAAZgEAAAAAAABnAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFwBAAAAAAAAXAEAAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": ",u"
					},
					"AgAAAGcBAAAAAAAAaAEAAAAAAAAAAAAAaAEAAAAAAABpAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGcBAAAAAAAAZwEAAAAAAAAAAAAAAADwvw"
				],
				[
					89,
					1,
					"left_delete",
					null,
					"AQAAAGgBAAAAAAAAaAEAAAAAAAABAAAAdQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkBAAAAAAAAaQEAAAAAAAAAAAAAAADwvw"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "\nurl=false"
					},
					"CgAAAGgBAAAAAAAAaQEAAAAAAAAAAAAAaQEAAAAAAABqAQAAAAAAAAAAAABqAQAAAAAAAGsBAAAAAAAAAAAAAGsBAAAAAAAAbAEAAAAAAAAAAAAAbAEAAAAAAABtAQAAAAAAAAAAAABtAQAAAAAAAG4BAAAAAAAAAAAAAG4BAAAAAAAAbwEAAAAAAAAAAAAAbwEAAAAAAABwAQAAAAAAAAAAAABwAQAAAAAAAHEBAAAAAAAAAAAAAHEBAAAAAAAAcgEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgBAAAAAAAAaAEAAAAAAAAAAAAAAADwvw"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "\nbibliograp"
					},
					"CwAAAFEBAAAAAAAAUgEAAAAAAAAAAAAAUgEAAAAAAABTAQAAAAAAAAAAAABTAQAAAAAAAFQBAAAAAAAAAAAAAFQBAAAAAAAAVQEAAAAAAAAAAAAAVQEAAAAAAABWAQAAAAAAAAAAAABWAQAAAAAAAFcBAAAAAAAAAAAAAFcBAAAAAAAAWAEAAAAAAAAAAAAAWAEAAAAAAABZAQAAAAAAAAAAAABZAQAAAAAAAFoBAAAAAAAAAAAAAFoBAAAAAAAAWwEAAAAAAAAAAAAAWwEAAAAAAABcAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFEBAAAAAAAAUQEAAAAAAAAAAAAAAADwvw"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": "hy"
					},
					"AgAAAFwBAAAAAAAAXQEAAAAAAAAAAAAAXQEAAAAAAABeAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFwBAAAAAAAAXAEAAAAAAAAAAAAAAADwvw"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF4BAAAAAAAAXwEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF4BAAAAAAAAXgEAAAAAAAAAAAAAAADwvw"
				],
				[
					121,
					1,
					"left_delete",
					null,
					"AQAAAF4BAAAAAAAAXgEAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8BAAAAAAAAXwEAAAAAAAAAAAAAAADwvw"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "=apa,"
					},
					"BQAAAF4BAAAAAAAAXwEAAAAAAAAAAAAAXwEAAAAAAABgAQAAAAAAAAAAAABgAQAAAAAAAGEBAAAAAAAAAAAAAGEBAAAAAAAAYgEAAAAAAAAAAAAAYgEAAAAAAABjAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF4BAAAAAAAAXgEAAAAAAAAAAAAAAADwvw"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "bibstyle"
					},
					"CQAAAFIBAAAAAAAAUwEAAAAAAAAAAAAAUwEAAAAAAABTAQAAAAAAAAwAAABiaWJsaW9ncmFwaHlTAQAAAAAAAFQBAAAAAAAAAAAAAFQBAAAAAAAAVQEAAAAAAAAAAAAAVQEAAAAAAABWAQAAAAAAAAAAAABWAQAAAAAAAFcBAAAAAAAAAAAAAFcBAAAAAAAAWAEAAAAAAAAAAAAAWAEAAAAAAABZAQAAAAAAAAAAAABZAQAAAAAAAFoBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFIBAAAAAAAAXgEAAAAAAAAAAAAAAADwvw"
				],
				[
					136,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAFIBAAAAAAAAVAEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8BAAAAAAAAXwEAAAAAAAAAAAAAAADwvw"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "apa"
					},
					"BAAAAEYBAAAAAAAARwEAAAAAAAAAAAAARwEAAAAAAABHAQAAAAAAAAoAAABhdXRob3J5ZWFyRwEAAAAAAABIAQAAAAAAAAAAAABIAQAAAAAAAEkBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYBAAAAAAAAUAEAAAAAAAAAAAAAAADwvw"
				],
				[
					148,
					2,
					"left_delete",
					null,
					"AgAAAEwBAAAAAAAATAEAAAAAAAABAAAAIEsBAAAAAAAASwEAAAAAAAABAAAAJQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0BAAAAAAAATQEAAAAAAAAAAAAAAADwvw"
				],
				[
					153,
					14,
					"left_delete",
					null,
					"DgAAAFcBAAAAAAAAVwEAAAAAAAABAAAALFYBAAAAAAAAVgEAAAAAAAABAAAAYVUBAAAAAAAAVQEAAAAAAAABAAAAcFQBAAAAAAAAVAEAAAAAAAABAAAAYVMBAAAAAAAAUwEAAAAAAAABAAAAPVIBAAAAAAAAUgEAAAAAAAABAAAAZVEBAAAAAAAAUQEAAAAAAAABAAAAbFABAAAAAAAAUAEAAAAAAAABAAAAeU8BAAAAAAAATwEAAAAAAAABAAAAdE4BAAAAAAAATgEAAAAAAAABAAAAc00BAAAAAAAATQEAAAAAAAABAAAAYkwBAAAAAAAATAEAAAAAAAABAAAAaUsBAAAAAAAASwEAAAAAAAABAAAAYkoBAAAAAAAASgEAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFgBAAAAAAAAWAEAAAAAAAAAAAAAAADwvw"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "\ncites"
					},
					"BgAAAEoBAAAAAAAASwEAAAAAAAAAAAAASwEAAAAAAABMAQAAAAAAAAAAAABMAQAAAAAAAE0BAAAAAAAAAAAAAE0BAAAAAAAATgEAAAAAAAAAAAAATgEAAAAAAABPAQAAAAAAAAAAAABPAQAAAAAAAFABAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoBAAAAAAAASgEAAAAAAAAAAAAAAADwvw"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "tyle="
					},
					"BQAAAFABAAAAAAAAUQEAAAAAAAAAAAAAUQEAAAAAAABSAQAAAAAAAAAAAABSAQAAAAAAAFMBAAAAAAAAAAAAAFMBAAAAAAAAVAEAAAAAAAAAAAAAVAEAAAAAAABVAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFABAAAAAAAAUAEAAAAAAAAAAAAAAADwvw"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": "alphabetic,"
					},
					"CwAAAFUBAAAAAAAAVgEAAAAAAAAAAAAAVgEAAAAAAABXAQAAAAAAAAAAAABXAQAAAAAAAFgBAAAAAAAAAAAAAFgBAAAAAAAAWQEAAAAAAAAAAAAAWQEAAAAAAABaAQAAAAAAAAAAAABaAQAAAAAAAFsBAAAAAAAAAAAAAFsBAAAAAAAAXAEAAAAAAAAAAAAAXAEAAAAAAABdAQAAAAAAAAAAAABdAQAAAAAAAF4BAAAAAAAAAAAAAF4BAAAAAAAAXwEAAAAAAAAAAAAAXwEAAAAAAABgAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFUBAAAAAAAAVQEAAAAAAAAAAAAAAADwvw"
				],
				[
					162,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAEsBAAAAAAAATQEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF4BAAAAAAAAXgEAAAAAAAAAAAAAAADwvw"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "numeric"
					},
					"CAAAAEYBAAAAAAAARwEAAAAAAAAAAAAARwEAAAAAAABHAQAAAAAAAAMAAABhcGFHAQAAAAAAAEgBAAAAAAAAAAAAAEgBAAAAAAAASQEAAAAAAAAAAAAASQEAAAAAAABKAQAAAAAAAAAAAABKAQAAAAAAAEsBAAAAAAAAAAAAAEsBAAAAAAAATAEAAAAAAAAAAAAATAEAAAAAAABNAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYBAAAAAAAASQEAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9AQAAAAAAAH0BAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "/C/Users/acesac5/OneDrive - Sheffield Hallam University/Teaching/R/Hills/hill_code.R",
			"settings":
			{
				"buffer_size": 899,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/C/Users/acesac5/OneDrive - Sheffield Hallam University/Teaching/R/intro week/intro_week.R",
			"settings":
			{
				"buffer_size": 420,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "library(tidyverse)"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAA/wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"paste",
					null,
					"AQAAAAEAAAAAAAAAcwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAALwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAC8AAAAAAAAAMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwAAAAAAAAAvAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "Thank you for your email. I am on leave 20-22 June and will reply on my return.\n\nBest,\nAlex.",
			"settings":
			{
				"buffer_size": 92,
				"line_ending": "Windows",
				"name": "Thank you for your email. I am on leave 20-22 June"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAXAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/C/Users/acesac5/OneDrive - Sheffield Hallam University/Teaching/R/intro week/intro_week.csv",
			"settings":
			{
				"buffer_size": 1665,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "\"Title\",\"Grid Reference\",\"X (Easting)\",\"Y (Northin"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAgQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "action_op_ref.bib",
			"settings":
			{
				"buffer_size": 23608,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					49,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFxSAAAAAAAAXVIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFxSAAAAAAAAXFIAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"paste",
					null,
					"AQAAAF1SAAAAAAAAl1QAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF1SAAAAAAAAXVIAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJdUAAAAAAAAmFQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJdUAAAAAAAAl1QAAAAAAAAAAAAAAADwvw"
				],
				[
					74,
					2,
					"left_delete",
					null,
					"AgAAALVTAAAAAAAAtVMAAAAAAAAQAAAAICAgIG1vbnRoID0gZGVjLLRTAAAAAAAAtFMAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMVTAAAAAAAAtVMAAAAAAAAAAAAAAADwvw"
				],
				[
					77,
					1,
					"lower_case",
					null,
					"AQAAAIZTAAAAAAAAllMAAAAAAAAQAAAAV09STEQgU0NJRU5USUZJQw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJZTAAAAAAAAhlMAAAAAAAAAAAAAAADwvw"
				],
				[
					79,
					1,
					"left_delete",
					null,
					"AQAAAIZTAAAAAAAAhlMAAAAAAAABAAAAdw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIdTAAAAAAAAh1MAAAAAAAAAAAAAAADwvw"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "W"
					},
					"AQAAAIZTAAAAAAAAh1MAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIZTAAAAAAAAhlMAAAAAAAAAAAAAAADwvw"
				],
				[
					83,
					1,
					"left_delete",
					null,
					"AQAAAIxTAAAAAAAAjFMAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI1TAAAAAAAAjVMAAAAAAAAAAAAAAADwvw"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAIxTAAAAAAAAjVMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIxTAAAAAAAAjFMAAAAAAAAAAAAAAADwvw"
				],
				[
					89,
					2,
					"left_delete",
					null,
					"AgAAAERTAAAAAAAARFMAAAAAAAAUAAAAICAgIGxhbmd1YWdlID0ge2VufSxDUwAAAAAAAENTAAAAAAAAAQAAAAo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFhTAAAAAAAARFMAAAAAAAAAAAAAAADwvw"
				],
				[
					92,
					2,
					"left_delete",
					null,
					"AgAAAERTAAAAAAAARFMAAAAAAAAbAAAAICAgIHVybGRhdGUgPSB7MjAyMy0wNC0xNH0sQ1MAAAAAAABDUwAAAAAAAAEAAAAK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF9TAAAAAAAARFMAAAAAAAAAAAAAAADwvw"
				],
				[
					117,
					1,
					"lower_case",
					null,
					"AQAAANgbAAAAAAAA4RsAAAAAAAAJAAAAU1lNTUVUUklD",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgbAAAAAAAA4RsAAAAAAAAAAAAAAADwvw"
				],
				[
					122,
					1,
					"lower_case",
					null,
					"AQAAAOQbAAAAAAAA7BsAAAAAAAAIAAAATU9OT0lEQUw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQbAAAAAAAA7BsAAAAAAAAAAAAAAADwvw"
				],
				[
					127,
					1,
					"lower_case",
					null,
					"AQAAAPMbAAAAAAAA/RsAAAAAAAAKAAAAQ0FURUdPUklFUw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMbAAAAAAAA/RsAAAAAAAAAAAAAAADwvw"
				],
				[
					132,
					1,
					"lower_case",
					null,
					"AQAAAAAcAAAAAAAAAxwAAAAAAAADAAAAQU5E",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAcAAAAAAAAAxwAAAAAAAAAAAAAAADwvw"
				],
				[
					137,
					1,
					"lower_case",
					null,
					"AQAAAAYcAAAAAAAACxwAAAAAAAAFAAAAVEhFSVI",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYcAAAAAAAACxwAAAAAAAAAAAAAAADwvw"
				],
				[
					142,
					1,
					"lower_case",
					null,
					"AQAAAA4cAAAAAAAAHRwAAAAAAAAPAAAAU1RSSUNUSUZJQ0FUSU9O",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4cAAAAAAAAHRwAAAAAAAAAAAAAAADwvw"
				],
				[
					144,
					1,
					"left_delete",
					null,
					"AQAAAB0cAAAAAAAAHRwAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB4cAAAAAAAAHhwAAAAAAAAAAAAAAADwvw"
				],
				[
					148,
					1,
					"right_delete",
					null,
					"AQAAAA4cAAAAAAAADhwAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4cAAAAAAAADhwAAAAAAAAAAAAAAADwvw"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAA4cAAAAAAAADxwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4cAAAAAAAADhwAAAAAAAAAAAAAAADwvw"
				],
				[
					151,
					1,
					"left_delete",
					null,
					"AQAAAA0cAAAAAAAADRwAAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4cAAAAAAAADhwAAAAAAAAAAAAAAADwvw"
				],
				[
					153,
					1,
					"left_delete",
					null,
					"AQAAAAscAAAAAAAACxwAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwcAAAAAAAADBwAAAAAAAAAAAAAAADwvw"
				],
				[
					155,
					1,
					"left_delete",
					null,
					"AQAAAAUcAAAAAAAABRwAAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYcAAAAAAAABhwAAAAAAAAAAAAAAADwvw"
				],
				[
					156,
					1,
					"right_delete",
					null,
					"AQAAAAUcAAAAAAAABRwAAAAAAAABAAAAdA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUcAAAAAAAABRwAAAAAAAAAAAAAAADwvw"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAAUcAAAAAAAABhwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUcAAAAAAAABRwAAAAAAAAAAAAAAADwvw"
				],
				[
					160,
					1,
					"right_delete",
					null,
					"AQAAAAscAAAAAAAACxwAAAAAAAABAAAAUw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAscAAAAAAAACxwAAAAAAAAAAAAAAADwvw"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAAscAAAAAAAADBwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAscAAAAAAAACxwAAAAAAAAAAAAAAADwvw"
				],
				[
					163,
					1,
					"left_delete",
					null,
					"AQAAAP8bAAAAAAAA/xsAAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAcAAAAAAAAABwAAAAAAAAAAAAAAADwvw"
				],
				[
					165,
					1,
					"right_delete",
					null,
					"AQAAAAIcAAAAAAAAAhwAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIcAAAAAAAAAhwAAAAAAAAAAAAAAADwvw"
				],
				[
					167,
					1,
					"left_delete",
					null,
					"AQAAAP0bAAAAAAAA/RsAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4bAAAAAAAA/hsAAAAAAAAAAAAAAADwvw"
				],
				[
					169,
					1,
					"left_delete",
					null,
					"AQAAAPIbAAAAAAAA8hsAAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMbAAAAAAAA8xsAAAAAAAAAAAAAAADwvw"
				],
				[
					171,
					1,
					"left_delete",
					null,
					"AQAAAOwbAAAAAAAA7BsAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0bAAAAAAAA7RsAAAAAAAAAAAAAAADwvw"
				],
				[
					173,
					1,
					"left_delete",
					null,
					"AQAAAOMbAAAAAAAA4xsAAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQbAAAAAAAA5BsAAAAAAAAAAAAAAADwvw"
				],
				[
					176,
					1,
					"left_delete",
					null,
					"AQAAAOEbAAAAAAAA4RsAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOIbAAAAAAAA4hsAAAAAAAAAAAAAAADwvw"
				],
				[
					178,
					1,
					"left_delete",
					null,
					"AQAAANgbAAAAAAAA2BsAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANkbAAAAAAAA2RsAAAAAAAAAAAAAAADwvw"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAANgbAAAAAAAA2RsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgbAAAAAAAA2BsAAAAAAAAAAAAAAADwvw"
				],
				[
					181,
					1,
					"left_delete",
					null,
					"AQAAANcbAAAAAAAA1xsAAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgbAAAAAAAA2BsAAAAAAAAAAAAAAADwvw"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AgAAAAMcAAAAAAAABBwAAAAAAAAAAAAABBwAAAAAAAAEHAAAAAAAAAEAAABk",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMcAAAAAAAABBwAAAAAAAAAAAAAAADwvw"
				],
				[
					192,
					1,
					"paste",
					null,
					"AgAAAFJSAAAAAAAAjFQAAAAAAAAAAAAAjFQAAAAAAACMVAAAAAAAAPYBAABAYm9va3t5YXVfaW5maW5pdHlfMjAyMSwKICAgIHRpdGxlID0ge0luZmluaXR5IHtPcGVyYWRzfSBhbmQge01vbm9pZGFsfSB7Q2F0ZWdvcmllc30gd2l0aCB7R3JvdXB9IHtFcXVpdmFyaWFuY2V9fSwKICAgIGlzYm4gPSB7OTc4OTgxMTI1MDkyNyA5Nzg5ODExMjUwOTM0fSwKICAgIHVybCA9IHtodHRwczovL3d3dy53b3JsZHNjaWVudGlmaWMuY29tL3dvcmxkc2NpYm9va3MvMTAuMTE0Mi8xMjY4N30sCiAgICBwdWJsaXNoZXIgPSB7V29ybGQgU2NpZW50aWZpY30sCiAgICBhdXRob3IgPSB7WWF1LCBEb25hbGR9LAogICAgeWVhciA9IHsyMDIxfSwKICAgIGRvaSA9IHsxMC4xMTQyLzEyNjg3fSwKICAgIGZpbGUgPSB7U3VibWl0dGVkIFZlcnNpb246Q1w6XFxVc2Vyc1xcQWxleFxcWm90ZXJvXFxzdG9yYWdlXFwzWTU5WldIM1xcWWF1IC0gMjAyMSAtIEluZmluaXR5IE9wZXJhZHMgYW5kIE1vbm9pZGFsIENhdGVnb3JpZXMgd2l0aCBHcm91LnBkZjphcHBsaWNhdGlvbi9wZGZ9LAp9",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEhUAAAAAAAAUlIAAAAAAAAAAAAAAADwvw"
				],
				[
					195,
					2,
					"left_delete",
					null,
					"AgAAAKpTAAAAAAAAqlMAAAAAAAAQAAAAICAgIG1vbnRoID0gZGVjLKlTAAAAAAAAqVMAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALpTAAAAAAAAqlMAAAAAAAAAAAAAAADwvw"
				],
				[
					198,
					2,
					"left_delete",
					null,
					"AgAAADlTAAAAAAAAOVMAAAAAAAAUAAAAICAgIGxhbmd1YWdlID0ge2VufSw4UwAAAAAAADhTAAAAAAAAAQAAAAo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE1TAAAAAAAAOVMAAAAAAAAAAAAAAADwvw"
				],
				[
					205,
					2,
					"left_delete",
					null,
					"AgAAADlTAAAAAAAAOVMAAAAAAAAbAAAAICAgIHVybGRhdGUgPSB7MjAyMy0wNC0xNH0sOFMAAAAAAAA4UwAAAAAAAAEAAAAK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFRTAAAAAAAAOVMAAAAAAAAAAAAAAADwvw"
				],
				[
					208,
					1,
					"lower_case",
					null,
					"AQAAAEpTAAAAAAAAUFMAAAAAAAAGAAAAV09STEQg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFBTAAAAAAAASlMAAAAAAAAAAAAAAADwvw"
				],
				[
					213,
					1,
					"lower_case",
					null,
					"AQAAAFBTAAAAAAAAWlMAAAAAAAAKAAAAU0NJRU5USUZJQw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFBTAAAAAAAAWlMAAAAAAAAAAAAAAADwvw"
				],
				[
					215,
					1,
					"left_delete",
					null,
					"AQAAAFBTAAAAAAAAUFMAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFFTAAAAAAAAUVMAAAAAAAAAAAAAAADwvw"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAFBTAAAAAAAAUVMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFBTAAAAAAAAUFMAAAAAAAAAAAAAAADwvw"
				],
				[
					219,
					1,
					"right_delete",
					null,
					"AQAAAEpTAAAAAAAASlMAAAAAAAABAAAAdw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEpTAAAAAAAASlMAAAAAAAAAAAAAAADwvw"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": "W"
					},
					"AQAAAEpTAAAAAAAAS1MAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEpTAAAAAAAASlMAAAAAAAAAAAAAAADwvw"
				],
				[
					223,
					2,
					"left_delete",
					null,
					"AgAAAKdTAAAAAAAAp1MAAAAAAACgAAAAICAgIGZpbGUgPSB7U3VibWl0dGVkIFZlcnNpb246Q1w6XFxVc2Vyc1xcQWxleFxcWm90ZXJvXFxzdG9yYWdlXFwzWTU5WldIM1xcWWF1IC0gMjAyMSAtIEluZmluaXR5IE9wZXJhZHMgYW5kIE1vbm9pZGFsIENhdGVnb3JpZXMgd2l0aCBHcm91LnBkZjphcHBsaWNhdGlvbi9wZGZ9LKZTAAAAAAAAplMAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEdUAAAAAAAAp1MAAAAAAAAAAAAAAADwvw"
				],
				[
					226,
					2,
					"left_delete",
					null,
					"AgAAAFFSAAAAAAAAUVIAAAAAAAABAAAAClBSAAAAAAAAUFIAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFJSAAAAAAAAUlIAAAAAAAAAAAAAAADwvw"
				],
				[
					229,
					1,
					"left_delete",
					null,
					"AQAAAKdTAAAAAAAAp1MAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKhTAAAAAAAAqFMAAAAAAAAAAAAAAADwvw"
				],
				[
					230,
					1,
					"right_delete",
					null,
					"AQAAAKdTAAAAAAAAp1MAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKdTAAAAAAAAp1MAAAAAAAAAAAAAAADwvw"
				],
				[
					247,
					2,
					"left_delete",
					null,
					"AgAAAKQZAAAAAAAApBkAAAAAAAABAAAAJKMZAAAAAAAAoxkAAAAAAAABAAAAXA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKUZAAAAAAAApRkAAAAAAAAAAAAAAADwvw"
				],
				[
					250,
					1,
					"left_delete",
					null,
					"AQAAAKcZAAAAAAAApxkAAAAAAAABAAAAJA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKgZAAAAAAAAqBkAAAAAAAAAAAAAAADwvw"
				],
				[
					251,
					1,
					"left_delete",
					null,
					"AQAAAKYZAAAAAAAAphkAAAAAAAABAAAAXA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKcZAAAAAAAApxkAAAAAAAAAAAAAAADwvw"
				],
				[
					256,
					1,
					"paste",
					null,
					"AgAAAFwZAAAAAAAAPSgAAAAAAAAAAAAAPSgAAAAAAAA9KAAAAAAAACMEAABAYXJ0aWNsZXtndWlsbG91X211bHRpcGxpY2F0aXZlLAogIHRpdGxlID0ge011bHRpcGxpY2F0aXZlIGVxdWl2YXJpYW50IHtLfS10aGVvcnkgYW5kIHRoZSB7QmFycmF0dH0te1ByaWRkeX0te1F1aWxsZW59IHRoZW9yZW19LAogIHVybCA9IHtodHRwOi8vYXJ4aXYub3JnL2Ficy8yMTAyLjEzMjQ2fSwKICB1cmxkYXRlID0gezIwMjEtMDYtMTB9LAogIGpvdXJuYWwgPSB7YXJYaXY6MjEwMi4xMzI0NiBbbWF0aF19LAogIGF1dGhvciA9IHtHdWlsbG91LCBCZXJ0cmFuZCBKLiBhbmQgTWF5LCBKLiBQZXRlciBhbmQgTWVybGluZywgTW9uYSBhbmQgT3Nvcm5vLCBBbmd7XCdlfWxpY2EgTS59LAogIG1vbnRoID0gZmViLAogIHllYXIgPSB7MjAyMX0sCiAgbm90ZSA9IHthclhpdjogMjEwMi4xMzI0Nn0sCiAga2V5d29yZHMgPSB7TWF0aGVtYXRpY3MgLSBBbGdlYnJhaWMgVG9wb2xvZ3ksIE1hdGhlbWF0aWNzIC0gQ2F0ZWdvcnkgVGhlb3J5LCBNYXRoZW1hdGljcyAtIEstVGhlb3J5IGFuZCBIb21vbG9neSwgUHJpbWFyeSAxOUQyMywgMTlMNDcsIDU1UDQ4LCBTZWNvbmRhcnkgMThEMjAsIDE4RDQwLCAxOE02NSwgNTVQOTEsIDU1VTQwfSwKfQoKQGFydGljbGV7Z3VpbGxvdV9zeW1tZXRyaWMsCiAgdGl0bGUgPSB7U3ltbWV0cmljIG1vbm9pZGFsIHtHfS1jYXRlZ29yaWVzIGFuZCB0aGVpciBzdHJpY3RpZmljYXRpb259LAogIHZvbHVtZSA9IHs3MX0sCiAgaXNzbiA9IHswMDMzLTU2MDZ9LAogIHVybCA9IHtodHRwczovL2RvaS5vcmcvMTAuMTA5My9xbWF0aGovaGF6MDM0fSwKICBkb2kgPSB7MTAuMTA5My9xbWF0aGovaGF6MDM0fSwKICBudW1iZXIgPSB7MX0sCiAgdXJsZGF0ZSA9IHsyMDIxLTA2LTE1fSwKICBqb3VybmFsID0ge1RoZSBRdWFydGVybHkgSm91cm5hbCBvZiBNYXRoZW1hdGljc30sCiAgYXV0aG9yID0ge0d1aWxsb3UsIEJlcnRyYW5kIEogYW5kIE1heSwgSiBQZXRlciBhbmQgTWVybGluZywgTW9uYSBhbmQgT3Nvcm5vLCBBbmd7XCdlfWxpY2EgTX0sCiAgbW9udGggPSBtYXIsCiAgeWVhciA9IHsyMDIwfSwKICBwYWdlcyA9IHsyMDctLTI0Nn0sCn0",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8dAAAAAAAAXBkAAAAAAAAAAAAAAADwvw"
				],
				[
					259,
					5,
					"left_delete",
					null,
					"BQAAAHsZAAAAAAAAexkAAAAAAAABAAAAMHoZAAAAAAAAehkAAAAAAAABAAAAMnkZAAAAAAAAeRkAAAAAAAABAAAAMHgZAAAAAAAAeBkAAAAAAAABAAAAMncZAAAAAAAAdxkAAAAAAAABAAAAXw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwZAAAAAAAAfBkAAAAAAAAAAAAAAADwvw"
				],
				[
					262,
					5,
					"left_delete",
					null,
					"BQAAAPwgAAAAAAAA/CAAAAAAAAABAAAAM/sgAAAAAAAA+yAAAAAAAAABAAAAMvogAAAAAAAA+iAAAAAAAAABAAAAMPkgAAAAAAAA+SAAAAAAAAABAAAAMvggAAAAAAAA+CAAAAAAAAABAAAAXw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP0gAAAAAAAA/SAAAAAAAAAAAAAAAADwvw"
				],
				[
					271,
					1,
					"left_delete",
					null,
					"AQAAAMwZAAAAAAAAzBkAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0ZAAAAAAAAzRkAAAAAAAAAAAAAAADwvw"
				],
				[
					274,
					1,
					"left_delete",
					null,
					"AQAAALwZAAAAAAAAvBkAAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0ZAAAAAAAAvRkAAAAAAAAAAAAAAADwvw"
				],
				[
					276,
					1,
					"left_delete",
					null,
					"AQAAALoZAAAAAAAAuhkAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALsZAAAAAAAAuxkAAAAAAAAAAAAAAADwvw"
				],
				[
					279,
					1,
					"left_delete",
					null,
					"AQAAALQZAAAAAAAAtBkAAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALUZAAAAAAAAtRkAAAAAAAAAAAAAAADwvw"
				],
				[
					281,
					1,
					"left_delete",
					null,
					"AQAAALIZAAAAAAAAshkAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALMZAAAAAAAAsxkAAAAAAAAAAAAAAADwvw"
				],
				[
					283,
					1,
					"left_delete",
					null,
					"AQAAAK4ZAAAAAAAArhkAAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK8ZAAAAAAAArxkAAAAAAAAAAAAAAADwvw"
				],
				[
					285,
					1,
					"left_delete",
					null,
					"AQAAAKwZAAAAAAAArBkAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0ZAAAAAAAArRkAAAAAAAAAAAAAAADwvw"
				],
				[
					287,
					1,
					"left_delete",
					null,
					"AQAAAKEZAAAAAAAAoRkAAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKIZAAAAAAAAohkAAAAAAAAAAAAAAADwvw"
				],
				[
					289,
					1,
					"left_delete",
					null,
					"AQAAAJsZAAAAAAAAmxkAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwZAAAAAAAAnBkAAAAAAAAAAAAAAADwvw"
				],
				[
					291,
					1,
					"left_delete",
					null,
					"AQAAAJIZAAAAAAAAkhkAAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMZAAAAAAAAkxkAAAAAAAAAAAAAAADwvw"
				],
				[
					293,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAJAZAAAAAAAAkBkAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEZAAAAAAAAkRkAAAAAAAAAAAAAAADwvw"
				],
				[
					296,
					1,
					"left_delete",
					null,
					"AQAAAIYZAAAAAAAAhhkAAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcZAAAAAAAAhxkAAAAAAAAAAAAAAADwvw"
				],
				[
					299,
					1,
					"lower_case",
					null,
					"AQAAAIYZAAAAAAAAwRkAAAAAAAA7AAAAU1lNTUVUUklDIE1PTk9JREFMIHtHfS1DQVRFR09SSUVTIEFORCBUSEVJUiBTVFJJQ1RJRklDQVRJT04",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYZAAAAAAAAwRkAAAAAAAAAAAAAAADwvw"
				],
				[
					301,
					1,
					"left_delete",
					null,
					"AQAAAJoZAAAAAAAAmhkAAAAAAAABAAAAZw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJsZAAAAAAAAmxkAAAAAAAAAAAAAAADwvw"
				],
				[
					302,
					1,
					"insert",
					{
						"characters": "G"
					},
					"AQAAAJoZAAAAAAAAmxkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJoZAAAAAAAAmhkAAAAAAAAAAAAAAADwvw"
				],
				[
					305,
					1,
					"left_delete",
					null,
					"AQAAAIYZAAAAAAAAhhkAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcZAAAAAAAAhxkAAAAAAAAAAAAAAADwvw"
				],
				[
					306,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAIYZAAAAAAAAhxkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYZAAAAAAAAhhkAAAAAAAAAAAAAAADwvw"
				],
				[
					309,
					2,
					"left_delete",
					null,
					"AgAAAD8fAAAAAAAAPx8AAAAAAACJAQAAICAgIGZpbGUgPSB7RnVsbCBUZXh0OkNcOlxcVXNlcnNcXEFsZXhcXFpvdGVyb1xcc3RvcmFnZVxcRFpaRkxJWTlcXEd1aWxsb3UgZXQgYWwuIC0gMjAyMCAtIFNZTU1FVFJJQyBNT05PSURBTCBHLUNBVEVHT1JJRVMgQU5EIFRIRUlSIFNUUklDVElGLnBkZjphcHBsaWNhdGlvbi9wZGY7RnVsbCBUZXh0IFBERjpDXDpcXFVzZXJzXFxBbGV4XFxab3Rlcm9cXHN0b3JhZ2VcXEFTMjlOREdMXFxHdWlsbG91IGV0IGFsLiAtIDIwMjAgLSBTWU1NRVRSSUMgTU9OT0lEQUwgRy1DQVRFR09SSUVTIEFORCBUSEVJUiBTVFJJQ1RJRi5wZGY6YXBwbGljYXRpb24vcGRmO1NuYXBzaG90OkNcOlxcVXNlcnNcXEFsZXhcXFpvdGVyb1xcc3RvcmFnZVxcRkozVUtWVlNcXDU2NDM3MzMuaHRtbDp0ZXh0L2h0bWx9Ph8AAAAAAAA+HwAAAAAAAAEAAAAK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMggAAAAAAAAPx8AAAAAAAAAAAAAAADwvw"
				],
				[
					310,
					1,
					"right_delete",
					null,
					"AQAAAD4fAAAAAAAAPh8AAAAAAAABAAAALA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4fAAAAAAAAPh8AAAAAAAAAAAAAAADwvw"
				],
				[
					313,
					1,
					"right_delete",
					null,
					"AQAAAOQlAAAAAAAA5CUAAAAAAAC1AAAAICAgIGZpbGUgPSB7U2NpZW5jZURpcmVjdCBGdWxsIFRleHQgUERGOkNcOlxcVXNlcnNcXEFsZXhcXFpvdGVyb1xcc3RvcmFnZVxcRVROVFkyOU5cXEd1aWxsb3UgZXQgYWwuIC0gMjAyMyAtIE11bHRpcGxpY2F0aXZlIGVxdWl2YXJpYW50IEstdGhlb3J5IGFuZCB0aGUgQmFycmF0LnBkZjphcHBsaWNhdGlvbi9wZGZ9LA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQlAAAAAAAAmSYAAAAAAAAAAAAAAADwvw"
				],
				[
					314,
					1,
					"left_delete",
					null,
					"AQAAAOMlAAAAAAAA4yUAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQlAAAAAAAA5CUAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjJQAAAAAAAOMlAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "1-introduction/1-intro.tex",
			"settings":
			{
				"buffer_size": 56,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "section"
					},
					"CAAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAcAAABjaGFwdGVyAgAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAACAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABAAAAAAAAAAgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAIQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n\\cite"
					},
					"BgAAADgAAAAAAAAAOQAAAAAAAAAAAAAAOQAAAAAAAAA6AAAAAAAAAAAAAAA6AAAAAAAAADsAAAAAAAAAAAAAADsAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAAA9AAAAAAAAAAAAAAA9AAAAAAAAAD4AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgAAAAAAAAAOAAAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"latex_tools_fill_all_complete_bracket",
					{
						"insert_char": "{",
						"remove_regions":
						[
						]
					},
					"AgAAAD4AAAAAAAAAPwAAAAAAAAAAAAAAPwAAAAAAAABAAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4AAAAAAAAAPgAAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					2,
					"left_delete",
					null,
					"AgAAADkAAAAAAAAAOQAAAAAAAAAHAAAAXGNpdGV7fTgAAAAAAAAAOAAAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAAAAAAAAAAOQAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "2-action_operads/2-action_operads.tex",
			"settings":
			{
				"buffer_size": 105719,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					204,
					1,
					"insert",
					{
						"characters": "proceed"
					},
					"BwAAAIE8AAAAAAAAgjwAAAAAAAAAAAAAgjwAAAAAAACDPAAAAAAAAAAAAACDPAAAAAAAAIQ8AAAAAAAAAAAAAIQ8AAAAAAAAhTwAAAAAAAAAAAAAhTwAAAAAAACGPAAAAAAAAAAAAACGPAAAAAAAAIc8AAAAAAAAAAAAAIc8AAAAAAAAiDwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIE8AAAAAAAAgTwAAAAAAAAAAAAAAADwvw"
				],
				[
					205,
					1,
					"insert",
					{
						"characters": " with"
					},
					"BQAAAIg8AAAAAAAAiTwAAAAAAAAAAAAAiTwAAAAAAACKPAAAAAAAAAAAAACKPAAAAAAAAIs8AAAAAAAAAAAAAIs8AAAAAAAAjDwAAAAAAAAAAAAAjDwAAAAAAACNPAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIg8AAAAAAAAiDwAAAAAAAAAAAAAAADwvw"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": " some"
					},
					"BQAAAI08AAAAAAAAjjwAAAAAAAAAAAAAjjwAAAAAAACPPAAAAAAAAAAAAACPPAAAAAAAAJA8AAAAAAAAAAAAAJA8AAAAAAAAkTwAAAAAAAAAAAAAkTwAAAAAAACSPAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI08AAAAAAAAjTwAAAAAAAAAAAAAAADwvw"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": " remarks"
					},
					"CAAAAJI8AAAAAAAAkzwAAAAAAAAAAAAAkzwAAAAAAACUPAAAAAAAAAAAAACUPAAAAAAAAJU8AAAAAAAAAAAAAJU8AAAAAAAAljwAAAAAAAAAAAAAljwAAAAAAACXPAAAAAAAAAAAAACXPAAAAAAAAJg8AAAAAAAAAAAAAJg8AAAAAAAAmTwAAAAAAAAAAAAAmTwAAAAAAACaPAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJI8AAAAAAAAkjwAAAAAAAAAAAAAAADwvw"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": " about"
					},
					"BgAAAJo8AAAAAAAAmzwAAAAAAAAAAAAAmzwAAAAAAACcPAAAAAAAAAAAAACcPAAAAAAAAJ08AAAAAAAAAAAAAJ08AAAAAAAAnjwAAAAAAAAAAAAAnjwAAAAAAACfPAAAAAAAAAAAAACfPAAAAAAAAKA8AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJo8AAAAAAAAmjwAAAAAAAAAAAAAAADwvw"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": " terminal"
					},
					"CQAAAKA8AAAAAAAAoTwAAAAAAAAAAAAAoTwAAAAAAACiPAAAAAAAAAAAAACiPAAAAAAAAKM8AAAAAAAAAAAAAKM8AAAAAAAApDwAAAAAAAAAAAAApDwAAAAAAAClPAAAAAAAAAAAAAClPAAAAAAAAKY8AAAAAAAAAAAAAKY8AAAAAAAApzwAAAAAAAAAAAAApzwAAAAAAACoPAAAAAAAAAAAAACoPAAAAAAAAKk8AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKA8AAAAAAAAoDwAAAAAAAAAAAAAAADwvw"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAAKk8AAAAAAAAqjwAAAAAAAAAAAAAqjwAAAAAAACrPAAAAAAAAAAAAACrPAAAAAAAAKw8AAAAAAAAAAAAAKw8AAAAAAAArTwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKk8AAAAAAAAqTwAAAAAAAAAAAAAAADwvw"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": " initial"
					},
					"CAAAAK08AAAAAAAArjwAAAAAAAAAAAAArjwAAAAAAACvPAAAAAAAAAAAAACvPAAAAAAAALA8AAAAAAAAAAAAALA8AAAAAAAAsTwAAAAAAAAAAAAAsTwAAAAAAACyPAAAAAAAAAAAAACyPAAAAAAAALM8AAAAAAAAAAAAALM8AAAAAAAAtDwAAAAAAAAAAAAAtDwAAAAAAAC1PAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK08AAAAAAAArTwAAAAAAAAAAAAAAADwvw"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": " action"
					},
					"BwAAALU8AAAAAAAAtjwAAAAAAAAAAAAAtjwAAAAAAAC3PAAAAAAAAAAAAAC3PAAAAAAAALg8AAAAAAAAAAAAALg8AAAAAAAAuTwAAAAAAAAAAAAAuTwAAAAAAAC6PAAAAAAAAAAAAAC6PAAAAAAAALs8AAAAAAAAAAAAALs8AAAAAAAAvDwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALU8AAAAAAAAtTwAAAAAAAAAAAAAAADwvw"
				],
				[
					213,
					1,
					"insert",
					{
						"characters": " operads,"
					},
					"CQAAALw8AAAAAAAAvTwAAAAAAAAAAAAAvTwAAAAAAAC+PAAAAAAAAAAAAAC+PAAAAAAAAL88AAAAAAAAAAAAAL88AAAAAAAAwDwAAAAAAAAAAAAAwDwAAAAAAADBPAAAAAAAAAAAAADBPAAAAAAAAMI8AAAAAAAAAAAAAMI8AAAAAAAAwzwAAAAAAAAAAAAAwzwAAAAAAADEPAAAAAAAAAAAAADEPAAAAAAAAMU8AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALw8AAAAAAAAvDwAAAAAAAAAAAAAAADwvw"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": " t"
					},
					"AgAAAMU8AAAAAAAAxjwAAAAAAAAAAAAAxjwAAAAAAADHPAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMU8AAAAAAAAxTwAAAAAAAAAAAAAAADwvw"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": "he"
					},
					"AgAAAMc8AAAAAAAAyDwAAAAAAAAAAAAAyDwAAAAAAADJPAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMc8AAAAAAAAxzwAAAAAAAAAAAAAAADwvw"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": " intorud"
					},
					"CAAAAMk8AAAAAAAAyjwAAAAAAAAAAAAAyjwAAAAAAADLPAAAAAAAAAAAAADLPAAAAAAAAMw8AAAAAAAAAAAAAMw8AAAAAAAAzTwAAAAAAAAAAAAAzTwAAAAAAADOPAAAAAAAAAAAAADOPAAAAAAAAM88AAAAAAAAAAAAAM88AAAAAAAA0DwAAAAAAAAAAAAA0DwAAAAAAADRPAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMk8AAAAAAAAyTwAAAAAAAAAAAAAAADwvw"
				],
				[
					217,
					4,
					"left_delete",
					null,
					"BAAAANA8AAAAAAAA0DwAAAAAAAABAAAAZM88AAAAAAAAzzwAAAAAAAABAAAAdc48AAAAAAAAzjwAAAAAAAABAAAAcs08AAAAAAAAzTwAAAAAAAABAAAAbw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANE8AAAAAAAA0TwAAAAAAAAAAAAAAADwvw"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "roduction"
					},
					"CQAAAM08AAAAAAAAzjwAAAAAAAAAAAAAzjwAAAAAAADPPAAAAAAAAAAAAADPPAAAAAAAANA8AAAAAAAAAAAAANA8AAAAAAAA0TwAAAAAAAAAAAAA0TwAAAAAAADSPAAAAAAAAAAAAADSPAAAAAAAANM8AAAAAAAAAAAAANM8AAAAAAAA1DwAAAAAAAAAAAAA1DwAAAAAAADVPAAAAAAAAAAAAADVPAAAAAAAANY8AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM08AAAAAAAAzTwAAAAAAAAAAAAAAADwvw"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAANY8AAAAAAAA1zwAAAAAAAAAAAAA1zwAAAAAAADYPAAAAAAAAAAAAADYPAAAAAAAANk8AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANY8AAAAAAAA1jwAAAAAAAAAAAAAAADwvw"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": " action"
					},
					"BwAAANk8AAAAAAAA2jwAAAAAAAAAAAAA2jwAAAAAAADbPAAAAAAAAAAAAADbPAAAAAAAANw8AAAAAAAAAAAAANw8AAAAAAAA3TwAAAAAAAAAAAAA3TwAAAAAAADePAAAAAAAAAAAAADePAAAAAAAAN88AAAAAAAAAAAAAN88AAAAAAAA4DwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANk8AAAAAAAA2TwAAAAAAAAAAAAAAADwvw"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": " operads"
					},
					"CAAAAOA8AAAAAAAA4TwAAAAAAAAAAAAA4TwAAAAAAADiPAAAAAAAAAAAAADiPAAAAAAAAOM8AAAAAAAAAAAAAOM8AAAAAAAA5DwAAAAAAAAAAAAA5DwAAAAAAADlPAAAAAAAAAAAAADlPAAAAAAAAOY8AAAAAAAAAAAAAOY8AAAAAAAA5zwAAAAAAAAAAAAA5zwAAAAAAADoPAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOA8AAAAAAAA4DwAAAAAAAAAAAAAAADwvw"
				],
				[
					222,
					5,
					"delete_word",
					{
						"forward": false
					},
					"BQAAAOE8AAAAAAAA4TwAAAAAAAAHAAAAb3BlcmFkc9o8AAAAAAAA2jwAAAAAAAAHAAAAYWN0aW9uINc8AAAAAAAA1zwAAAAAAAADAAAAb2YgyjwAAAAAAADKPAAAAAAAAA0AAABpbnRyb2R1Y3Rpb24gxjwAAAAAAADGPAAAAAAAAAQAAAB0aGUg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOg8AAAAAAAA6DwAAAAAAAAAAAAAAADwvw"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": "as"
					},
					"AgAAAMY8AAAAAAAAxzwAAAAAAAAAAAAAxzwAAAAAAADIPAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMY8AAAAAAAAxjwAAAAAAAAAAAAAAADwvw"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": " well"
					},
					"BQAAAMg8AAAAAAAAyTwAAAAAAAAAAAAAyTwAAAAAAADKPAAAAAAAAAAAAADKPAAAAAAAAMs8AAAAAAAAAAAAAMs8AAAAAAAAzDwAAAAAAAAAAAAAzDwAAAAAAADNPAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMg8AAAAAAAAyDwAAAAAAAAAAAAAAADwvw"
				],
				[
					225,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAM08AAAAAAAAzjwAAAAAAAAAAAAAzjwAAAAAAADPPAAAAAAAAAAAAADPPAAAAAAAANA8AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM08AAAAAAAAzTwAAAAAAAAAAAAAAADwvw"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": " action"
					},
					"BwAAANA8AAAAAAAA0TwAAAAAAAAAAAAA0TwAAAAAAADSPAAAAAAAAAAAAADSPAAAAAAAANM8AAAAAAAAAAAAANM8AAAAAAAA1DwAAAAAAAAAAAAA1DwAAAAAAADVPAAAAAAAAAAAAADVPAAAAAAAANY8AAAAAAAAAAAAANY8AAAAAAAA1zwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANA8AAAAAAAA0DwAAAAAAAAAAAAAAADwvw"
				],
				[
					227,
					1,
					"insert",
					{
						"characters": " operad"
					},
					"BwAAANc8AAAAAAAA2DwAAAAAAAAAAAAA2DwAAAAAAADZPAAAAAAAAAAAAADZPAAAAAAAANo8AAAAAAAAAAAAANo8AAAAAAAA2zwAAAAAAAAAAAAA2zwAAAAAAADcPAAAAAAAAAAAAADcPAAAAAAAAN08AAAAAAAAAAAAAN08AAAAAAAA3jwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANc8AAAAAAAA1zwAAAAAAAAAAAAAAADwvw"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": " pams"
					},
					"BQAAAN48AAAAAAAA3zwAAAAAAAAAAAAA3zwAAAAAAADgPAAAAAAAAAAAAADgPAAAAAAAAOE8AAAAAAAAAAAAAOE8AAAAAAAA4jwAAAAAAAAAAAAA4jwAAAAAAADjPAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN48AAAAAAAA3jwAAAAAAAAAAAAAAADwvw"
				],
				[
					229,
					4,
					"left_delete",
					null,
					"BAAAAOI8AAAAAAAA4jwAAAAAAAABAAAAc+E8AAAAAAAA4TwAAAAAAAABAAAAbeA8AAAAAAAA4DwAAAAAAAABAAAAYd88AAAAAAAA3zwAAAAAAAABAAAAcA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOM8AAAAAAAA4zwAAAAAAAAAAAAAAADwvw"
				],
				[
					230,
					1,
					"insert",
					{
						"characters": "maps."
					},
					"BQAAAN88AAAAAAAA4DwAAAAAAAAAAAAA4DwAAAAAAADhPAAAAAAAAAAAAADhPAAAAAAAAOI8AAAAAAAAAAAAAOI8AAAAAAAA4zwAAAAAAAAAAAAA4zwAAAAAAADkPAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN88AAAAAAAA3zwAAAAAAAAAAAAAAADwvw"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": "maps"
					},
					"BQAAANE8AAAAAAAA0jwAAAAAAAAAAAAA0jwAAAAAAADSPAAAAAAAABMAAABhY3Rpb24gb3BlcmFkIG1hcHMu0jwAAAAAAADTPAAAAAAAAAAAAADTPAAAAAAAANQ8AAAAAAAAAAAAANQ8AAAAAAAA1TwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQ8AAAAAAAA0TwAAAAAAAAAAAAAAADwvw"
				],
				[
					234,
					1,
					"insert",
					{
						"characters": " between"
					},
					"CAAAANU8AAAAAAAA1jwAAAAAAAAAAAAA1jwAAAAAAADXPAAAAAAAAAAAAADXPAAAAAAAANg8AAAAAAAAAAAAANg8AAAAAAAA2TwAAAAAAAAAAAAA2TwAAAAAAADaPAAAAAAAAAAAAADaPAAAAAAAANs8AAAAAAAAAAAAANs8AAAAAAAA3DwAAAAAAAAAAAAA3DwAAAAAAADdPAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANU8AAAAAAAA1TwAAAAAAAAAAAAAAADwvw"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": " action"
					},
					"BwAAAN08AAAAAAAA3jwAAAAAAAAAAAAA3jwAAAAAAADfPAAAAAAAAAAAAADfPAAAAAAAAOA8AAAAAAAAAAAAAOA8AAAAAAAA4TwAAAAAAAAAAAAA4TwAAAAAAADiPAAAAAAAAAAAAADiPAAAAAAAAOM8AAAAAAAAAAAAAOM8AAAAAAAA5DwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN08AAAAAAAA3TwAAAAAAAAAAAAAAADwvw"
				],
				[
					236,
					1,
					"insert",
					{
						"characters": " operads."
					},
					"CQAAAOQ8AAAAAAAA5TwAAAAAAAAAAAAA5TwAAAAAAADmPAAAAAAAAAAAAADmPAAAAAAAAOc8AAAAAAAAAAAAAOc8AAAAAAAA6DwAAAAAAAAAAAAA6DwAAAAAAADpPAAAAAAAAAAAAADpPAAAAAAAAOo8AAAAAAAAAAAAAOo8AAAAAAAA6zwAAAAAAAAAAAAA6zwAAAAAAADsPAAAAAAAAAAAAADsPAAAAAAAAO08AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQ8AAAAAAAA5DwAAAAAAAAAAAAAAADwvw"
				],
				[
					239,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"CAAAAN06AAAAAAAA3zoAAAAAAAAAAAAAmzoAAAAAAACdOgAAAAAAAAAAAABvOgAAAAAAAHE6AAAAAAAAAAAAADQ6AAAAAAAANjoAAAAAAAAAAAAA3zkAAAAAAADhOQAAAAAAAAAAAAC+OQAAAAAAAMA5AAAAAAAAAAAAAKw5AAAAAAAArjkAAAAAAAAAAAAAjjkAAAAAAACQOQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOo6AAAAAAAAjDkAAAAAAAAAAAAAAADwvw"
				],
				[
					244,
					1,
					"left_delete",
					null,
					"AQAAALA7AAAAAAAAsDsAAAAAAAABAAAALg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALE7AAAAAAAAsTsAAAAAAAAAAAAAAADwvw"
				],
				[
					245,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALA7AAAAAAAAsTsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALA7AAAAAAAAsDsAAAAAAAAAAAAAAADwvw"
				],
				[
					246,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALE7AAAAAAAAsjsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALE7AAAAAAAAsTsAAAAAAAAAAAAAAADwvw"
				],
				[
					247,
					1,
					"insert",
					{
						"characters": "similar"
					},
					"BwAAALI7AAAAAAAAszsAAAAAAAAAAAAAszsAAAAAAAC0OwAAAAAAAAAAAAC0OwAAAAAAALU7AAAAAAAAAAAAALU7AAAAAAAAtjsAAAAAAAAAAAAAtjsAAAAAAAC3OwAAAAAAAAAAAAC3OwAAAAAAALg7AAAAAAAAAAAAALg7AAAAAAAAuTsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALI7AAAAAAAAsjsAAAAAAAAAAAAAAADwvw"
				],
				[
					248,
					1,
					"insert",
					{
						"characters": " structures"
					},
					"CwAAALk7AAAAAAAAujsAAAAAAAAAAAAAujsAAAAAAAC7OwAAAAAAAAAAAAC7OwAAAAAAALw7AAAAAAAAAAAAALw7AAAAAAAAvTsAAAAAAAAAAAAAvTsAAAAAAAC+OwAAAAAAAAAAAAC+OwAAAAAAAL87AAAAAAAAAAAAAL87AAAAAAAAwDsAAAAAAAAAAAAAwDsAAAAAAADBOwAAAAAAAAAAAADBOwAAAAAAAMI7AAAAAAAAAAAAAMI7AAAAAAAAwzsAAAAAAAAAAAAAwzsAAAAAAADEOwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALk7AAAAAAAAuTsAAAAAAAAAAAAAAADwvw"
				],
				[
					249,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAMQ7AAAAAAAAxTsAAAAAAAAAAAAAxTsAAAAAAADGOwAAAAAAAAAAAADGOwAAAAAAAMc7AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMQ7AAAAAAAAxDsAAAAAAAAAAAAAAADwvw"
				],
				[
					250,
					1,
					"insert",
					{
						"characters": " which"
					},
					"BgAAAMc7AAAAAAAAyDsAAAAAAAAAAAAAyDsAAAAAAADJOwAAAAAAAAAAAADJOwAAAAAAAMo7AAAAAAAAAAAAAMo7AAAAAAAAyzsAAAAAAAAAAAAAyzsAAAAAAADMOwAAAAAAAAAAAADMOwAAAAAAAM07AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMc7AAAAAAAAxzsAAAAAAAAAAAAAAADwvw"
				],
				[
					251,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM07AAAAAAAAzjsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM07AAAAAAAAzTsAAAAAAAAAAAAAAADwvw"
				],
				[
					252,
					6,
					"delete_word",
					{
						"forward": false
					},
					"BgAAAMg7AAAAAAAAyDsAAAAAAAAGAAAAd2hpY2ggxTsAAAAAAADFOwAAAAAAAAMAAABvZiC6OwAAAAAAALo7AAAAAAAACwAAAHN0cnVjdHVyZXMgsjsAAAAAAACyOwAAAAAAAAgAAABzaW1pbGFyILA7AAAAAAAAsDsAAAAAAAACAAAALCCqOwAAAAAAAKo7AAAAAAAABgAAAG9wZXJhZA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM47AAAAAAAAzjsAAAAAAAAAAAAAAADwvw"
				],
				[
					253,
					1,
					"insert",
					{
						"characters": "oip"
					},
					"AwAAAKo7AAAAAAAAqzsAAAAAAAAAAAAAqzsAAAAAAACsOwAAAAAAAAAAAACsOwAAAAAAAK07AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKo7AAAAAAAAqjsAAAAAAAAAAAAAAADwvw"
				],
				[
					254,
					2,
					"left_delete",
					null,
					"AgAAAKw7AAAAAAAArDsAAAAAAAABAAAAcKs7AAAAAAAAqzsAAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK07AAAAAAAArTsAAAAAAAAAAAAAAADwvw"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": "perad,"
					},
					"BgAAAKs7AAAAAAAArDsAAAAAAAAAAAAArDsAAAAAAACtOwAAAAAAAAAAAACtOwAAAAAAAK47AAAAAAAAAAAAAK47AAAAAAAArzsAAAAAAAAAAAAArzsAAAAAAACwOwAAAAAAAAAAAACwOwAAAAAAALE7AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKs7AAAAAAAAqzsAAAAAAAAAAAAAAADwvw"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALE7AAAAAAAAsjsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALE7AAAAAAAAsTsAAAAAAAAAAAAAAADwvw"
				],
				[
					257,
					2,
					"left_delete",
					null,
					"AgAAALE7AAAAAAAAsTsAAAAAAAABAAAAILA7AAAAAAAAsDsAAAAAAAABAAAALA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALI7AAAAAAAAsjsAAAAAAAAAAAAAAADwvw"
				],
				[
					258,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAALA7AAAAAAAAsTsAAAAAAAAAAAAAsTsAAAAAAACyOwAAAAAAAAAAAACyOwAAAAAAALM7AAAAAAAAAAAAALM7AAAAAAAAtDsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALA7AAAAAAAAsDsAAAAAAAAAAAAAAADwvw"
				],
				[
					259,
					1,
					"insert",
					{
						"characters": " we"
					},
					"AwAAALQ7AAAAAAAAtTsAAAAAAAAAAAAAtTsAAAAAAAC2OwAAAAAAAAAAAAC2OwAAAAAAALc7AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALQ7AAAAAAAAtDsAAAAAAAAAAAAAAADwvw"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": " remark"
					},
					"BwAAALc7AAAAAAAAuDsAAAAAAAAAAAAAuDsAAAAAAAC5OwAAAAAAAAAAAAC5OwAAAAAAALo7AAAAAAAAAAAAALo7AAAAAAAAuzsAAAAAAAAAAAAAuzsAAAAAAAC8OwAAAAAAAAAAAAC8OwAAAAAAAL07AAAAAAAAAAAAAL07AAAAAAAAvjsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALc7AAAAAAAAtzsAAAAAAAAAAAAAAADwvw"
				],
				[
					261,
					1,
					"insert",
					{
						"characters": " on"
					},
					"AwAAAL47AAAAAAAAvzsAAAAAAAAAAAAAvzsAAAAAAADAOwAAAAAAAAAAAADAOwAAAAAAAME7AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL47AAAAAAAAvjsAAAAAAAAAAAAAAADwvw"
				],
				[
					262,
					1,
					"insert",
					{
						"characters": " similar"
					},
					"CAAAAME7AAAAAAAAwjsAAAAAAAAAAAAAwjsAAAAAAADDOwAAAAAAAAAAAADDOwAAAAAAAMQ7AAAAAAAAAAAAAMQ7AAAAAAAAxTsAAAAAAAAAAAAAxTsAAAAAAADGOwAAAAAAAAAAAADGOwAAAAAAAMc7AAAAAAAAAAAAAMc7AAAAAAAAyDsAAAAAAAAAAAAAyDsAAAAAAADJOwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAME7AAAAAAAAwTsAAAAAAAAAAAAAAADwvw"
				],
				[
					263,
					1,
					"insert",
					{
						"characters": " structurs"
					},
					"CgAAAMk7AAAAAAAAyjsAAAAAAAAAAAAAyjsAAAAAAADLOwAAAAAAAAAAAADLOwAAAAAAAMw7AAAAAAAAAAAAAMw7AAAAAAAAzTsAAAAAAAAAAAAAzTsAAAAAAADOOwAAAAAAAAAAAADOOwAAAAAAAM87AAAAAAAAAAAAAM87AAAAAAAA0DsAAAAAAAAAAAAA0DsAAAAAAADROwAAAAAAAAAAAADROwAAAAAAANI7AAAAAAAAAAAAANI7AAAAAAAA0zsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMk7AAAAAAAAyTsAAAAAAAAAAAAAAADwvw"
				],
				[
					264,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANM7AAAAAAAA1DsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANM7AAAAAAAA0zsAAAAAAAAAAAAAAADwvw"
				],
				[
					265,
					2,
					"left_delete",
					null,
					"AgAAANM7AAAAAAAA0zsAAAAAAAABAAAAINI7AAAAAAAA0jsAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQ7AAAAAAAA1DsAAAAAAAAAAAAAAADwvw"
				],
				[
					266,
					1,
					"insert",
					{
						"characters": "es"
					},
					"AgAAANI7AAAAAAAA0zsAAAAAAAAAAAAA0zsAAAAAAADUOwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANI7AAAAAAAA0jsAAAAAAAAAAAAAAADwvw"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": " defined"
					},
					"CAAAANQ7AAAAAAAA1TsAAAAAAAAAAAAA1TsAAAAAAADWOwAAAAAAAAAAAADWOwAAAAAAANc7AAAAAAAAAAAAANc7AAAAAAAA2DsAAAAAAAAAAAAA2DsAAAAAAADZOwAAAAAAAAAAAADZOwAAAAAAANo7AAAAAAAAAAAAANo7AAAAAAAA2zsAAAAAAAAAAAAA2zsAAAAAAADcOwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQ7AAAAAAAA1DsAAAAAAAAAAAAAAADwvw"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAANw7AAAAAAAA3TsAAAAAAAAAAAAA3TsAAAAAAADeOwAAAAAAAAAAAADeOwAAAAAAAN87AAAAAAAAAAAAAN87AAAAAAAA4DsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANw7AAAAAAAA3DsAAAAAAAAAAAAAAADwvw"
				],
				[
					269,
					1,
					"insert",
					{
						"characters": " studied"
					},
					"CAAAAOA7AAAAAAAA4TsAAAAAAAAAAAAA4TsAAAAAAADiOwAAAAAAAAAAAADiOwAAAAAAAOM7AAAAAAAAAAAAAOM7AAAAAAAA5DsAAAAAAAAAAAAA5DsAAAAAAADlOwAAAAAAAAAAAADlOwAAAAAAAOY7AAAAAAAAAAAAAOY7AAAAAAAA5zsAAAAAAAAAAAAA5zsAAAAAAADoOwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOA7AAAAAAAA4DsAAAAAAAAAAAAAAADwvw"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": " by"
					},
					"AwAAAOg7AAAAAAAA6TsAAAAAAAAAAAAA6TsAAAAAAADqOwAAAAAAAAAAAADqOwAAAAAAAOs7AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOg7AAAAAAAA6DsAAAAAAAAAAAAAAADwvw"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": " others."
					},
					"CAAAAOs7AAAAAAAA7DsAAAAAAAAAAAAA7DsAAAAAAADtOwAAAAAAAAAAAADtOwAAAAAAAO47AAAAAAAAAAAAAO47AAAAAAAA7zsAAAAAAAAAAAAA7zsAAAAAAADwOwAAAAAAAAAAAADwOwAAAAAAAPE7AAAAAAAAAAAAAPE7AAAAAAAA8jsAAAAAAAAAAAAA8jsAAAAAAADzOwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOs7AAAAAAAA6zsAAAAAAAAAAAAAAADwvw"
				],
				[
					281,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPZNAAAAAAAA900AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPZNAAAAAAAA9k0AAAAAAAAAAAAAAADwvw"
				],
				[
					282,
					1,
					"insert",
					{
						"characters": " May-OP"
					},
					"BwAAAPdNAAAAAAAA+E0AAAAAAAAAAAAA+E0AAAAAAAD5TQAAAAAAAAAAAAD5TQAAAAAAAPpNAAAAAAAAAAAAAPpNAAAAAAAA+00AAAAAAAAAAAAA+00AAAAAAAD8TQAAAAAAAAAAAAD8TQAAAAAAAP1NAAAAAAAAAAAAAP1NAAAAAAAA/k0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPdNAAAAAAAA900AAAAAAAAAAAAAAADwvw"
				],
				[
					283,
					1,
					"left_delete",
					null,
					"AQAAAP1NAAAAAAAA/U0AAAAAAAABAAAAUA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP5NAAAAAAAA/k0AAAAAAAAAAAAAAADwvw"
				],
				[
					284,
					1,
					"insert",
					{
						"characters": "sorno"
					},
					"BQAAAP1NAAAAAAAA/k0AAAAAAAAAAAAA/k0AAAAAAAD/TQAAAAAAAAAAAAD/TQAAAAAAAABOAAAAAAAAAAAAAABOAAAAAAAAAU4AAAAAAAAAAAAAAU4AAAAAAAACTgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP1NAAAAAAAA/U0AAAAAAAAAAAAAAADwvw"
				],
				[
					288,
					1,
					"insert",
					{
						"characters": " \\cite"
					},
					"BgAAAAJOAAAAAAAAA04AAAAAAAAAAAAAA04AAAAAAAAETgAAAAAAAAAAAAAETgAAAAAAAAVOAAAAAAAAAAAAAAVOAAAAAAAABk4AAAAAAAAAAAAABk4AAAAAAAAHTgAAAAAAAAAAAAAHTgAAAAAAAAhOAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAJOAAAAAAAAAk4AAAAAAAAAAAAAAADwvw"
				],
				[
					289,
					1,
					"latex_fill_all",
					{
						"completion_type": "cite",
						"insert_char": "{"
					},
					"AgAAAAhOAAAAAAAACU4AAAAAAAAAAAAACU4AAAAAAAAKTgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAhOAAAAAAAACE4AAAAAAAAAAAAAAADwvw"
				],
				[
					292,
					8,
					"left_delete",
					null,
					"CAAAAAlOAAAAAAAACU4AAAAAAAABAAAAfQhOAAAAAAAACE4AAAAAAAABAAAAewdOAAAAAAAAB04AAAAAAAABAAAAZQZOAAAAAAAABk4AAAAAAAABAAAAdAVOAAAAAAAABU4AAAAAAAABAAAAaQROAAAAAAAABE4AAAAAAAABAAAAYwNOAAAAAAAAA04AAAAAAAABAAAAXAJOAAAAAAAAAk4AAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAApOAAAAAAAACk4AAAAAAAAAAAAAAADwvw"
				],
				[
					293,
					1,
					"insert",
					{
						"characters": " \\cite"
					},
					"BgAAAAJOAAAAAAAAA04AAAAAAAAAAAAAA04AAAAAAAAETgAAAAAAAAAAAAAETgAAAAAAAAVOAAAAAAAAAAAAAAVOAAAAAAAABk4AAAAAAAAAAAAABk4AAAAAAAAHTgAAAAAAAAAAAAAHTgAAAAAAAAhOAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAJOAAAAAAAAAk4AAAAAAAAAAAAAAADwvw"
				],
				[
					294,
					1,
					"latex_fill_all",
					{
						"completion_type": "cite",
						"insert_char": "{"
					},
					"AgAAAAhOAAAAAAAACU4AAAAAAAAAAAAACU4AAAAAAAAKTgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAhOAAAAAAAACE4AAAAAAAAAAAAAAADwvw"
				],
				[
					297,
					7,
					"left_delete",
					null,
					"BwAAAAlOAAAAAAAACU4AAAAAAAABAAAAfQhOAAAAAAAACE4AAAAAAAABAAAAewdOAAAAAAAAB04AAAAAAAABAAAAZQZOAAAAAAAABk4AAAAAAAABAAAAdAVOAAAAAAAABU4AAAAAAAABAAAAaQROAAAAAAAABE4AAAAAAAABAAAAYwNOAAAAAAAAA04AAAAAAAABAAAAXA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAApOAAAAAAAACk4AAAAAAAAAAAAAAADwvw"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": "\\ic"
					},
					"AwAAAANOAAAAAAAABE4AAAAAAAAAAAAABE4AAAAAAAAFTgAAAAAAAAAAAAAFTgAAAAAAAAZOAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAANOAAAAAAAAA04AAAAAAAAAAAAAAADwvw"
				],
				[
					299,
					2,
					"left_delete",
					null,
					"AgAAAAVOAAAAAAAABU4AAAAAAAABAAAAYwROAAAAAAAABE4AAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAZOAAAAAAAABk4AAAAAAAAAAAAAAADwvw"
				],
				[
					300,
					1,
					"insert",
					{
						"characters": "cite"
					},
					"BAAAAAROAAAAAAAABU4AAAAAAAAAAAAABU4AAAAAAAAGTgAAAAAAAAAAAAAGTgAAAAAAAAdOAAAAAAAAAAAAAAdOAAAAAAAACE4AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAROAAAAAAAABE4AAAAAAAAAAAAAAADwvw"
				],
				[
					301,
					1,
					"latex_fill_all",
					{
						"completion_type": "cite",
						"insert_char": "{"
					},
					"AgAAAAhOAAAAAAAACU4AAAAAAAAAAAAACU4AAAAAAAAKTgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAhOAAAAAAAACE4AAAAAAAAAAAAAAADwvw"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					308,
					1,
					"right_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					320,
					2,
					"left_delete",
					null,
					"AgAAAAlOAAAAAAAACU4AAAAAAAABAAAAfQhOAAAAAAAACE4AAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAApOAAAAAAAACk4AAAAAAAAAAAAAAADwvw"
				],
				[
					321,
					1,
					"latex_fill_all",
					{
						"completion_type": "cite",
						"insert_char": "{"
					},
					"AgAAAAhOAAAAAAAACU4AAAAAAAAAAAAACU4AAAAAAAAKTgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAhOAAAAAAAACE4AAAAAAAAAAAAAAADwvw"
				],
				[
					324,
					1,
					"left_delete",
					null,
					"AQAAAAJOAAAAAAAAAk4AAAAAAAAIAAAAIFxjaXRle30",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAApOAAAAAAAAAk4AAAAAAAAAAAAAAADwvw"
				],
				[
					325,
					1,
					"insert",
					{
						"characters": " \\cite"
					},
					"BgAAAAJOAAAAAAAAA04AAAAAAAAAAAAAA04AAAAAAAAETgAAAAAAAAAAAAAETgAAAAAAAAVOAAAAAAAAAAAAAAVOAAAAAAAABk4AAAAAAAAAAAAABk4AAAAAAAAHTgAAAAAAAAAAAAAHTgAAAAAAAAhOAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAJOAAAAAAAAAk4AAAAAAAAAAAAAAADwvw"
				],
				[
					326,
					1,
					"latex_fill_all",
					{
						"completion_type": "cite",
						"insert_char": "{"
					},
					"AgAAAAhOAAAAAAAACU4AAAAAAAAAAAAACU4AAAAAAAAKTgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAhOAAAAAAAACE4AAAAAAAAAAAAAAADwvw"
				],
				[
					327,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAAhOAAAAAAAACE4AAAAAAAABAAAAewhOAAAAAAAACE4AAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAlOAAAAAAAACU4AAAAAAAAAAAAAAADwvw"
				],
				[
					328,
					6,
					"left_delete",
					null,
					"BgAAAAdOAAAAAAAAB04AAAAAAAABAAAAZQZOAAAAAAAABk4AAAAAAAABAAAAdAVOAAAAAAAABU4AAAAAAAABAAAAaQROAAAAAAAABE4AAAAAAAABAAAAYwNOAAAAAAAAA04AAAAAAAABAAAAXAJOAAAAAAAAAk4AAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAhOAAAAAAAACE4AAAAAAAAAAAAAAADwvw"
				],
				[
					335,
					1,
					"insert",
					{
						"characters": " \\cite"
					},
					"BgAAAAJOAAAAAAAAA04AAAAAAAAAAAAAA04AAAAAAAAETgAAAAAAAAAAAAAETgAAAAAAAAVOAAAAAAAAAAAAAAVOAAAAAAAABk4AAAAAAAAAAAAABk4AAAAAAAAHTgAAAAAAAAAAAAAHTgAAAAAAAAhOAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAJOAAAAAAAAAk4AAAAAAAAAAAAAAADwvw"
				],
				[
					336,
					1,
					"latex_fill_all",
					{
						"completion_type": "cite",
						"insert_char": "{"
					},
					"AgAAAAhOAAAAAAAACU4AAAAAAAAAAAAACU4AAAAAAAAKTgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAhOAAAAAAAACE4AAAAAAAAAAAAAAADwvw"
				],
				[
					337,
					1,
					"right_delete",
					null,
					"AQAAAAlOAAAAAAAACU4AAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAlOAAAAAAAACU4AAAAAAAAAAAAAAADwvw"
				],
				[
					338,
					7,
					"left_delete",
					null,
					"BwAAAAhOAAAAAAAACE4AAAAAAAABAAAAewdOAAAAAAAAB04AAAAAAAABAAAAZQZOAAAAAAAABk4AAAAAAAABAAAAdAVOAAAAAAAABU4AAAAAAAABAAAAaQROAAAAAAAABE4AAAAAAAABAAAAYwNOAAAAAAAAA04AAAAAAAABAAAAXAJOAAAAAAAAAk4AAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAlOAAAAAAAACU4AAAAAAAAAAAAAAADwvw"
				],
				[
					341,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					343,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAFQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					346,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAA0AAAAAAAAADQAAAAAAAAAEAAAAbWFpbg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEAAAAAAAAAEQAAAAAAAAAAAAAAAADwvw"
				],
				[
					347,
					1,
					"insert",
					{
						"characters": "operads_paper"
					},
					"DQAAAA0AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABMAAAAAAAAAAAAAABMAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABkAAAAAAAAAAAAAABkAAAAAAAAAGgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0AAAAAAAAADQAAAAAAAAAAAAAAAADwvw"
				],
				[
					355,
					1,
					"insert",
					{
						"characters": " \\cite"
					},
					"BgAAALwJAAAAAAAAvQkAAAAAAAAAAAAAvQkAAAAAAAC+CQAAAAAAAAAAAAC+CQAAAAAAAL8JAAAAAAAAAAAAAL8JAAAAAAAAwAkAAAAAAAAAAAAAwAkAAAAAAADBCQAAAAAAAAAAAADBCQAAAAAAAMIJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwJAAAAAAAAvAkAAAAAAAAAAAAAAADwvw"
				],
				[
					356,
					1,
					"latex_fill_all",
					{
						"completion_type": "cite",
						"insert_char": "{"
					},
					"AgAAAMIJAAAAAAAAwwkAAAAAAAAAAAAAwwkAAAAAAADECQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMIJAAAAAAAAwgkAAAAAAAAAAAAAAADwvw"
				],
				[
					357,
					1,
					"right_delete",
					null,
					"AQAAAMMJAAAAAAAAwwkAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMJAAAAAAAAwwkAAAAAAAAAAAAAAADwvw"
				],
				[
					358,
					7,
					"left_delete",
					null,
					"BwAAAMIJAAAAAAAAwgkAAAAAAAABAAAAe8EJAAAAAAAAwQkAAAAAAAABAAAAZcAJAAAAAAAAwAkAAAAAAAABAAAAdL8JAAAAAAAAvwkAAAAAAAABAAAAab4JAAAAAAAAvgkAAAAAAAABAAAAY70JAAAAAAAAvQkAAAAAAAABAAAAXLwJAAAAAAAAvAkAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMJAAAAAAAAwwkAAAAAAAAAAAAAAADwvw"
				],
				[
					363,
					1,
					"insert",
					{
						"characters": " \\c"
					},
					"AwAAALwJAAAAAAAAvQkAAAAAAAAAAAAAvQkAAAAAAAC+CQAAAAAAAAAAAAC+CQAAAAAAAL8JAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwJAAAAAAAAvAkAAAAAAAAAAAAAAADwvw"
				],
				[
					364,
					1,
					"insert",
					{
						"characters": "ite"
					},
					"AwAAAL8JAAAAAAAAwAkAAAAAAAAAAAAAwAkAAAAAAADBCQAAAAAAAAAAAADBCQAAAAAAAMIJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL8JAAAAAAAAvwkAAAAAAAAAAAAAAADwvw"
				],
				[
					365,
					1,
					"latex_fill_all",
					{
						"completion_type": "cite",
						"insert_char": "{"
					},
					"AgAAAMIJAAAAAAAAwwkAAAAAAAAAAAAAwwkAAAAAAADECQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMIJAAAAAAAAwgkAAAAAAAAAAAAAAADwvw"
				],
				[
					366,
					1,
					"right_delete",
					null,
					"AQAAAMMJAAAAAAAAwwkAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMJAAAAAAAAwwkAAAAAAAAAAAAAAADwvw"
				],
				[
					367,
					7,
					"left_delete",
					null,
					"BwAAAMIJAAAAAAAAwgkAAAAAAAABAAAAe8EJAAAAAAAAwQkAAAAAAAABAAAAZcAJAAAAAAAAwAkAAAAAAAABAAAAdL8JAAAAAAAAvwkAAAAAAAABAAAAab4JAAAAAAAAvgkAAAAAAAABAAAAY70JAAAAAAAAvQkAAAAAAAABAAAAXLwJAAAAAAAAvAkAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMJAAAAAAAAwwkAAAAAAAAAAAAAAADwvw"
				],
				[
					370,
					1,
					"paste",
					null,
					"AQAAAA0AAAAAAAAAXwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0AAAAAAAAADQAAAAAAAAAAAAAAAADwvw"
				],
				[
					371,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAAF8AAAAAAAAAYAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8AAAAAAAAAXwAAAAAAAAAAAAAAAADwvw"
				],
				[
					380,
					1,
					"",
					null,
					"AQAAAA8AAAAAAAAAEAAAAAAAAAABAAAAXA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8AAAAAAAAAEAAAAAAAAAAAAAAAAADwvw"
				],
				[
					381,
					1,
					"",
					null,
					"AQAAABUAAAAAAAAAFgAAAAAAAAABAAAAXA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUAAAAAAAAAFgAAAAAAAAAAAAAAAADwvw"
				],
				[
					382,
					1,
					"",
					null,
					"AQAAABoAAAAAAAAAGwAAAAAAAAABAAAAXA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoAAAAAAAAAGwAAAAAAAAAAAAAAAADwvw"
				],
				[
					383,
					1,
					"",
					null,
					"AQAAAEEAAAAAAAAAQgAAAAAAAAABAAAAXA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEAAAAAAAAAQgAAAAAAAAAAAAAAAADwvw"
				],
				[
					384,
					1,
					"",
					null,
					"AQAAAEoAAAAAAAAASwAAAAAAAAABAAAAXA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoAAAAAAAAASwAAAAAAAAAAAAAAAADwvw"
				],
				[
					385,
					1,
					"",
					null,
					"AQAAAFkAAAAAAAAAWgAAAAAAAAABAAAAXA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkAAAAAAAAAWgAAAAAAAAAAAAAAAADwvw"
				],
				[
					386,
					1,
					"",
					null,
					"AQAAAF8AAAAAAAAAYAAAAAAAAAABAAAAXA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8AAAAAAAAAYAAAAAAAAAAAAAAAAADwvw"
				],
				[
					391,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAAHEAAAAAAAAAcgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEAAAAAAAAAcQAAAAAAAAAAAAAAAADwvw"
				],
				[
					394,
					1,
					"left_delete",
					null,
					"AQAAAHEAAAAAAAAAcQAAAAAAAAABAAAAXA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIAAAAAAAAAcgAAAAAAAAAAAAAAAADwvw"
				],
				[
					395,
					1,
					"insert",
					{
						"characters": "\n\\cite"
					},
					"BgAAAHEAAAAAAAAAcgAAAAAAAAAAAAAAcgAAAAAAAABzAAAAAAAAAAAAAABzAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAdQAAAAAAAAAAAAAAdQAAAAAAAAB2AAAAAAAAAAAAAAB2AAAAAAAAAHcAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEAAAAAAAAAcQAAAAAAAAAAAAAAAADwvw"
				],
				[
					397,
					1,
					"latex_tools_fill_all_complete_bracket",
					{
						"insert_char": "{",
						"remove_regions":
						[
						]
					},
					"AgAAAHcAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB5AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcAAAAAAAAAdwAAAAAAAAAAAAAAAADwvw"
				],
				[
					400,
					2,
					"left_delete",
					null,
					"AgAAAHIAAAAAAAAAcgAAAAAAAAAHAAAAXGNpdGV7fXEAAAAAAAAAcQAAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHkAAAAAAAAAcgAAAAAAAAAAAAAAAADwvw"
				],
				[
					403,
					1,
					"insert",
					{
						"characters": ".."
					},
					"AwAAAA0AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAOAAAAAAAAAFIAAABDOi9Vc2Vycy9BbGV4L09uZURyaXZlIC0gU2hlZmZpZWxkIEhhbGxhbSBVbml2ZXJzaXR5L1Jlc2VhcmNoL2FjdGlvbl9vcGVyYWRzL3BhcGVyDgAAAAAAAAAPAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0AAAAAAAAAXwAAAAAAAAAAAAAAAADwvw"
				],
				[
					408,
					1,
					"insert",
					{
						"characters": "\n\\cite"
					},
					"BgAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACcAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACEAAAAAAAAAIQAAAAAAAAAAAAAAAADwvw"
				],
				[
					410,
					1,
					"latex_tools_fill_all_complete_bracket",
					{
						"insert_char": "{",
						"remove_regions":
						[
						]
					},
					"AgAAACcAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAApAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACcAAAAAAAAAJwAAAAAAAAAAAAAAAADwvw"
				],
				[
					413,
					2,
					"left_delete",
					null,
					"AgAAACIAAAAAAAAAIgAAAAAAAAAHAAAAXGNpdGV7fSEAAAAAAAAAIQAAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACkAAAAAAAAAIgAAAAAAAAAAAAAAAADwvw"
				],
				[
					427,
					1,
					"insert",
					{
						"characters": " \\cite"
					},
					"BgAAACROAAAAAAAAJU4AAAAAAAAAAAAAJU4AAAAAAAAmTgAAAAAAAAAAAAAmTgAAAAAAACdOAAAAAAAAAAAAACdOAAAAAAAAKE4AAAAAAAAAAAAAKE4AAAAAAAApTgAAAAAAAAAAAAApTgAAAAAAACpOAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACROAAAAAAAAJE4AAAAAAAAAAAAAAADwvw"
				],
				[
					429,
					1,
					"latex_tools_replace_word",
					{
						"insert_char": "{",
						"remove_regions":
						[
						],
						"replacement": "guillou_symmetric"
					},
					"AgAAACpOAAAAAAAAPE4AAAAAAAAAAAAAPE4AAAAAAAA9TgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACpOAAAAAAAAKk4AAAAAAAAAAAAAAADwvw"
				],
				[
					431,
					1,
					"insert",
					{
						"characters": " \\cite"
					},
					"BgAAAD1OAAAAAAAAPk4AAAAAAAAAAAAAPk4AAAAAAAA/TgAAAAAAAAAAAAA/TgAAAAAAAEBOAAAAAAAAAAAAAEBOAAAAAAAAQU4AAAAAAAAAAAAAQU4AAAAAAABCTgAAAAAAAAAAAABCTgAAAAAAAENOAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD1OAAAAAAAAPU4AAAAAAAAAAAAAAADwvw"
				],
				[
					433,
					1,
					"latex_tools_replace_word",
					{
						"insert_char": "{",
						"remove_regions":
						[
						],
						"replacement": "guillou_multiplicative"
					},
					"AgAAAENOAAAAAAAAWk4AAAAAAAAAAAAAWk4AAAAAAABbTgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAENOAAAAAAAAQ04AAAAAAAAAAAAAAADwvw"
				],
				[
					436,
					1,
					"insert",
					{
						"characters": " \\cite"
					},
					"BgAAAFtOAAAAAAAAXE4AAAAAAAAAAAAAXE4AAAAAAABdTgAAAAAAAAAAAABdTgAAAAAAAF5OAAAAAAAAAAAAAF5OAAAAAAAAX04AAAAAAAAAAAAAX04AAAAAAABgTgAAAAAAAAAAAABgTgAAAAAAAGFOAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFtOAAAAAAAAW04AAAAAAAAAAAAAAADwvw"
				],
				[
					438,
					1,
					"latex_tools_replace_word",
					{
						"insert_char": "{",
						"remove_regions":
						[
						],
						"replacement": "yau_infinity_2021"
					},
					"AgAAAGFOAAAAAAAAc04AAAAAAAAAAAAAc04AAAAAAAB0TgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGFOAAAAAAAAYU4AAAAAAAAAAAAAAADwvw"
				],
				[
					445,
					1,
					"insert",
					{
						"characters": "\nHer"
					},
					"BAAAACdpAAAAAAAAKGkAAAAAAAAAAAAAKGkAAAAAAAApaQAAAAAAAAAAAAApaQAAAAAAACppAAAAAAAAAAAAACppAAAAAAAAK2kAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACdpAAAAAAAAJ2kAAAAAAAAAAAAAAADwvw"
				],
				[
					446,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAACtpAAAAAAAALGkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACtpAAAAAAAAK2kAAAAAAAAAAAAAAADwvw"
				],
				[
					447,
					1,
					"insert",
					{
						"characters": " we"
					},
					"AwAAACxpAAAAAAAALWkAAAAAAAAAAAAALWkAAAAAAAAuaQAAAAAAAAAAAAAuaQAAAAAAAC9pAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACxpAAAAAAAALGkAAAAAAAAAAAAAAADwvw"
				],
				[
					448,
					1,
					"insert",
					{
						"characters": " begin"
					},
					"BgAAAC9pAAAAAAAAMGkAAAAAAAAAAAAAMGkAAAAAAAAxaQAAAAAAAAAAAAAxaQAAAAAAADJpAAAAAAAAAAAAADJpAAAAAAAAM2kAAAAAAAAAAAAAM2kAAAAAAAA0aQAAAAAAAAAAAAA0aQAAAAAAADVpAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC9pAAAAAAAAL2kAAAAAAAAAAAAAAADwvw"
				],
				[
					449,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAADVpAAAAAAAANmkAAAAAAAAAAAAANmkAAAAAAAA3aQAAAAAAAAAAAAA3aQAAAAAAADhpAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADVpAAAAAAAANWkAAAAAAAAAAAAAAADwvw"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": " investigate"
					},
					"DAAAADhpAAAAAAAAOWkAAAAAAAAAAAAAOWkAAAAAAAA6aQAAAAAAAAAAAAA6aQAAAAAAADtpAAAAAAAAAAAAADtpAAAAAAAAPGkAAAAAAAAAAAAAPGkAAAAAAAA9aQAAAAAAAAAAAAA9aQAAAAAAAD5pAAAAAAAAAAAAAD5pAAAAAAAAP2kAAAAAAAAAAAAAP2kAAAAAAABAaQAAAAAAAAAAAABAaQAAAAAAAEFpAAAAAAAAAAAAAEFpAAAAAAAAQmkAAAAAAAAAAAAAQmkAAAAAAABDaQAAAAAAAAAAAABDaQAAAAAAAERpAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADhpAAAAAAAAOGkAAAAAAAAAAAAAAADwvw"
				],
				[
					451,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAERpAAAAAAAARWkAAAAAAAAAAAAARWkAAAAAAABGaQAAAAAAAAAAAABGaQAAAAAAAEdpAAAAAAAAAAAAAEdpAAAAAAAASGkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAERpAAAAAAAARGkAAAAAAAAAAAAAAADwvw"
				],
				[
					452,
					1,
					"insert",
					{
						"characters": " la"
					},
					"AwAAAEhpAAAAAAAASWkAAAAAAAAAAAAASWkAAAAAAABKaQAAAAAAAAAAAABKaQAAAAAAAEtpAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEhpAAAAAAAASGkAAAAAAAAAAAAAAADwvw"
				],
				[
					453,
					2,
					"left_delete",
					null,
					"AgAAAEppAAAAAAAASmkAAAAAAAABAAAAYUlpAAAAAAAASWkAAAAAAAABAAAAbA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEtpAAAAAAAAS2kAAAAAAAAAAAAAAADwvw"
				],
				[
					454,
					1,
					"insert",
					{
						"characters": "algebra"
					},
					"BwAAAElpAAAAAAAASmkAAAAAAAAAAAAASmkAAAAAAABLaQAAAAAAAAAAAABLaQAAAAAAAExpAAAAAAAAAAAAAExpAAAAAAAATWkAAAAAAAAAAAAATWkAAAAAAABOaQAAAAAAAAAAAABOaQAAAAAAAE9pAAAAAAAAAAAAAE9pAAAAAAAAUGkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAElpAAAAAAAASWkAAAAAAAAAAAAAAADwvw"
				],
				[
					455,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAFBpAAAAAAAAUWkAAAAAAAAAAAAAUWkAAAAAAABSaQAAAAAAAAAAAABSaQAAAAAAAFNpAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFBpAAAAAAAAUGkAAAAAAAAAAAAAAADwvw"
				],
				[
					456,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFNpAAAAAAAAVGkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFNpAAAAAAAAU2kAAAAAAAAAAAAAAADwvw"
				],
				[
					457,
					1,
					"insert",
					{
						"characters": "action"
					},
					"BgAAAFRpAAAAAAAAVWkAAAAAAAAAAAAAVWkAAAAAAABWaQAAAAAAAAAAAABWaQAAAAAAAFdpAAAAAAAAAAAAAFdpAAAAAAAAWGkAAAAAAAAAAAAAWGkAAAAAAABZaQAAAAAAAAAAAABZaQAAAAAAAFppAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFRpAAAAAAAAVGkAAAAAAAAAAAAAAADwvw"
				],
				[
					458,
					1,
					"insert",
					{
						"characters": " operads"
					},
					"CAAAAFppAAAAAAAAW2kAAAAAAAAAAAAAW2kAAAAAAABcaQAAAAAAAAAAAABcaQAAAAAAAF1pAAAAAAAAAAAAAF1pAAAAAAAAXmkAAAAAAAAAAAAAXmkAAAAAAABfaQAAAAAAAAAAAABfaQAAAAAAAGBpAAAAAAAAAAAAAGBpAAAAAAAAYWkAAAAAAAAAAAAAYWkAAAAAAABiaQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFppAAAAAAAAWmkAAAAAAAAAAAAAAADwvw"
				],
				[
					459,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAFtpAAAAAAAAW2kAAAAAAAAHAAAAb3BlcmFkc1RpAAAAAAAAVGkAAAAAAAAHAAAAYWN0aW9uIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGJpAAAAAAAAYmkAAAAAAAAAAAAAAADwvw"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": "action"
					},
					"BgAAAFRpAAAAAAAAVWkAAAAAAAAAAAAAVWkAAAAAAABWaQAAAAAAAAAAAABWaQAAAAAAAFdpAAAAAAAAAAAAAFdpAAAAAAAAWGkAAAAAAAAAAAAAWGkAAAAAAABZaQAAAAAAAAAAAABZaQAAAAAAAFppAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFRpAAAAAAAAVGkAAAAAAAAAAAAAAADwvw"
				],
				[
					461,
					1,
					"insert",
					{
						"characters": " operads"
					},
					"CAAAAFppAAAAAAAAW2kAAAAAAAAAAAAAW2kAAAAAAABcaQAAAAAAAAAAAABcaQAAAAAAAF1pAAAAAAAAAAAAAF1pAAAAAAAAXmkAAAAAAAAAAAAAXmkAAAAAAABfaQAAAAAAAAAAAABfaQAAAAAAAGBpAAAAAAAAAAAAAGBpAAAAAAAAYWkAAAAAAAAAAAAAYWkAAAAAAABiaQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFppAAAAAAAAWmkAAAAAAAAAAAAAAADwvw"
				],
				[
					462,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGJpAAAAAAAAY2kAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGJpAAAAAAAAYmkAAAAAAAAAAAAAAADwvw"
				],
				[
					463,
					1,
					"insert",
					{
						"characters": " including"
					},
					"CgAAAGNpAAAAAAAAZGkAAAAAAAAAAAAAZGkAAAAAAABlaQAAAAAAAAAAAABlaQAAAAAAAGZpAAAAAAAAAAAAAGZpAAAAAAAAZ2kAAAAAAAAAAAAAZ2kAAAAAAABoaQAAAAAAAAAAAABoaQAAAAAAAGlpAAAAAAAAAAAAAGlpAAAAAAAAamkAAAAAAAAAAAAAamkAAAAAAABraQAAAAAAAAAAAABraQAAAAAAAGxpAAAAAAAAAAAAAGxpAAAAAAAAbWkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGNpAAAAAAAAY2kAAAAAAAAAAAAAAADwvw"
				],
				[
					464,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAG1pAAAAAAAAbmkAAAAAAAAAAAAAbmkAAAAAAABvaQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG1pAAAAAAAAbWkAAAAAAAAAAAAAAADwvw"
				],
				[
					465,
					1,
					"insert",
					{
						"characters": " dic"
					},
					"BAAAAG9pAAAAAAAAcGkAAAAAAAAAAAAAcGkAAAAAAABxaQAAAAAAAAAAAABxaQAAAAAAAHJpAAAAAAAAAAAAAHJpAAAAAAAAc2kAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG9pAAAAAAAAb2kAAAAAAAAAAAAAAADwvw"
				],
				[
					466,
					1,
					"left_delete",
					null,
					"AQAAAHJpAAAAAAAAcmkAAAAAAAABAAAAYw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHNpAAAAAAAAc2kAAAAAAAAAAAAAAADwvw"
				],
				[
					467,
					1,
					"insert",
					{
						"characters": "scisuss"
					},
					"BwAAAHJpAAAAAAAAc2kAAAAAAAAAAAAAc2kAAAAAAAB0aQAAAAAAAAAAAAB0aQAAAAAAAHVpAAAAAAAAAAAAAHVpAAAAAAAAdmkAAAAAAAAAAAAAdmkAAAAAAAB3aQAAAAAAAAAAAAB3aQAAAAAAAHhpAAAAAAAAAAAAAHhpAAAAAAAAeWkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHJpAAAAAAAAcmkAAAAAAAAAAAAAAADwvw"
				],
				[
					468,
					5,
					"left_delete",
					null,
					"BQAAAHhpAAAAAAAAeGkAAAAAAAABAAAAc3dpAAAAAAAAd2kAAAAAAAABAAAAc3ZpAAAAAAAAdmkAAAAAAAABAAAAdXVpAAAAAAAAdWkAAAAAAAABAAAAc3RpAAAAAAAAdGkAAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHlpAAAAAAAAeWkAAAAAAAAAAAAAAADwvw"
				],
				[
					469,
					1,
					"insert",
					{
						"characters": "ussion"
					},
					"BgAAAHRpAAAAAAAAdWkAAAAAAAAAAAAAdWkAAAAAAAB2aQAAAAAAAAAAAAB2aQAAAAAAAHdpAAAAAAAAAAAAAHdpAAAAAAAAeGkAAAAAAAAAAAAAeGkAAAAAAAB5aQAAAAAAAAAAAAB5aQAAAAAAAHppAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHRpAAAAAAAAdGkAAAAAAAAAAAAAAADwvw"
				],
				[
					470,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAHppAAAAAAAAe2kAAAAAAAAAAAAAe2kAAAAAAAB8aQAAAAAAAAAAAAB8aQAAAAAAAH1pAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHppAAAAAAAAemkAAAAAAAAAAAAAAADwvw"
				],
				[
					471,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAH1pAAAAAAAAfmkAAAAAAAAAAAAAfmkAAAAAAAB/aQAAAAAAAAAAAAB/aQAAAAAAAIBpAAAAAAAAAAAAAIBpAAAAAAAAgWkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH1pAAAAAAAAfWkAAAAAAAAAAAAAAADwvw"
				],
				[
					472,
					1,
					"insert",
					{
						"characters": " group-like"
					},
					"CwAAAIFpAAAAAAAAgmkAAAAAAAAAAAAAgmkAAAAAAACDaQAAAAAAAAAAAACDaQAAAAAAAIRpAAAAAAAAAAAAAIRpAAAAAAAAhWkAAAAAAAAAAAAAhWkAAAAAAACGaQAAAAAAAAAAAACGaQAAAAAAAIdpAAAAAAAAAAAAAIdpAAAAAAAAiGkAAAAAAAAAAAAAiGkAAAAAAACJaQAAAAAAAAAAAACJaQAAAAAAAIppAAAAAAAAAAAAAIppAAAAAAAAi2kAAAAAAAAAAAAAi2kAAAAAAACMaQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIFpAAAAAAAAgWkAAAAAAAAAAAAAAADwvw"
				],
				[
					473,
					1,
					"insert",
					{
						"characters": " properties"
					},
					"CwAAAIxpAAAAAAAAjWkAAAAAAAAAAAAAjWkAAAAAAACOaQAAAAAAAAAAAACOaQAAAAAAAI9pAAAAAAAAAAAAAI9pAAAAAAAAkGkAAAAAAAAAAAAAkGkAAAAAAACRaQAAAAAAAAAAAACRaQAAAAAAAJJpAAAAAAAAAAAAAJJpAAAAAAAAk2kAAAAAAAAAAAAAk2kAAAAAAACUaQAAAAAAAAAAAACUaQAAAAAAAJVpAAAAAAAAAAAAAJVpAAAAAAAAlmkAAAAAAAAAAAAAlmkAAAAAAACXaQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIxpAAAAAAAAjGkAAAAAAAAAAAAAAADwvw"
				],
				[
					474,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAJdpAAAAAAAAmGkAAAAAAAAAAAAAmGkAAAAAAACZaQAAAAAAAAAAAACZaQAAAAAAAJppAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJdpAAAAAAAAl2kAAAAAAAAAAAAAAADwvw"
				],
				[
					475,
					1,
					"insert",
					{
						"characters": " action"
					},
					"BwAAAJppAAAAAAAAm2kAAAAAAAAAAAAAm2kAAAAAAACcaQAAAAAAAAAAAACcaQAAAAAAAJ1pAAAAAAAAAAAAAJ1pAAAAAAAAnmkAAAAAAAAAAAAAnmkAAAAAAACfaQAAAAAAAAAAAACfaQAAAAAAAKBpAAAAAAAAAAAAAKBpAAAAAAAAoWkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJppAAAAAAAAmmkAAAAAAAAAAAAAAADwvw"
				],
				[
					476,
					1,
					"insert",
					{
						"characters": " operads"
					},
					"CAAAAKFpAAAAAAAAomkAAAAAAAAAAAAAomkAAAAAAACjaQAAAAAAAAAAAACjaQAAAAAAAKRpAAAAAAAAAAAAAKRpAAAAAAAApWkAAAAAAAAAAAAApWkAAAAAAACmaQAAAAAAAAAAAACmaQAAAAAAAKdpAAAAAAAAAAAAAKdpAAAAAAAAqGkAAAAAAAAAAAAAqGkAAAAAAACpaQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKFpAAAAAAAAoWkAAAAAAAAAAAAAAADwvw"
				],
				[
					477,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAAKlpAAAAAAAAqmkAAAAAAAAAAAAAqmkAAAAAAACraQAAAAAAAAAAAACraQAAAAAAAKxpAAAAAAAAAAAAAKxpAAAAAAAArWkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKlpAAAAAAAAqWkAAAAAAAAAAAAAAADwvw"
				],
				[
					478,
					1,
					"insert",
					{
						"characters": " their"
					},
					"BgAAAK1pAAAAAAAArmkAAAAAAAAAAAAArmkAAAAAAACvaQAAAAAAAAAAAACvaQAAAAAAALBpAAAAAAAAAAAAALBpAAAAAAAAsWkAAAAAAAAAAAAAsWkAAAAAAACyaQAAAAAAAAAAAACyaQAAAAAAALNpAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK1pAAAAAAAArWkAAAAAAAAAAAAAAADwvw"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": " maps."
					},
					"BgAAALNpAAAAAAAAtGkAAAAAAAAAAAAAtGkAAAAAAAC1aQAAAAAAAAAAAAC1aQAAAAAAALZpAAAAAAAAAAAAALZpAAAAAAAAt2kAAAAAAAAAAAAAt2kAAAAAAAC4aQAAAAAAAAAAAAC4aQAAAAAAALlpAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALNpAAAAAAAAs2kAAAAAAAAAAAAAAADwvw"
				],
				[
					480,
					1,
					"insert",
					{
						"characters": " E"
					},
					"AgAAALlpAAAAAAAAumkAAAAAAAAAAAAAumkAAAAAAAC7aQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALlpAAAAAAAAuWkAAAAAAAAAAAAAAADwvw"
				],
				[
					481,
					1,
					"left_delete",
					null,
					"AQAAALppAAAAAAAAumkAAAAAAAABAAAARQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALtpAAAAAAAAu2kAAAAAAAAAAAAAAADwvw"
				],
				[
					482,
					1,
					"insert",
					{
						"characters": "For"
					},
					"AwAAALppAAAAAAAAu2kAAAAAAAAAAAAAu2kAAAAAAAC8aQAAAAAAAAAAAAC8aQAAAAAAAL1pAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALppAAAAAAAAumkAAAAAAAAAAAAAAADwvw"
				],
				[
					483,
					1,
					"insert",
					{
						"characters": " example,"
					},
					"CQAAAL1pAAAAAAAAvmkAAAAAAAAAAAAAvmkAAAAAAAC/aQAAAAAAAAAAAAC/aQAAAAAAAMBpAAAAAAAAAAAAAMBpAAAAAAAAwWkAAAAAAAAAAAAAwWkAAAAAAADCaQAAAAAAAAAAAADCaQAAAAAAAMNpAAAAAAAAAAAAAMNpAAAAAAAAxGkAAAAAAAAAAAAAxGkAAAAAAADFaQAAAAAAAAAAAADFaQAAAAAAAMZpAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL1pAAAAAAAAvWkAAAAAAAAAAAAAAADwvw"
				],
				[
					484,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMZpAAAAAAAAx2kAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMZpAAAAAAAAxmkAAAAAAAAAAAAAAADwvw"
				],
				[
					485,
					1,
					"insert",
					{
						"characters": "te"
					},
					"AgAAAMdpAAAAAAAAyGkAAAAAAAAAAAAAyGkAAAAAAADJaQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMdpAAAAAAAAx2kAAAAAAAAAAAAAAADwvw"
				],
				[
					486,
					1,
					"left_delete",
					null,
					"AQAAAMhpAAAAAAAAyGkAAAAAAAABAAAAZQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMlpAAAAAAAAyWkAAAAAAAAAAAAAAADwvw"
				],
				[
					487,
					1,
					"insert",
					{
						"characters": "he"
					},
					"AgAAAMhpAAAAAAAAyWkAAAAAAAAAAAAAyWkAAAAAAADKaQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMhpAAAAAAAAyGkAAAAAAAAAAAAAAADwvw"
				],
				[
					488,
					1,
					"insert",
					{
						"characters": " notions"
					},
					"CAAAAMppAAAAAAAAy2kAAAAAAAAAAAAAy2kAAAAAAADMaQAAAAAAAAAAAADMaQAAAAAAAM1pAAAAAAAAAAAAAM1pAAAAAAAAzmkAAAAAAAAAAAAAzmkAAAAAAADPaQAAAAAAAAAAAADPaQAAAAAAANBpAAAAAAAAAAAAANBpAAAAAAAA0WkAAAAAAAAAAAAA0WkAAAAAAADSaQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMppAAAAAAAAymkAAAAAAAAAAAAAAADwvw"
				],
				[
					489,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAANJpAAAAAAAA02kAAAAAAAAAAAAA02kAAAAAAADUaQAAAAAAAAAAAADUaQAAAAAAANVpAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANJpAAAAAAAA0mkAAAAAAAAAAAAAAADwvw"
				],
				[
					490,
					1,
					"insert",
					{
						"characters": " kernels"
					},
					"CAAAANVpAAAAAAAA1mkAAAAAAAAAAAAA1mkAAAAAAADXaQAAAAAAAAAAAADXaQAAAAAAANhpAAAAAAAAAAAAANhpAAAAAAAA2WkAAAAAAAAAAAAA2WkAAAAAAADaaQAAAAAAAAAAAADaaQAAAAAAANtpAAAAAAAAAAAAANtpAAAAAAAA3GkAAAAAAAAAAAAA3GkAAAAAAADdaQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANVpAAAAAAAA1WkAAAAAAAAAAAAAAADwvw"
				],
				[
					491,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAN1pAAAAAAAA3mkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN1pAAAAAAAA3WkAAAAAAAAAAAAAAADwvw"
				],
				[
					492,
					1,
					"insert",
					{
						"characters": " shr"
					},
					"BAAAAN5pAAAAAAAA32kAAAAAAAAAAAAA32kAAAAAAADgaQAAAAAAAAAAAADgaQAAAAAAAOFpAAAAAAAAAAAAAOFpAAAAAAAA4mkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN5pAAAAAAAA3mkAAAAAAAAAAAAAAADwvw"
				],
				[
					493,
					1,
					"left_delete",
					null,
					"AQAAAOFpAAAAAAAA4WkAAAAAAAABAAAAcg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOJpAAAAAAAA4mkAAAAAAAAAAAAAAADwvw"
				],
				[
					494,
					1,
					"insert",
					{
						"characters": "or"
					},
					"AgAAAOFpAAAAAAAA4mkAAAAAAAAAAAAA4mkAAAAAAADjaQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOFpAAAAAAAA4WkAAAAAAAAAAAAAAADwvw"
				],
				[
					495,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAONpAAAAAAAA5GkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAONpAAAAAAAA42kAAAAAAAAAAAAAAADwvw"
				],
				[
					496,
					1,
					"insert",
					{
						"characters": " exax"
					},
					"BQAAAORpAAAAAAAA5WkAAAAAAAAAAAAA5WkAAAAAAADmaQAAAAAAAAAAAADmaQAAAAAAAOdpAAAAAAAAAAAAAOdpAAAAAAAA6GkAAAAAAAAAAAAA6GkAAAAAAADpaQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAORpAAAAAAAA5GkAAAAAAAAAAAAAAADwvw"
				],
				[
					497,
					1,
					"left_delete",
					null,
					"AQAAAOhpAAAAAAAA6GkAAAAAAAABAAAAeA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOlpAAAAAAAA6WkAAAAAAAAAAAAAAADwvw"
				],
				[
					498,
					1,
					"insert",
					{
						"characters": "ct"
					},
					"AgAAAOhpAAAAAAAA6WkAAAAAAAAAAAAA6WkAAAAAAADqaQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOhpAAAAAAAA6GkAAAAAAAAAAAAAAADwvw"
				],
				[
					499,
					1,
					"insert",
					{
						"characters": " sequences,"
					},
					"CwAAAOppAAAAAAAA62kAAAAAAAAAAAAA62kAAAAAAADsaQAAAAAAAAAAAADsaQAAAAAAAO1pAAAAAAAAAAAAAO1pAAAAAAAA7mkAAAAAAAAAAAAA7mkAAAAAAADvaQAAAAAAAAAAAADvaQAAAAAAAPBpAAAAAAAAAAAAAPBpAAAAAAAA8WkAAAAAAAAAAAAA8WkAAAAAAADyaQAAAAAAAAAAAADyaQAAAAAAAPNpAAAAAAAAAAAAAPNpAAAAAAAA9GkAAAAAAAAAAAAA9GkAAAAAAAD1aQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOppAAAAAAAA6mkAAAAAAAAAAAAAAADwvw"
				],
				[
					500,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAAPVpAAAAAAAA9mkAAAAAAAAAAAAA9mkAAAAAAAD3aQAAAAAAAAAAAAD3aQAAAAAAAPhpAAAAAAAAAAAAAPhpAAAAAAAA+WkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPVpAAAAAAAA9WkAAAAAAAAAAAAAAADwvw"
				],
				[
					501,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPlpAAAAAAAA+mkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPlpAAAAAAAA+WkAAAAAAAAAAAAAAADwvw"
				],
				[
					502,
					6,
					"left_delete",
					null,
					"BgAAAPlpAAAAAAAA+WkAAAAAAAABAAAAIPhpAAAAAAAA+GkAAAAAAAABAAAAZPdpAAAAAAAA92kAAAAAAAABAAAAbvZpAAAAAAAA9mkAAAAAAAABAAAAYfVpAAAAAAAA9WkAAAAAAAABAAAAIPRpAAAAAAAA9GkAAAAAAAABAAAALA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPppAAAAAAAA+mkAAAAAAAAAAAAAAADwvw"
				],
				[
					505,
					1,
					"left_delete",
					null,
					"AQAAAN1pAAAAAAAA3WkAAAAAAAABAAAALA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN5pAAAAAAAA3mkAAAAAAAAAAAAAAADwvw"
				],
				[
					506,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAN1pAAAAAAAA3mkAAAAAAAAAAAAA3mkAAAAAAADfaQAAAAAAAAAAAADfaQAAAAAAAOBpAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN1pAAAAAAAA3WkAAAAAAAAAAAAAAADwvw"
				],
				[
					510,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAN1pAAAAAAAA3mkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN1pAAAAAAAA3WkAAAAAAAAAAAAAAADwvw"
				],
				[
					511,
					1,
					"insert",
					{
						"characters": " images,"
					},
					"CAAAAN5pAAAAAAAA32kAAAAAAAAAAAAA32kAAAAAAADgaQAAAAAAAAAAAADgaQAAAAAAAOFpAAAAAAAAAAAAAOFpAAAAAAAA4mkAAAAAAAAAAAAA4mkAAAAAAADjaQAAAAAAAAAAAADjaQAAAAAAAORpAAAAAAAAAAAAAORpAAAAAAAA5WkAAAAAAAAAAAAA5WkAAAAAAADmaQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN5pAAAAAAAA3mkAAAAAAAAAAAAAAADwvw"
				],
				[
					512,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOZpAAAAAAAA52kAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOZpAAAAAAAA5mkAAAAAAAAAAAAAAADwvw"
				],
				[
					513,
					2,
					"left_delete",
					null,
					"AgAAAOZpAAAAAAAA5mkAAAAAAAABAAAAIOVpAAAAAAAA5WkAAAAAAAABAAAALA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOdpAAAAAAAA52kAAAAAAAAAAAAAAADwvw"
				],
				[
					514,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAOVpAAAAAAAA5mkAAAAAAAAAAAAA5mkAAAAAAADnaQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOVpAAAAAAAA5WkAAAAAAAAAAAAAAADwvw"
				],
				[
					515,
					2,
					"left_delete",
					null,
					"AgAAAOZpAAAAAAAA5mkAAAAAAAABAAAAYeVpAAAAAAAA5WkAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOdpAAAAAAAA52kAAAAAAAAAAAAAAADwvw"
				],
				[
					516,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOVpAAAAAAAA5mkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOVpAAAAAAAA5WkAAAAAAAAAAAAAAADwvw"
				],
				[
					517,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAAOZpAAAAAAAA52kAAAAAAAAAAAAA52kAAAAAAADoaQAAAAAAAAAAAADoaQAAAAAAAOlpAAAAAAAAAAAAAOlpAAAAAAAA6mkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOZpAAAAAAAA5mkAAAAAAAAAAAAAAADwvw"
				],
				[
					518,
					1,
					"insert",
					{
						"characters": " short"
					},
					"BgAAAOppAAAAAAAA62kAAAAAAAAAAAAA62kAAAAAAADsaQAAAAAAAAAAAADsaQAAAAAAAO1pAAAAAAAAAAAAAO1pAAAAAAAA7mkAAAAAAAAAAAAA7mkAAAAAAADvaQAAAAAAAAAAAADvaQAAAAAAAPBpAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOppAAAAAAAA6mkAAAAAAAAAAAAAAADwvw"
				],
				[
					519,
					2,
					"delete_word",
					{
						"forward": true
					},
					"AgAAAPBpAAAAAAAA8GkAAAAAAAADAAAAIG9m8GkAAAAAAADwaQAAAAAAAAYAAAAgc2hvcnQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPBpAAAAAAAA8GkAAAAAAAAAAAAAAADwvw"
				],
				[
					522,
					1,
					"insert",
					{
						"characters": " are"
					},
					"BAAAAABqAAAAAAAAAWoAAAAAAAAAAAAAAWoAAAAAAAACagAAAAAAAAAAAAACagAAAAAAAANqAAAAAAAAAAAAAANqAAAAAAAABGoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAABqAAAAAAAAAGoAAAAAAAAAAAAAAADwvw"
				],
				[
					523,
					1,
					"insert",
					{
						"characters": " defined"
					},
					"CAAAAARqAAAAAAAABWoAAAAAAAAAAAAABWoAAAAAAAAGagAAAAAAAAAAAAAGagAAAAAAAAdqAAAAAAAAAAAAAAdqAAAAAAAACGoAAAAAAAAAAAAACGoAAAAAAAAJagAAAAAAAAAAAAAJagAAAAAAAApqAAAAAAAAAAAAAApqAAAAAAAAC2oAAAAAAAAAAAAAC2oAAAAAAAAMagAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAARqAAAAAAAABGoAAAAAAAAAAAAAAADwvw"
				],
				[
					524,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAAxqAAAAAAAADWoAAAAAAAAAAAAADWoAAAAAAAAOagAAAAAAAAAAAAAOagAAAAAAAA9qAAAAAAAAAAAAAA9qAAAAAAAAEGoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAxqAAAAAAAADGoAAAAAAAAAAAAAAADwvw"
				],
				[
					525,
					1,
					"insert",
					{
						"characters": " action"
					},
					"BwAAABBqAAAAAAAAEWoAAAAAAAAAAAAAEWoAAAAAAAASagAAAAAAAAAAAAASagAAAAAAABNqAAAAAAAAAAAAABNqAAAAAAAAFGoAAAAAAAAAAAAAFGoAAAAAAAAVagAAAAAAAAAAAAAVagAAAAAAABZqAAAAAAAAAAAAABZqAAAAAAAAF2oAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABBqAAAAAAAAEGoAAAAAAAAAAAAAAADwvw"
				],
				[
					526,
					1,
					"insert",
					{
						"characters": " operads,"
					},
					"CQAAABdqAAAAAAAAGGoAAAAAAAAAAAAAGGoAAAAAAAAZagAAAAAAAAAAAAAZagAAAAAAABpqAAAAAAAAAAAAABpqAAAAAAAAG2oAAAAAAAAAAAAAG2oAAAAAAAAcagAAAAAAAAAAAAAcagAAAAAAAB1qAAAAAAAAAAAAAB1qAAAAAAAAHmoAAAAAAAAAAAAAHmoAAAAAAAAfagAAAAAAAAAAAAAfagAAAAAAACBqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABdqAAAAAAAAF2oAAAAAAAAAAAAAAADwvw"
				],
				[
					527,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAACBqAAAAAAAAIWoAAAAAAAAAAAAAIWoAAAAAAAAiagAAAAAAAAAAAAAiagAAAAAAACNqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACBqAAAAAAAAIGoAAAAAAAAAAAAAAADwvw"
				],
				[
					528,
					1,
					"insert",
					{
						"characters": " well"
					},
					"BQAAACNqAAAAAAAAJGoAAAAAAAAAAAAAJGoAAAAAAAAlagAAAAAAAAAAAAAlagAAAAAAACZqAAAAAAAAAAAAACZqAAAAAAAAJ2oAAAAAAAAAAAAAJ2oAAAAAAAAoagAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACNqAAAAAAAAI2oAAAAAAAAAAAAAAADwvw"
				],
				[
					529,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAChqAAAAAAAAKWoAAAAAAAAAAAAAKWoAAAAAAAAqagAAAAAAAAAAAAAqagAAAAAAACtqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAChqAAAAAAAAKGoAAAAAAAAAAAAAAADwvw"
				],
				[
					530,
					1,
					"insert",
					{
						"characters": " fitting"
					},
					"CAAAACtqAAAAAAAALGoAAAAAAAAAAAAALGoAAAAAAAAtagAAAAAAAAAAAAAtagAAAAAAAC5qAAAAAAAAAAAAAC5qAAAAAAAAL2oAAAAAAAAAAAAAL2oAAAAAAAAwagAAAAAAAAAAAAAwagAAAAAAADFqAAAAAAAAAAAAADFqAAAAAAAAMmoAAAAAAAAAAAAAMmoAAAAAAAAzagAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACtqAAAAAAAAK2oAAAAAAAAAAAAAAADwvw"
				],
				[
					531,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAADNqAAAAAAAANGoAAAAAAAAAAAAANGoAAAAAAAA1agAAAAAAAAAAAAA1agAAAAAAADZqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADNqAAAAAAAAM2oAAAAAAAAAAAAAAADwvw"
				],
				[
					532,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAADRqAAAAAAAANGoAAAAAAAACAAAAaW4",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADZqAAAAAAAANmoAAAAAAAAAAAAAAADwvw"
				],
				[
					533,
					1,
					"insert_snippet",
					{
						"contents": "\\$$0\\$"
					},
					"AQAAADRqAAAAAAAANmoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADRqAAAAAAAANGoAAAAAAAAAAAAAAADwvw"
				],
				[
					534,
					1,
					"insert",
					{
						"characters": "\\textbf{Gro"
					},
					"CwAAADVqAAAAAAAANmoAAAAAAAAAAAAANmoAAAAAAAA3agAAAAAAAAAAAAA3agAAAAAAADhqAAAAAAAAAAAAADhqAAAAAAAAOWoAAAAAAAAAAAAAOWoAAAAAAAA6agAAAAAAAAAAAAA6agAAAAAAADtqAAAAAAAAAAAAADtqAAAAAAAAPGoAAAAAAAAAAAAAPGoAAAAAAAA9agAAAAAAAAAAAAA9agAAAAAAAD5qAAAAAAAAAAAAAD5qAAAAAAAAP2oAAAAAAAAAAAAAP2oAAAAAAABAagAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADVqAAAAAAAANWoAAAAAAAAAAAAAAADwvw"
				],
				[
					535,
					1,
					"left_delete",
					null,
					"AQAAAD9qAAAAAAAAP2oAAAAAAAABAAAAbw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEBqAAAAAAAAQGoAAAAAAAAAAAAAAADwvw"
				],
				[
					536,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAD9qAAAAAAAAQGoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD9qAAAAAAAAP2oAAAAAAAAAAAAAAADwvw"
				],
				[
					537,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAEBqAAAAAAAAQWoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEBqAAAAAAAAQGoAAAAAAAAAAAAAAADwvw"
				],
				[
					539,
					1,
					"insert",
					{
						"characters": "-operads"
					},
					"CAAAAEJqAAAAAAAAQ2oAAAAAAAAAAAAAQ2oAAAAAAABEagAAAAAAAAAAAABEagAAAAAAAEVqAAAAAAAAAAAAAEVqAAAAAAAARmoAAAAAAAAAAAAARmoAAAAAAABHagAAAAAAAAAAAABHagAAAAAAAEhqAAAAAAAAAAAAAEhqAAAAAAAASWoAAAAAAAAAAAAASWoAAAAAAABKagAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEJqAAAAAAAAQmoAAAAAAAAAAAAAAADwvw"
				],
				[
					540,
					1,
					"insert",
					{
						"characters": " into"
					},
					"BQAAAEpqAAAAAAAAS2oAAAAAAAAAAAAAS2oAAAAAAABMagAAAAAAAAAAAABMagAAAAAAAE1qAAAAAAAAAAAAAE1qAAAAAAAATmoAAAAAAAAAAAAATmoAAAAAAABPagAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEpqAAAAAAAASmoAAAAAAAAAAAAAAADwvw"
				],
				[
					541,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAE9qAAAAAAAAUGoAAAAAAAAAAAAAUGoAAAAAAABRagAAAAAAAAAAAABRagAAAAAAAFJqAAAAAAAAAAAAAFJqAAAAAAAAU2oAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE9qAAAAAAAAT2oAAAAAAAAAAAAAAADwvw"
				],
				[
					542,
					1,
					"insert",
					{
						"characters": " picture"
					},
					"CAAAAFNqAAAAAAAAVGoAAAAAAAAAAAAAVGoAAAAAAABVagAAAAAAAAAAAABVagAAAAAAAFZqAAAAAAAAAAAAAFZqAAAAAAAAV2oAAAAAAAAAAAAAV2oAAAAAAABYagAAAAAAAAAAAABYagAAAAAAAFlqAAAAAAAAAAAAAFlqAAAAAAAAWmoAAAAAAAAAAAAAWmoAAAAAAABbagAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFNqAAAAAAAAU2oAAAAAAAAAAAAAAADwvw"
				],
				[
					547,
					1,
					"insert",
					{
						"characters": "comparig"
					},
					"CQAAACxqAAAAAAAALWoAAAAAAAAAAAAALWoAAAAAAAAtagAAAAAAAAcAAABmaXR0aW5nLWoAAAAAAAAuagAAAAAAAAAAAAAuagAAAAAAAC9qAAAAAAAAAAAAAC9qAAAAAAAAMGoAAAAAAAAAAAAAMGoAAAAAAAAxagAAAAAAAAAAAAAxagAAAAAAADJqAAAAAAAAAAAAADJqAAAAAAAAM2oAAAAAAAAAAAAAM2oAAAAAAAA0agAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACxqAAAAAAAAM2oAAAAAAAAAAAAAAADwvw"
				],
				[
					548,
					1,
					"left_delete",
					null,
					"AQAAADNqAAAAAAAAM2oAAAAAAAABAAAAZw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADRqAAAAAAAANGoAAAAAAAAAAAAAAADwvw"
				],
				[
					549,
					1,
					"insert",
					{
						"characters": "ng"
					},
					"AgAAADNqAAAAAAAANGoAAAAAAAAAAAAANGoAAAAAAAA1agAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADNqAAAAAAAAM2oAAAAAAAAAAAAAAADwvw"
				],
				[
					551,
					3,
					"delete_word",
					{
						"forward": false
					},
					"AwAAAFZqAAAAAAAAVmoAAAAAAAAHAAAAcGljdHVyZVJqAAAAAAAAUmoAAAAAAAAEAAAAdGhlIE1qAAAAAAAATWoAAAAAAAAFAAAAaW50byA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF1qAAAAAAAAXWoAAAAAAAAAAAAAACCJQA"
				],
				[
					552,
					1,
					"insert",
					{
						"characters": "to"
					},
					"AgAAAE1qAAAAAAAATmoAAAAAAAAAAAAATmoAAAAAAABPagAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE1qAAAAAAAATWoAAAAAAAAAAAAAAADwvw"
				],
				[
					553,
					1,
					"insert",
					{
						"characters": " action"
					},
					"BwAAAE9qAAAAAAAAUGoAAAAAAAAAAAAAUGoAAAAAAABRagAAAAAAAAAAAABRagAAAAAAAFJqAAAAAAAAAAAAAFJqAAAAAAAAU2oAAAAAAAAAAAAAU2oAAAAAAABUagAAAAAAAAAAAABUagAAAAAAAFVqAAAAAAAAAAAAAFVqAAAAAAAAVmoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE9qAAAAAAAAT2oAAAAAAAAAAAAAAADwvw"
				],
				[
					554,
					1,
					"insert",
					{
						"characters": " operads"
					},
					"CAAAAFZqAAAAAAAAV2oAAAAAAAAAAAAAV2oAAAAAAABYagAAAAAAAAAAAABYagAAAAAAAFlqAAAAAAAAAAAAAFlqAAAAAAAAWmoAAAAAAAAAAAAAWmoAAAAAAABbagAAAAAAAAAAAABbagAAAAAAAFxqAAAAAAAAAAAAAFxqAAAAAAAAXWoAAAAAAAAAAAAAXWoAAAAAAABeagAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFZqAAAAAAAAVmoAAAAAAAAAAAAAAADwvw"
				],
				[
					555,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAF5qAAAAAAAAX2oAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF5qAAAAAAAAXmoAAAAAAAAAAAAAAADwvw"
				],
				[
					557,
					1,
					"insert",
					{
						"characters": "and"
					},
					"AwAAAE1qAAAAAAAATmoAAAAAAAAAAAAATmoAAAAAAABPagAAAAAAAAAAAABPagAAAAAAAFBqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE1qAAAAAAAATWoAAAAAAAAAAAAAAADwvw"
				],
				[
					558,
					1,
					"insert",
					{
						"characters": " co"
					},
					"AwAAAFBqAAAAAAAAUWoAAAAAAAAAAAAAUWoAAAAAAABSagAAAAAAAAAAAABSagAAAAAAAFNqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFBqAAAAAAAAUGoAAAAAAAAAAAAAAADwvw"
				],
				[
					559,
					1,
					"left_delete",
					null,
					"AQAAAFJqAAAAAAAAUmoAAAAAAAABAAAAbw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFNqAAAAAAAAU2oAAAAAAAAAAAAAAADwvw"
				],
				[
					560,
					1,
					"insert",
					{
						"characters": "rossed"
					},
					"BgAAAFJqAAAAAAAAU2oAAAAAAAAAAAAAU2oAAAAAAABUagAAAAAAAAAAAABUagAAAAAAAFVqAAAAAAAAAAAAAFVqAAAAAAAAVmoAAAAAAAAAAAAAVmoAAAAAAABXagAAAAAAAAAAAABXagAAAAAAAFhqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFJqAAAAAAAAUmoAAAAAAAAAAAAAAADwvw"
				],
				[
					561,
					1,
					"insert",
					{
						"characters": " simplicial"
					},
					"CwAAAFhqAAAAAAAAWWoAAAAAAAAAAAAAWWoAAAAAAABaagAAAAAAAAAAAABaagAAAAAAAFtqAAAAAAAAAAAAAFtqAAAAAAAAXGoAAAAAAAAAAAAAXGoAAAAAAABdagAAAAAAAAAAAABdagAAAAAAAF5qAAAAAAAAAAAAAF5qAAAAAAAAX2oAAAAAAAAAAAAAX2oAAAAAAABgagAAAAAAAAAAAABgagAAAAAAAGFqAAAAAAAAAAAAAGFqAAAAAAAAYmoAAAAAAAAAAAAAYmoAAAAAAABjagAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFhqAAAAAAAAWGoAAAAAAAAAAAAAAADwvw"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": " groups"
					},
					"BwAAAGNqAAAAAAAAZGoAAAAAAAAAAAAAZGoAAAAAAABlagAAAAAAAAAAAABlagAAAAAAAGZqAAAAAAAAAAAAAGZqAAAAAAAAZ2oAAAAAAAAAAAAAZ2oAAAAAAABoagAAAAAAAAAAAABoagAAAAAAAGlqAAAAAAAAAAAAAGlqAAAAAAAAamoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGNqAAAAAAAAY2oAAAAAAAAAAAAAAADwvw"
				],
				[
					563,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGpqAAAAAAAAa2oAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGpqAAAAAAAAamoAAAAAAAAAAAAAAADwvw"
				],
				[
					567,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAACRqAAAAAAAAJGoAAAAAAAAEAAAAd2VsbCFqAAAAAAAAIWoAAAAAAAADAAAAYXMg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAChqAAAAAAAAKGoAAAAAAAAAAAAAAADwvw"
				],
				[
					568,
					1,
					"insert",
					{
						"characters": "before"
					},
					"BgAAACFqAAAAAAAAImoAAAAAAAAAAAAAImoAAAAAAAAjagAAAAAAAAAAAAAjagAAAAAAACRqAAAAAAAAAAAAACRqAAAAAAAAJWoAAAAAAAAAAAAAJWoAAAAAAAAmagAAAAAAAAAAAAAmagAAAAAAACdqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACFqAAAAAAAAIWoAAAAAAAAAAAAAAADwvw"
				],
				[
					569,
					3,
					"right_delete",
					null,
					"AwAAACdqAAAAAAAAJ2oAAAAAAAABAAAAICdqAAAAAAAAJ2oAAAAAAAABAAAAYSdqAAAAAAAAJ2oAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACdqAAAAAAAAJ2oAAAAAAAAAAAAAAADwvw"
				],
				[
					571,
					2,
					"left_delete",
					null,
					"AgAAACBqAAAAAAAAIGoAAAAAAAABAAAAIB9qAAAAAAAAH2oAAAAAAAABAAAALA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACFqAAAAAAAAIWoAAAAAAAAAAAAAAADwvw"
				],
				[
					572,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB9qAAAAAAAAIGoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB9qAAAAAAAAH2oAAAAAAAAAAAAAAADwvw"
				],
				[
					576,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAHdqAAAAAAAAeGoAAAAAAAAAAAAAeGoAAAAAAAB5agAAAAAAAAAAAAB5agAAAAAAAHpqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHdqAAAAAAAAd2oAAAAAAAAAAAAAAADwvw"
				],
				[
					577,
					1,
					"insert",
					{
						"characters": " well"
					},
					"BQAAAHpqAAAAAAAAe2oAAAAAAAAAAAAAe2oAAAAAAAB8agAAAAAAAAAAAAB8agAAAAAAAH1qAAAAAAAAAAAAAH1qAAAAAAAAfmoAAAAAAAAAAAAAfmoAAAAAAAB/agAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHpqAAAAAAAAemoAAAAAAAAAAAAAAADwvw"
				],
				[
					579,
					1,
					"insert",
					{
						"characters": " We"
					},
					"AwAAAIBqAAAAAAAAgWoAAAAAAAAAAAAAgWoAAAAAAACCagAAAAAAAAAAAACCagAAAAAAAINqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIBqAAAAAAAAgGoAAAAAAAAAAAAAAADwvw"
				],
				[
					580,
					1,
					"insert",
					{
						"characters": " provide"
					},
					"CAAAAINqAAAAAAAAhGoAAAAAAAAAAAAAhGoAAAAAAACFagAAAAAAAAAAAACFagAAAAAAAIZqAAAAAAAAAAAAAIZqAAAAAAAAh2oAAAAAAAAAAAAAh2oAAAAAAACIagAAAAAAAAAAAACIagAAAAAAAIlqAAAAAAAAAAAAAIlqAAAAAAAAimoAAAAAAAAAAAAAimoAAAAAAACLagAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAINqAAAAAAAAg2oAAAAAAAAAAAAAAADwvw"
				],
				[
					581,
					1,
					"insert",
					{
						"characters": " some"
					},
					"BQAAAItqAAAAAAAAjGoAAAAAAAAAAAAAjGoAAAAAAACNagAAAAAAAAAAAACNagAAAAAAAI5qAAAAAAAAAAAAAI5qAAAAAAAAj2oAAAAAAAAAAAAAj2oAAAAAAACQagAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAItqAAAAAAAAi2oAAAAAAAAAAAAAAADwvw"
				],
				[
					582,
					1,
					"insert",
					{
						"characters": " s"
					},
					"AgAAAJBqAAAAAAAAkWoAAAAAAAAAAAAAkWoAAAAAAACSagAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJBqAAAAAAAAkGoAAAAAAAAAAAAAAADwvw"
				],
				[
					583,
					1,
					"left_delete",
					null,
					"AQAAAJFqAAAAAAAAkWoAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJJqAAAAAAAAkmoAAAAAAAAAAAAAAADwvw"
				],
				[
					584,
					1,
					"insert",
					{
						"characters": "useful"
					},
					"BgAAAJFqAAAAAAAAkmoAAAAAAAAAAAAAkmoAAAAAAACTagAAAAAAAAAAAACTagAAAAAAAJRqAAAAAAAAAAAAAJRqAAAAAAAAlWoAAAAAAAAAAAAAlWoAAAAAAACWagAAAAAAAAAAAACWagAAAAAAAJdqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJFqAAAAAAAAkWoAAAAAAAAAAAAAAADwvw"
				],
				[
					585,
					1,
					"insert",
					{
						"characters": " technical"
					},
					"CgAAAJdqAAAAAAAAmGoAAAAAAAAAAAAAmGoAAAAAAACZagAAAAAAAAAAAACZagAAAAAAAJpqAAAAAAAAAAAAAJpqAAAAAAAAm2oAAAAAAAAAAAAAm2oAAAAAAACcagAAAAAAAAAAAACcagAAAAAAAJ1qAAAAAAAAAAAAAJ1qAAAAAAAAnmoAAAAAAAAAAAAAnmoAAAAAAACfagAAAAAAAAAAAACfagAAAAAAAKBqAAAAAAAAAAAAAKBqAAAAAAAAoWoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJdqAAAAAAAAl2oAAAAAAAAAAAAAAADwvw"
				],
				[
					586,
					1,
					"insert",
					{
						"characters": " lemmas"
					},
					"BwAAAKFqAAAAAAAAomoAAAAAAAAAAAAAomoAAAAAAACjagAAAAAAAAAAAACjagAAAAAAAKRqAAAAAAAAAAAAAKRqAAAAAAAApWoAAAAAAAAAAAAApWoAAAAAAACmagAAAAAAAAAAAACmagAAAAAAAKdqAAAAAAAAAAAAAKdqAAAAAAAAqGoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKFqAAAAAAAAoWoAAAAAAAAAAAAAAADwvw"
				],
				[
					587,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAAKhqAAAAAAAAqWoAAAAAAAAAAAAAqWoAAAAAAACqagAAAAAAAAAAAACqagAAAAAAAKtqAAAAAAAAAAAAAKtqAAAAAAAArGoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKhqAAAAAAAAqGoAAAAAAAAAAAAAAADwvw"
				],
				[
					588,
					1,
					"insert",
					{
						"characters": " go"
					},
					"AwAAAKxqAAAAAAAArWoAAAAAAAAAAAAArWoAAAAAAACuagAAAAAAAAAAAACuagAAAAAAAK9qAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKxqAAAAAAAArGoAAAAAAAAAAAAAAADwvw"
				],
				[
					589,
					1,
					"insert",
					{
						"characters": " on"
					},
					"AwAAAK9qAAAAAAAAsGoAAAAAAAAAAAAAsGoAAAAAAACxagAAAAAAAAAAAACxagAAAAAAALJqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK9qAAAAAAAAr2oAAAAAAAAAAAAAAADwvw"
				],
				[
					590,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAALJqAAAAAAAAs2oAAAAAAAAAAAAAs2oAAAAAAAC0agAAAAAAAAAAAAC0agAAAAAAALVqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALJqAAAAAAAAsmoAAAAAAAAAAAAAAADwvw"
				],
				[
					591,
					1,
					"insert",
					{
						"characters": " give"
					},
					"BQAAALVqAAAAAAAAtmoAAAAAAAAAAAAAtmoAAAAAAAC3agAAAAAAAAAAAAC3agAAAAAAALhqAAAAAAAAAAAAALhqAAAAAAAAuWoAAAAAAAAAAAAAuWoAAAAAAAC6agAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALVqAAAAAAAAtWoAAAAAAAAAAAAAAADwvw"
				],
				[
					592,
					1,
					"insert",
					{
						"characters": " an"
					},
					"AwAAALpqAAAAAAAAu2oAAAAAAAAAAAAAu2oAAAAAAAC8agAAAAAAAAAAAAC8agAAAAAAAL1qAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALpqAAAAAAAAumoAAAAAAAAAAAAAAADwvw"
				],
				[
					593,
					1,
					"insert",
					{
						"characters": " algebraic"
					},
					"CgAAAL1qAAAAAAAAvmoAAAAAAAAAAAAAvmoAAAAAAAC/agAAAAAAAAAAAAC/agAAAAAAAMBqAAAAAAAAAAAAAMBqAAAAAAAAwWoAAAAAAAAAAAAAwWoAAAAAAADCagAAAAAAAAAAAADCagAAAAAAAMNqAAAAAAAAAAAAAMNqAAAAAAAAxGoAAAAAAAAAAAAAxGoAAAAAAADFagAAAAAAAAAAAADFagAAAAAAAMZqAAAAAAAAAAAAAMZqAAAAAAAAx2oAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL1qAAAAAAAAvWoAAAAAAAAAAAAAAADwvw"
				],
				[
					594,
					1,
					"insert",
					{
						"characters": " characterisation"
					},
					"EQAAAMdqAAAAAAAAyGoAAAAAAAAAAAAAyGoAAAAAAADJagAAAAAAAAAAAADJagAAAAAAAMpqAAAAAAAAAAAAAMpqAAAAAAAAy2oAAAAAAAAAAAAAy2oAAAAAAADMagAAAAAAAAAAAADMagAAAAAAAM1qAAAAAAAAAAAAAM1qAAAAAAAAzmoAAAAAAAAAAAAAzmoAAAAAAADPagAAAAAAAAAAAADPagAAAAAAANBqAAAAAAAAAAAAANBqAAAAAAAA0WoAAAAAAAAAAAAA0WoAAAAAAADSagAAAAAAAAAAAADSagAAAAAAANNqAAAAAAAAAAAAANNqAAAAAAAA1GoAAAAAAAAAAAAA1GoAAAAAAADVagAAAAAAAAAAAADVagAAAAAAANZqAAAAAAAAAAAAANZqAAAAAAAA12oAAAAAAAAAAAAA12oAAAAAAADYagAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMdqAAAAAAAAx2oAAAAAAAAAAAAAAADwvw"
				],
				[
					595,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAANhqAAAAAAAA2WoAAAAAAAAAAAAA2WoAAAAAAADaagAAAAAAAAAAAADaagAAAAAAANtqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANhqAAAAAAAA2GoAAAAAAAAAAAAAAADwvw"
				],
				[
					596,
					1,
					"insert",
					{
						"characters": " action"
					},
					"BwAAANtqAAAAAAAA3GoAAAAAAAAAAAAA3GoAAAAAAADdagAAAAAAAAAAAADdagAAAAAAAN5qAAAAAAAAAAAAAN5qAAAAAAAA32oAAAAAAAAAAAAA32oAAAAAAADgagAAAAAAAAAAAADgagAAAAAAAOFqAAAAAAAAAAAAAOFqAAAAAAAA4moAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANtqAAAAAAAA22oAAAAAAAAAAAAAAADwvw"
				],
				[
					597,
					1,
					"insert",
					{
						"characters": " operads"
					},
					"CAAAAOJqAAAAAAAA42oAAAAAAAAAAAAA42oAAAAAAADkagAAAAAAAAAAAADkagAAAAAAAOVqAAAAAAAAAAAAAOVqAAAAAAAA5moAAAAAAAAAAAAA5moAAAAAAADnagAAAAAAAAAAAADnagAAAAAAAOhqAAAAAAAAAAAAAOhqAAAAAAAA6WoAAAAAAAAAAAAA6WoAAAAAAADqagAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOJqAAAAAAAA4moAAAAAAAAAAAAAAADwvw"
				],
				[
					598,
					1,
					"insert",
					{
						"characters": " via"
					},
					"BAAAAOpqAAAAAAAA62oAAAAAAAAAAAAA62oAAAAAAADsagAAAAAAAAAAAADsagAAAAAAAO1qAAAAAAAAAAAAAO1qAAAAAAAA7moAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOpqAAAAAAAA6moAAAAAAAAAAAAAAADwvw"
				],
				[
					599,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO5qAAAAAAAA72oAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO5qAAAAAAAA7moAAAAAAAAAAAAAAADwvw"
				],
				[
					602,
					4,
					"left_delete",
					null,
					"BAAAAO5qAAAAAAAA7moAAAAAAAABAAAAIO1qAAAAAAAA7WoAAAAAAAABAAAAYexqAAAAAAAA7GoAAAAAAAABAAAAaetqAAAAAAAA62oAAAAAAAABAAAAdg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO9qAAAAAAAA72oAAAAAAAAAAAAAAADwvw"
				],
				[
					603,
					1,
					"insert",
					{
						"characters": "in"
					},
					"AgAAAOtqAAAAAAAA7GoAAAAAAAAAAAAA7GoAAAAAAADtagAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOtqAAAAAAAA62oAAAAAAAAAAAAAAADwvw"
				],
				[
					604,
					1,
					"insert",
					{
						"characters": " terms"
					},
					"BgAAAO1qAAAAAAAA7moAAAAAAAAAAAAA7moAAAAAAADvagAAAAAAAAAAAADvagAAAAAAAPBqAAAAAAAAAAAAAPBqAAAAAAAA8WoAAAAAAAAAAAAA8WoAAAAAAADyagAAAAAAAAAAAADyagAAAAAAAPNqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO1qAAAAAAAA7WoAAAAAAAAAAAAAAADwvw"
				],
				[
					605,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAPNqAAAAAAAA9GoAAAAAAAAAAAAA9GoAAAAAAAD1agAAAAAAAAAAAAD1agAAAAAAAPZqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPNqAAAAAAAA82oAAAAAAAAAAAAAAADwvw"
				],
				[
					606,
					1,
					"insert",
					{
						"characters": " blocks"
					},
					"BwAAAPZqAAAAAAAA92oAAAAAAAAAAAAA92oAAAAAAAD4agAAAAAAAAAAAAD4agAAAAAAAPlqAAAAAAAAAAAAAPlqAAAAAAAA+moAAAAAAAAAAAAA+moAAAAAAAD7agAAAAAAAAAAAAD7agAAAAAAAPxqAAAAAAAAAAAAAPxqAAAAAAAA/WoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPZqAAAAAAAA9moAAAAAAAAAAAAAAADwvw"
				],
				[
					607,
					1,
					"insert",
					{
						"characters": " s"
					},
					"AgAAAP1qAAAAAAAA/moAAAAAAAAAAAAA/moAAAAAAAD/agAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP1qAAAAAAAA/WoAAAAAAAAAAAAAAADwvw"
				],
				[
					608,
					3,
					"left_delete",
					null,
					"AwAAAP5qAAAAAAAA/moAAAAAAAABAAAAc/1qAAAAAAAA/WoAAAAAAAABAAAAIPxqAAAAAAAA/GoAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP9qAAAAAAAA/2oAAAAAAAAAAAAAAADwvw"
				],
				[
					609,
					1,
					"insert",
					{
						"characters": " sums"
					},
					"BQAAAPxqAAAAAAAA/WoAAAAAAAAAAAAA/WoAAAAAAAD+agAAAAAAAAAAAAD+agAAAAAAAP9qAAAAAAAAAAAAAP9qAAAAAAAAAGsAAAAAAAAAAAAAAGsAAAAAAAABawAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPxqAAAAAAAA/GoAAAAAAAAAAAAAAADwvw"
				],
				[
					610,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAAFrAAAAAAAAAmsAAAAAAAAAAAAAAmsAAAAAAAADawAAAAAAAAAAAAADawAAAAAAAARrAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAFrAAAAAAAAAWsAAAAAAAAAAAAAAADwvw"
				],
				[
					611,
					1,
					"insert",
					{
						"characters": " permutations"
					},
					"DQAAAARrAAAAAAAABWsAAAAAAAAAAAAABWsAAAAAAAAGawAAAAAAAAAAAAAGawAAAAAAAAdrAAAAAAAAAAAAAAdrAAAAAAAACGsAAAAAAAAAAAAACGsAAAAAAAAJawAAAAAAAAAAAAAJawAAAAAAAAprAAAAAAAAAAAAAAprAAAAAAAAC2sAAAAAAAAAAAAAC2sAAAAAAAAMawAAAAAAAAAAAAAMawAAAAAAAA1rAAAAAAAAAAAAAA1rAAAAAAAADmsAAAAAAAAAAAAADmsAAAAAAAAPawAAAAAAAAAAAAAPawAAAAAAABBrAAAAAAAAAAAAABBrAAAAAAAAEWsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAARrAAAAAAAABGsAAAAAAAAAAAAAAADwvw"
				],
				[
					612,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAABFrAAAAAAAAEmsAAAAAAAAAAAAAEmsAAAAAAAATawAAAAAAAAAAAAATawAAAAAAABRrAAAAAAAAAAAAABRrAAAAAAAAFWsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABFrAAAAAAAAEWsAAAAAAAAAAAAAAADwvw"
				],
				[
					613,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAABJrAAAAAAAAEmsAAAAAAAADAAAAYW5k",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABVrAAAAAAAAFWsAAAAAAAAAAAAAAADwvw"
				],
				[
					615,
					9,
					"left_delete",
					null,
					"CQAAAPZqAAAAAAAA9moAAAAAAAABAAAAIPVqAAAAAAAA9WoAAAAAAAABAAAAZvRqAAAAAAAA9GoAAAAAAAABAAAAb/NqAAAAAAAA82oAAAAAAAABAAAAIPJqAAAAAAAA8moAAAAAAAABAAAAc/FqAAAAAAAA8WoAAAAAAAABAAAAbfBqAAAAAAAA8GoAAAAAAAABAAAAcu9qAAAAAAAA72oAAAAAAAABAAAAZe5qAAAAAAAA7moAAAAAAAABAAAAdA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPdqAAAAAAAA92oAAAAAAAAAAAAAAADwvw"
				],
				[
					616,
					3,
					"left_delete",
					null,
					"AwAAAO1qAAAAAAAA7WoAAAAAAAABAAAAIOxqAAAAAAAA7GoAAAAAAAABAAAAbutqAAAAAAAA62oAAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO5qAAAAAAAA7moAAAAAAAAAAAAAAADwvw"
				],
				[
					617,
					1,
					"insert",
					{
						"characters": "give"
					},
					"BAAAAOtqAAAAAAAA7GoAAAAAAAAAAAAA7GoAAAAAAADtagAAAAAAAAAAAADtagAAAAAAAO5qAAAAAAAAAAAAAO5qAAAAAAAA72oAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOtqAAAAAAAA62oAAAAAAAAAAAAAAADwvw"
				],
				[
					618,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO9qAAAAAAAA8GoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO9qAAAAAAAA72oAAAAAAAAAAAAAAADwvw"
				],
				[
					619,
					1,
					"left_delete",
					null,
					"AQAAAO9qAAAAAAAA72oAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPBqAAAAAAAA8GoAAAAAAAAAAAAAAADwvw"
				],
				[
					620,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAO9qAAAAAAAA8GoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO9qAAAAAAAA72oAAAAAAAAAAAAAAADwvw"
				],
				[
					621,
					1,
					"insert",
					{
						"characters": " by"
					},
					"AwAAAPBqAAAAAAAA8WoAAAAAAAAAAAAA8WoAAAAAAADyagAAAAAAAAAAAADyagAAAAAAAPNqAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPBqAAAAAAAA8GoAAAAAAAAAAAAAAADwvw"
				],
				[
					622,
					1,
					"insert",
					{
						"characters": " analogues"
					},
					"CgAAAPNqAAAAAAAA9GoAAAAAAAAAAAAA9GoAAAAAAAD1agAAAAAAAAAAAAD1agAAAAAAAPZqAAAAAAAAAAAAAPZqAAAAAAAA92oAAAAAAAAAAAAA92oAAAAAAAD4agAAAAAAAAAAAAD4agAAAAAAAPlqAAAAAAAAAAAAAPlqAAAAAAAA+moAAAAAAAAAAAAA+moAAAAAAAD7agAAAAAAAAAAAAD7agAAAAAAAPxqAAAAAAAAAAAAAPxqAAAAAAAA/WoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPNqAAAAAAAA82oAAAAAAAAAAAAAAADwvw"
				],
				[
					623,
					1,
					"insert",
					{
						"characters": " o"
					},
					"AgAAAP1qAAAAAAAA/moAAAAAAAAAAAAA/moAAAAAAAD/agAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP1qAAAAAAAA/WoAAAAAAAAAAAAAAADwvw"
				],
				[
					624,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAP9qAAAAAAAAAGsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP9qAAAAAAAA/2oAAAAAAAAAAAAAAADwvw"
				],
				[
					625,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAABrAAAAAAAAAWsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAABrAAAAAAAAAGsAAAAAAAAAAAAAAADwvw"
				],
				[
					627,
					1,
					"insert",
					{
						"characters": "euivariant"
					},
					"CgAAAPRqAAAAAAAA9WoAAAAAAAAAAAAA9WoAAAAAAAD2agAAAAAAAAAAAAD2agAAAAAAAPdqAAAAAAAAAAAAAPdqAAAAAAAA+GoAAAAAAAAAAAAA+GoAAAAAAAD5agAAAAAAAAAAAAD5agAAAAAAAPpqAAAAAAAAAAAAAPpqAAAAAAAA+2oAAAAAAAAAAAAA+2oAAAAAAAD8agAAAAAAAAAAAAD8agAAAAAAAP1qAAAAAAAAAAAAAP1qAAAAAAAA/moAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPRqAAAAAAAA9GoAAAAAAAAAAAAAAADwvw"
				],
				[
					628,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP5qAAAAAAAA/2oAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP5qAAAAAAAA/moAAAAAAAAAAAAAAADwvw"
				],
				[
					634,
					1,
					"insert",
					{
						"characters": "q"
					},
					"AQAAAPVqAAAAAAAA9moAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPVqAAAAAAAA9WoAAAAAAAAAAAAAAADwvw"
				],
				[
					637,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAACdrAAAAAAAAKGsAAAAAAAAAAAAAKGsAAAAAAAApawAAAAAAAAAAAAApawAAAAAAACprAAAAAAAAAAAAACprAAAAAAAAK2sAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACdrAAAAAAAAJ2sAAAAAAAAAAAAAAADwvw"
				],
				[
					638,
					1,
					"insert",
					{
						"characters": " diagonal"
					},
					"CQAAACtrAAAAAAAALGsAAAAAAAAAAAAALGsAAAAAAAAtawAAAAAAAAAAAAAtawAAAAAAAC5rAAAAAAAAAAAAAC5rAAAAAAAAL2sAAAAAAAAAAAAAL2sAAAAAAAAwawAAAAAAAAAAAAAwawAAAAAAADFrAAAAAAAAAAAAADFrAAAAAAAAMmsAAAAAAAAAAAAAMmsAAAAAAAAzawAAAAAAAAAAAAAzawAAAAAAADRrAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACtrAAAAAAAAK2sAAAAAAAAAAAAAAADwvw"
				],
				[
					639,
					1,
					"insert",
					{
						"characters": " maps."
					},
					"BgAAADRrAAAAAAAANWsAAAAAAAAAAAAANWsAAAAAAAA2awAAAAAAAAAAAAA2awAAAAAAADdrAAAAAAAAAAAAADdrAAAAAAAAOGsAAAAAAAAAAAAAOGsAAAAAAAA5awAAAAAAAAAAAAA5awAAAAAAADprAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADRrAAAAAAAANGsAAAAAAAAAAAAAAADwvw"
				],
				[
					642,
					1,
					"left_delete",
					null,
					"AQAAADprAAAAAAAAOmsAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADtrAAAAAAAAO2sAAAAAAAAAAAAAAADwvw"
				],
				[
					643,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADprAAAAAAAAO2sAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADprAAAAAAAAOmsAAAAAAAAAAAAAAADwvw"
				],
				[
					646,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"BgAAAJJsAAAAAAAAlGwAAAAAAAAAAAAAPmwAAAAAAABAbAAAAAAAAAAAAAAObAAAAAAAABBsAAAAAAAAAAAAAH5rAAAAAAAAgGsAAAAAAAAAAAAAbGsAAAAAAABuawAAAAAAAAAAAAA+awAAAAAAAEBrAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ9sAAAAAAAAPGsAAAAAAAAAAAAAAADwvw"
				],
				[
					653,
					2,
					"left_delete",
					null,
					"AgAAAG6NAQAAAAAAbo0BAAAAAAAMAAAAUVFRIGhib3ggUVFRbY0BAAAAAABtjQEAAAAAAAEAAAAK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHqNAQAAAAAAbo0BAAAAAAAAAAAAAADwvw"
				],
				[
					675,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH4tAAAAAAAAfy0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4tAAAAAAAAfi0AAAAAAAAAAAAAAADwvw"
				],
				[
					676,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAH8tAAAAAAAAgS0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8tAAAAAAAAfy0AAAAAAAAAAAAAAADwvw"
				],
				[
					677,
					1,
					"insert",
					{
						"characters": "QQQ"
					},
					"AwAAAIAtAAAAAAAAgS0AAAAAAAAAAAAAgS0AAAAAAACCLQAAAAAAAAAAAACCLQAAAAAAAIMtAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIAtAAAAAAAAgC0AAAAAAAAAAAAAAADwvw"
				],
				[
					678,
					1,
					"insert",
					{
						"characters": " Currenlt"
					},
					"CQAAAIMtAAAAAAAAhC0AAAAAAAAAAAAAhC0AAAAAAACFLQAAAAAAAAAAAACFLQAAAAAAAIYtAAAAAAAAAAAAAIYtAAAAAAAAhy0AAAAAAAAAAAAAhy0AAAAAAACILQAAAAAAAAAAAACILQAAAAAAAIktAAAAAAAAAAAAAIktAAAAAAAAii0AAAAAAAAAAAAAii0AAAAAAACLLQAAAAAAAAAAAACLLQAAAAAAAIwtAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMtAAAAAAAAgy0AAAAAAAAAAAAAAADwvw"
				],
				[
					679,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAIwtAAAAAAAAjS0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwtAAAAAAAAjC0AAAAAAAAAAAAAAADwvw"
				],
				[
					680,
					1,
					"insert",
					{
						"characters": " no"
					},
					"AwAAAI0tAAAAAAAAji0AAAAAAAAAAAAAji0AAAAAAACPLQAAAAAAAAAAAACPLQAAAAAAAJAtAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0tAAAAAAAAjS0AAAAAAAAAAAAAAADwvw"
				],
				[
					681,
					4,
					"left_delete",
					null,
					"BAAAAI8tAAAAAAAAjy0AAAAAAAABAAAAb44tAAAAAAAAji0AAAAAAAABAAAAbo0tAAAAAAAAjS0AAAAAAAABAAAAIIwtAAAAAAAAjC0AAAAAAAABAAAAeQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJAtAAAAAAAAkC0AAAAAAAAAAAAAAADwvw"
				],
				[
					682,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAIQtAAAAAAAAhC0AAAAAAAAIAAAAQ3VycmVubHQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwtAAAAAAAAjC0AAAAAAAAAAAAAAADwvw"
				],
				[
					683,
					1,
					"insert",
					{
						"characters": "Not"
					},
					"AwAAAIQtAAAAAAAAhS0AAAAAAAAAAAAAhS0AAAAAAACGLQAAAAAAAAAAAACGLQAAAAAAAIctAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQtAAAAAAAAhC0AAAAAAAAAAAAAAADwvw"
				],
				[
					684,
					1,
					"insert",
					{
						"characters": " available"
					},
					"CgAAAIctAAAAAAAAiC0AAAAAAAAAAAAAiC0AAAAAAACJLQAAAAAAAAAAAACJLQAAAAAAAIotAAAAAAAAAAAAAIotAAAAAAAAiy0AAAAAAAAAAAAAiy0AAAAAAACMLQAAAAAAAAAAAACMLQAAAAAAAI0tAAAAAAAAAAAAAI0tAAAAAAAAji0AAAAAAAAAAAAAji0AAAAAAACPLQAAAAAAAAAAAACPLQAAAAAAAJAtAAAAAAAAAAAAAJAtAAAAAAAAkS0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIctAAAAAAAAhy0AAAAAAAAAAAAAAADwvw"
				],
				[
					685,
					1,
					"insert",
					{
						"characters": " online?"
					},
					"CAAAAJEtAAAAAAAAki0AAAAAAAAAAAAAki0AAAAAAACTLQAAAAAAAAAAAACTLQAAAAAAAJQtAAAAAAAAAAAAAJQtAAAAAAAAlS0AAAAAAAAAAAAAlS0AAAAAAACWLQAAAAAAAAAAAACWLQAAAAAAAJctAAAAAAAAAAAAAJctAAAAAAAAmC0AAAAAAAAAAAAAmC0AAAAAAACZLQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEtAAAAAAAAkS0AAAAAAAAAAAAAAADwvw"
				],
				[
					686,
					1,
					"insert",
					{
						"characters": " Have"
					},
					"BQAAAJktAAAAAAAAmi0AAAAAAAAAAAAAmi0AAAAAAACbLQAAAAAAAAAAAACbLQAAAAAAAJwtAAAAAAAAAAAAAJwtAAAAAAAAnS0AAAAAAAAAAAAAnS0AAAAAAACeLQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJktAAAAAAAAmS0AAAAAAAAAAAAAAADwvw"
				],
				[
					687,
					1,
					"insert",
					{
						"characters": " PDF"
					},
					"BAAAAJ4tAAAAAAAAny0AAAAAAAAAAAAAny0AAAAAAACgLQAAAAAAAAAAAACgLQAAAAAAAKEtAAAAAAAAAAAAAKEtAAAAAAAAoi0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ4tAAAAAAAAni0AAAAAAAAAAAAAAADwvw"
				],
				[
					688,
					1,
					"insert",
					{
						"characters": " saved."
					},
					"BwAAAKItAAAAAAAAoy0AAAAAAAAAAAAAoy0AAAAAAACkLQAAAAAAAAAAAACkLQAAAAAAAKUtAAAAAAAAAAAAAKUtAAAAAAAApi0AAAAAAAAAAAAApi0AAAAAAACnLQAAAAAAAAAAAACnLQAAAAAAAKgtAAAAAAAAAAAAAKgtAAAAAAAAqS0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKItAAAAAAAAoi0AAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "%!TEX root = ../operads_paper.tex\n\\section{Operads in the category of categories}\n % QQQ chapter title okay?\n % \t\\begin{itemize}\n % \t\t\\item operads in $\\bf{Cat}$\n % \t\t\\item $2$-categorical properties\n % \t\t\\item Borel construction and properties\n % \t\\end{itemize}\n\nQQQ Maybe rewrite.\nThis section will study those $\\ML$-operads for which each $P(n)$ is a category, and from here onwards any operad denoted $P$ is in $\\mb{Cat}$. The extra structure that this $2$-categorical setting provides allows us to consider notions of pseudoalgebras for an operad, as well as pseudomorphisms of operads. We investigate the properties of the associated $2$-monads and the $2$-categorical properties of operads in $\\mathbf{Cat}$, before describing the Borel construction for action operads. We later describe free $\\ML$-monoidal categories along with abstract properties of the Borel construction.\n\n\\subsection{Operads in \\texorpdfstring{$\\mb{Cat}$}{\\textbf{Cat}}}\\label{section:operads_in_Cat}\nWe have seen (\\cref{op=monad1}) that given any $\\ML$-operad $P$ there is an induced monad $\\underline{P} \\colon \\m{C} \\rightarrow \\m{C}$ and that the category of algebras for the operad $P$ is isomorphic to the category of algebras for the monad $\\underline{P}$, following \\cite{maygeom}. Now we are considering $\\ML$-operads in $\\mathbf{Cat}$, the induced monad associated to an operad of this sort can be shown to be a $2$-monad (see \\cite{KS} for background on $2$-monads) and we will proceed to show that the notions of pseudoalgebra for both the operad and the associated $2$-monad correspond precisely, i.e., there is an isomorphism of $2$-categories between the $2$-category with either strict or pseudo-level cells defined operadically and the $2$-category with either strict or pseudo-level cells defined $2$-monadically.\n\n\n\nThe associated monad $\\underline{P}$ acquires the structure of a $2$-functor as follows. We define $\\underline{P}$ on categories much like before as  the coproduct\n\t\\[\n\t\t\\underline{P}(X) = \\coprod_n P(n) \\times_{\\Lambda(n)} X^n,\n\t\\]\nwhose objects will be written as equivalence classes $[p;x_1,\\ldots,x_n]$ where $p \\in P(n)$ and each $x_i \\in X$, sometimes written as $[p;\\underline{x}]$ when there is no confusion. On functors we define $\\underline{P}$ in a similar way, exactly as with functions of sets. Given a natural transformation $\\alpha \\colon f \\Rightarrow g$ we define a new natural transformation $\\underline{P}(\\alpha)$ as follows. The component of $\\underline{P}(\\alpha)$ at the object\n\t\\[\n\t\t[p;x_1,\\ldots,x_n]\n\t\\]\nis given by the morphism\n\t\\[\n\t\t[1_p;\\alpha_{x_1},\\ldots,\\alpha_{x_n}]\n\t\\]\nin $\\underline{P}(X)$.\nIt is a simple observation that this constitutes a $2$-functor, and that the components of the unit and multiplication are functors and are $2$-natural.\n\n\\begin{rem}\nThe material in this section can be given a rather more abstract interpretation, in the sense of \\cite{KL97}. The idea here is that the category of $\\ML$-collections acts on the category $\\mathbf{Cat}$ via a functor $\\diamond \\colon \\ML\\text{-}\\mathbf{Coll} \\times \\mathbf{Cat} \\rightarrow \\mathbf{Cat}$ which sends $(P,X)$ to $\\underline{P}(X)$ as described above. Fixing a $\\ML$-collection $P$ produces an endofunctor $\\underline{P} \\colon \\mathbf{Cat} \\rightarrow \\mathbf{Cat}$ which is then a monad when $P$ is a $\\ML$-operad, just as monoids in $\\ML\\text{-}\\mathbf{Coll}$ are precisely $\\ML$-operads.\n\\end{rem}\n\n\nFirst we will set out some conventions and definitions.\n\\begin{conv}\\label{conv_coeq}\nWe will identify maps $\\alpha_n \\colon P(n) \\times_{\\Lambda(n)} X^n \\rightarrow X$ with maps $\\tilde{\\alpha}_n \\colon P(n) \\times X^n \\rightarrow X$ which are equivariant with respect to the $\\Lambda$-actions via the universal property of the coequalizer. The coequalizer in $\\mb{Cat}$ also has a $2$-dimensional aspect to its universal property, so that a natural transformation $\\Gamma \\colon \\alpha_{n} \\Rightarrow \\beta_{n}$ between functors as above determines and is determined by a transformation $\\tilde{\\Gamma} \\colon \\tilde{\\alpha}_{n} \\Rightarrow \\tilde{\\beta}_{n}$ with the property that the two possible whiskerings of $\\tilde{\\Gamma}$ with the two functors $P(n) \\times \\Lambda(n) \\times X^{n} \\rightarrow P(n) \\times X^{n}$ are equal.\n\nNote also that in the following definitions we will often write the composite\n    \\[\n        P(n) \\times \\prod_{i=1}^n \\left(P(k_i) \\times X^{k_i}\\right) \\rightarrow P(n) \\times \\prod_{i=1}^n P(k_i) \\times X^{\\Sigma k_i} \\xrightarrow{\\mu^P \\times 1} P(\\Sigma_{k_i}) \\times X^{\\Sigma k_i}\n    \\]\nsimply abbreviated as $\\mu^P \\times 1$. Furthermore, instead of using an element $\\id \\in P(1)$ as the operadic unit, we will now denote this as $\\eta^{P} \\colon 1 \\rightarrow P(1)$.\n\\end{conv}\n\nWe begin with the definitions of the pseudo-level cells in the operadic context, and after each specialize to the strict version.\n\n\\begin{Defi}\\label{def:ps-alg}\nLet $P$ be a $\\ML$-operad. A \\textit{pseudoalgebra} for $P$ consists of: \n    \\begin{itemize}\n        \\item a category $X$,\n        \\item a family of functors\n            \\[\n                \\left(\\alpha_n \\colon P(n) \\times_{\\Lambda(n)} X^n \\rightarrow X \\right)_{n \\in \\mathbb{N}},\n            \\]\n        \\item for each $n, k_1, \\ldots, k_n \\in \\mathbb{N}$, a natural isomorphism $\\phi_{k_1, \\ldots, k_n}$ (corresponding, via Conventions \\ref{conv_coeq}) to a natural isomorphism\n            \\[\n                \\xy\n                    (0,0)*+{\\scriptstyle P_n \\times \\prod_{i=1}^n \\left(P_{k_i} \\times X^{k_i}\\right)}=\"00\";\n                    (0,-10)*+{\\scriptstyle P_n \\times \\prod_{i=1}^n P_{k_i} \\times X^{\\Sigma k_i}}=\"01\";\n                    (0,-20)*+{\\scriptstyle P_{\\Sigma k_i} \\times X^{\\Sigma k_i}}=\"02\";\n                    (60,-20)*+{\\scriptstyle X}=\"12\";\n                    (60,0)*+{\\scriptstyle P_n \\times X^n}=\"11\";\n                    {\\ar_{} \"00\" ; \"01\"};\n                    {\\ar^{1 \\times \\prod \\tilde{\\alpha}_{k_i}} \"00\" ; \"11\"};\n                    {\\ar^{\\tilde{\\alpha}_n} \"11\" ; \"12\"};\n                    {\\ar_{\\mu^P \\times 1} \"01\" ; \"02\"};\n                    {\\ar_>>>>>>>>>>>>>>>>>>>{\\tilde{\\alpha}_{\\Sigma k_i}} \"02\" ; \"12\"};\n                    {\\ar@{=>}^{\\tilde{\\phi}_{k_1, \\ldots, k_n}} (30,-8) ; (30,-12)};\n                \\endxy\n            \\]\n\n               \\item and a natural isomorphism $\\phi_{\\eta}$ corresponding to a natural isomorphism\n            \\[\n                \\xy\n                    (0,0)*+{X}=\"00\";\n                    (0,-15)*+{1 \\times X}=\"x10\";\n                    (0,-30)*+{P(1) \\times X}=\"10\";\n                    (30,-30)*+{X}=\"11\";\n                    {\\ar_{\\eta^P \\times 1} \"x10\" ; \"10\"};\n                    {\\ar_{\\tilde{\\alpha}_1} \"10\" ; \"11\"};\n                    {\\ar^{1} \"00\" ; \"11\"};\n                    {\\ar_{\\cong} \"00\" ; \"x10\"};\n                    {\\ar@{=>}^{\\tilde{\\phi}_\\eta} (10,-18) ; (10,-22)};\n                \\endxy\n            \\]\n\n    \\end{itemize}\nsatisfying the following axioms.\n    \\begin{itemize}\n        \\item For all $n, k_i, m_{ij} \\in \\mathbb{N}$, the following equality of pasting diagrams holds.\n            \\[\n                \\xy\n                    (0,0)*+{\\scriptstyle P_n \\times \\prod_i\\left(P_{k_i} \\times \\prod_j \\left(P_{m_{ij}} \\times X^{m_{ij}}\\right)\\right)}=\"00\";\n                    (60,0)*+{\\scriptstyle P_n \\times \\prod_i \\left(P_{k_i} \\times X^{k_i}\\right)}=\"10\";\n                    (0,-30)*+{\\scriptstyle P_{\\Sigma k_i} \\times \\prod_i\\prod_j\\left(P_{m_{ij}} \\times X^{m_{ij}}\\right)}=\"02\";\n                    (30,-50)*+{\\scriptstyle P_{\\Sigma\\Sigma m_{ij}} \\times X^{\\Sigma \\Sigma m_{ij}}}=\"04\";\n                    (80,-20)*+{\\scriptstyle P_n \\times X^n}=\"12\";\n                    (80,-50)*+{\\scriptstyle X}=\"14\";\n                    {\\ar^>>>>>>>>>>>>>>{1 \\times \\prod\\left(1 \\times \\prod \\tilde{\\alpha}_{m_ij}\\right)} \"00\" ; \"10\"};\n                    {\\ar^{1 \\times \\prod \\tilde{\\alpha}_{k_i}} \"10\" ; \"12\"};\n                    {\\ar^{\\tilde{\\alpha}_n} \"12\" ; \"14\"};\n                    {\\ar_{\\mu^P \\times 1} \"00\" ; \"02\"};\n                    {\\ar_{\\mu^P \\times 1} \"02\" ; \"04\"};\n                    {\\ar_{\\tilde{\\alpha}_{\\Sigma\\Sigma m_{ij}}} \"04\" ; \"14\"};\n                    (30,-20)*+{\\scriptstyle P_n \\times \\prod_i\\left(P_{\\Sigma m_{ij}} \\times X^{\\Sigma m_{ij}}\\right)}=\"22\";\n                    {\\ar^{\\mu^P \\times 1} \"00\" ; \"22\"};\n                    {\\ar^{1 \\times \\prod \\tilde{\\alpha}_{\\Sigma m_{ij}}} \"22\" ; \"12\"};\n                    {\\ar^{\\mu^P \\times 1} \"22\" ; \"04\"};\n                    (0,-70)*+{\\scriptstyle P_n \\times \\prod_i\\left(P_{k_i} \\times \\prod_j \\left(P_{m_{ij}} \\times X^{m_{ij}}\\right)\\right)}=\"b00\";\n                    (50,-70)*+{\\scriptstyle P_n \\times \\prod_i \\left(P_{k_i} \\times X^{k_i}\\right)}=\"b10\";\n                    (0,-100)*+{\\scriptstyle P_{\\Sigma k_i} \\times \\prod_i\\prod_j\\left(P_{m_{ij}} \\times X^{m_{ij}}\\right)}=\"b02\";\n                    (20,-120)*+{\\scriptstyle P_{\\Sigma\\Sigma m_{ij}} \\times X^{\\Sigma \\Sigma m_{ij}}}=\"b04\";\n                    (80,-90)*+{\\scriptstyle P_n \\times X^n}=\"b12\";\n                    (80,-120)*+{\\scriptstyle X}=\"b14\";\n                    {\\ar^>>>>>>>>>{1 \\times \\prod\\left(1 \\times \\prod \\tilde{\\alpha}_{m_ij}\\right)} \"b00\" ; \"b10\"};\n                    {\\ar^{1 \\times \\prod \\tilde{\\alpha}_{k_i}} \"b10\" ; \"b12\"};\n                    {\\ar^{\\tilde{\\alpha}_n} \"b12\" ; \"b14\"};\n                    {\\ar_{\\mu^P \\times 1} \"b00\" ; \"b02\"};\n                    {\\ar_{\\mu^P \\times 1} \"b02\" ; \"b04\"};\n                    {\\ar_{\\tilde{\\alpha}_{\\Sigma\\Sigma m_{ij}}} \"b04\" ; \"b14\"};\n                    (50,-100)*+{\\scriptstyle P_{\\Sigma k_i} \\times X^{\\Sigma k_i}}=\"b22\";\n                    {\\ar_{\\mu^P \\times 1} \"b10\" ; \"b22\"};\n                    {\\ar^>>>>>>>>>>>>>>>>{1 \\times \\prod\\prod \\tilde{\\alpha}_{m_{ij}}} \"b02\" ; \"b22\"};\n                    {\\ar^{\\tilde{\\alpha}_{\\Sigma k_i}} \"b22\" ; \"b14\"};\n                    {\\ar@{=>}^{1 \\times \\prod_i \\tilde{\\phi}_{m_{i1}, \\ldots, m_{ik_{i}}}} (35,-8) ; (35,-12)};\n                    {\\ar@{=>}^{\\tilde{\\phi}_{\\Sigma m_{1j}, \\ldots, \\Sigma m_{nj}}} (50,-33) ; (50,-37)};\n                    {\\ar@{=>}^{\\tilde{\\phi}_{k_1,\\ldots,k_n}} (60,-92) ; (60,-96)};\n                    {\\ar@{=>}^{\\tilde{\\phi}_{m_{11}, \\ldots, m_{nk_n}}} (30,-108) ; (30,-112)};\n                    {\\ar@{=} (45,-58) ; (45,-62)};\n                \\endxy\n            \\]\n\n%Redraw in tikzpicture\n        \\item Each pasting diagram of the following form is an identity.\n            \\[\n                \\xy\n                    (0,0)*+{P_n \\times X^n}=\"00\";\n                    (12,-12)*+{P_n \\times (1 \\times X)^n}=\"11\";\n                    (24,-24)*+{P_n \\times (P_1 \\times X)^n}=\"22\";\n                    (60,-24)*+{P_n \\times X^n}=\"32\";\n                    (60,-48)*+{X}=\"34\";\n                    (24,-36)*+{P_n \\times P_1^n \\times X^n}=\"23\";\n                    (24,-48)*+{P_n \\times X^n}=\"24\";\n                    {\\ar@/^2.5pc/^{1} \"00\" ; \"32\"};\n                    {\\ar^{\\tilde{\\alpha}_n} \"32\" ; \"34\"};\n                    {\\ar^{\\cong} \"00\" ; \"11\"};\n                    {\\ar^>>>{1 \\times \\left(\\eta^P \\times 1\\right)^n} \"11\" ; \"22\"};\n                    {\\ar^>>>>>>{1 \\times \\tilde{\\alpha}_1^n} \"22\" ; \"32\"};\n                    {\\ar@/_3pc/_{1} \"00\" ; \"24\"};\n                    {\\ar_{\\cong} \"22\" ; \"23\"};\n                    {\\ar_{\\mu^P \\times 1} \"23\" ; \"24\"};\n                    {\\ar_{\\tilde{\\alpha}_n} \"24\" ; \"34\"};\n                    {\\ar@{=>}^{1 \\times \\tilde{\\phi}_\\eta^n} (32,-8) ; (32,-12)};\n                    {\\ar@{=>}^{\\tilde{\\phi}_{1,\\ldots,1}} (40,-34) ; (40,-38)};\n                \\endxy\n            \\]\n    \\end{itemize}\n\n\\end{Defi}\n\n\\begin{rem}\n  The requirement in \\cref{def:ps-alg} of a natural isomorphism $\\varphi_\\eta$ is to induce a natural isomorphism $\\tilde{\\varphi}_\\eta$. This requirement is really of a natural isomorphism\n    \\[\n      \\xy\n        (0,0)*+{1 \\times_{\\Lambda(1)} X}=\"a\";\n        (0,-20)*+{P(1) \\times_{\\Lambda(1)} X}=\"b\";\n        (25,-20)*+{X}=\"c\";\n        %\n        {\\ar_{\\eta^P \\times_{\\Lambda(1)} \\id} \"a\" ; \"b\"};\n        {\\ar_<<<<<{\\alpha_1} \"b\" ; \"c\"};\n        {\\ar \"a\" ; \"c\"};\n        %\n        {\\ar@{=>}^{\\varphi_\\eta} (10,-11) ; (7,-14)};\n      \\endxy\n    \\]\n  where $1 \\times_{\\Lambda(1)} X$ is the coequalizer of the trivial right action of $\\Lambda(1)$ on $1$ and the usual left action of $\\Lambda(1)$ on $X$. This induces a natural isomorphism\n    \\[\n      \\xy\n        (0,0)*+{1 \\times X}=\"a\";\n        (0,-20)*+{P(1) \\times X}=\"b\";\n        (25,-20)*+{X}=\"c\";\n        %\n        {\\ar_{\\eta^P \\times \\id} \"a\" ; \"b\"};\n        {\\ar_<<<<<<{\\tilde{\\alpha}_1} \"b\" ; \"c\"};\n        {\\ar \"a\" ; \"c\"};\n        %\n        {\\ar@{=>}^{\\tilde{\\varphi}_\\eta} (10,-11) ; (7,-14)};\n      \\endxy\n    \\]\n  which can be whiskered with the isomorphism $X \\rightarrow 1 \\times X$. We make the convention of referring to this whiskered natural isomorphism as $\\tilde{\\varphi}_\\eta$, since no confusion will arise in practice.\n\\end{rem}\n\n\\begin{Defi}\nLet $P$ be a $\\ML$-operad. A \\textit{strict algebra} for $P$ consists of a pseudoalgebra in which all of the isomorphisms $\\phi$ are identities.\n\\end{Defi}\n\n\\begin{Defi}\\label{def:ps-morph}\nLet $(X, \\alpha_n,\\phi,\\phi_\\eta)$ and $(Y, \\beta_n,\\psi,\\psi_{\\eta})$ be pseudoalgebras for a $\\ML$-operad $P$. A \\textit{pseudomorphism} of $P$-pseudoalgebras consists of: \n    \\begin{itemize}\n        \\item a functor $f \\colon X \\rightarrow Y$\n        \\item for each $n \\in \\mathbb{N}$, a natural isomorphism $f_n$ (corresponding, via Conventions \\ref{conv_coeq}) to a natural isomorphism\n            \\[\n                \\xy\n                    (0,0)*+{P_n \\times X^n}=\"00\";\n                    (20,0)*+{X}=\"10\";\n                    (0,-15)*+{P_n \\times Y^n}=\"01\";\n                    (20,-15)*+{Y}=\"11\";\n                    {\\ar^>>>>>{\\tilde{\\alpha}_n} \"00\" ; \"10\"};\n                    {\\ar^{f} \"10\" ; \"11\"};\n                    {\\ar_{1 \\times f^n} \"00\" ; \"01\"};\n                    {\\ar_>>>>>{\\tilde{\\beta}_n} \"01\" ; \"11\"};\n                    {\\ar@{=>}^{\\overline{f}_n} (10,-5.5) ; (10,-9.5)};\n                \\endxy\n            \\]\n\n        \\end{itemize}\nsatisfying the following axioms.\n    \\begin{itemize}\n        \\item The following equality of pasting diagrams holds.\n            \\[\n                \\xy\n                    (0,0)*+{\\scriptstyle P_n \\times \\prod_i (P_{k_i} \\times X^{k_i})}=\"00\";\n                    (50,0)*+{\\scriptstyle P_n \\times \\prod_i (P_{k_i} \\times Y^{k_i})}=\"10\";\n                    (0,-25)*+{\\scriptstyle P_{\\Sigma k_i} \\times X^{\\Sigma k_i}}=\"01\";\n                    (50,-25)*+{\\scriptstyle P_{\\Sigma k_i} \\times Y^{\\Sigma k_i}}=\"11\";\n                    (75,-15)*{\\scriptstyle P_n \\times Y^n}=\"21\";\n                    (75,-40)*+{\\scriptstyle Y}=\"22\";\n                    (25,-40)*+{\\scriptstyle X}=\"02\";\n                    {\\ar^{1 \\times \\prod(1 \\times f^{k_i})} \"00\" ; \"10\"};\n                    {\\ar^{1 \\times \\prod \\tilde{\\beta}_{k_i}} \"10\" ; \"21\"};\n                    {\\ar_{\\mu^P \\times 1} \"00\" ; \"01\"};\n                    {\\ar_{\\tilde{\\alpha}_{\\Sigma k_i}} \"01\" ; \"02\"};\n                    {\\ar_{f} \"02\" ; \"22\"};\n                    {\\ar^{1 \\times f^{\\Sigma k_i}} \"01\" ; \"11\"};\n                    {\\ar_{\\tilde{\\beta}_{\\Sigma k_i}} \"11\" ; \"22\"};\n                    {\\ar_{\\mu^P \\times 1} \"10\" ; \"11\"};\n                    {\\ar^{\\tilde{\\beta}_n} \"21\" ; \"22\"};\n                    {\\ar@{=>}^{\\overline{f}_n} (37.5,-30.5) ; (37.5,-34.5)};\n                    {\\ar@{=>}^{\\tilde{\\psi}_{k_1,\\ldots,k_n}} (57.5,-16.5) ; (57.5,-20.5)};\n                    (0,-55)*+{\\scriptstyle P_n \\times \\prod_i (P_{k_i} \\times X^{k_i})}=\"b00\";\n                    (50,-55)*+{\\scriptstyle P_n \\times \\prod_i (P_{k_i} \\times Y^{k_i})}=\"b10\";\n                    (0,-80)*+{\\scriptstyle P_{\\Sigma k_i} \\times X^{\\Sigma k_i}}=\"b01\";\n                    (25,-70)*+{\\scriptstyle P_n \\times X^n}=\"b11\";\n                    (75,-70)*{\\scriptstyle P_n \\times Y^n}=\"b21\";\n                    (75,-95)*+{\\scriptstyle Y}=\"b22\";\n                    (25,-95)*+{\\scriptstyle X}=\"b02\";\n                    {\\ar^{1 \\times \\prod(1 \\times f^{k_i})} \"b00\" ; \"b10\"};\n                    {\\ar^{1 \\times \\prod \\tilde{\\beta}_{k_i}} \"b10\" ; \"b21\"};\n                    {\\ar_{\\mu^P \\times 1} \"b00\" ; \"b01\"};\n                    {\\ar_{\\tilde{\\alpha}_{\\Sigma k_i}} \"b01\" ; \"b02\"};\n                    {\\ar_{f} \"b02\" ; \"b22\"};\n                    {\\ar^{\\tilde{\\beta}_n} \"b21\" ; \"b22\"};\n                    {\\ar^{1 \\times \\prod \\tilde{\\alpha}_{k_i}} \"b00\" ; \"b11\"};\n                    {\\ar^{1 \\times f^n} \"b11\" ; \"b21\"};\n                    {\\ar_{\\tilde{\\alpha}_n} \"b11\" ; \"b02\"};\n                    {\\ar@{=>}^{\\overline{f}_n} (50,-80.5) ; (50,-84.5)};\n                    {\\ar@{=>}^{1 \\times \\prod\\overline{f}_{k_i}} (37.5,-60.5) ; (37.5,-64.5)};\n                    {\\ar@{=>}^{\\tilde{\\phi}_{k_1,\\ldots,k_n}} (9,-72) ; (9,-76)};\n                    {\\ar@{=} (37.5,-45.5) ; (37.5,-49.5)};\n                \\endxy\n            \\]\n            \\item The following equality of pasting diagrams holds.\n                \\[\n                    \\xy\n                        (0,0)*+{X}=\"00\";\n                        (20,0)*+{Y}=\"10\";\n                        (0,-15)*+{1 \\times X}=\"01\";\n                        (20,-15)*+{1 \\times Y}=\"11\";\n                        (0,-30)*+{P_1 \\times X}=\"02\";\n                        (20,-30)*+{P_1 \\times Y}=\"12\";\n                        (20,-45)*+{X}=\"r02\";\n                        (40,-45)*+{Y}=\"r12\";\n                        {\\ar^{f} \"00\" ; \"10\"};\n                        {\\ar@/^2pc/^{1} \"10\" ; \"r12\"};\n                        {\\ar_{\\cong} \"00\" ; \"01\"};\n                        {\\ar_{\\eta^P \\times 1} \"01\" ; \"02\"};\n                        {\\ar_{\\tilde{\\alpha}_1} \"02\" ; \"r02\"};\n                        {\\ar^{1 \\times f} \"01\" ; \"11\"};\n                        {\\ar^{1 \\times f} \"02\" ; \"12\"};\n                        {\\ar^{\\tilde{\\beta}_1} \"12\" ; \"r12\"};\n                        {\\ar_{\\cong} \"10\" ; \"11\"};\n                        {\\ar_{\\eta^P \\times 1} \"11\" ; \"12\"};\n                        {\\ar_{f} \"r02\" ; \"r12\"};\n                        {\\ar@{=>}^{\\overline{f}_1} (20,-35.5) ; (20,-39.5)};\n                        {\\ar@{=>}^{\\tilde{\\psi}_{\\eta}} (30,-20) ; (30,-24)};\n                        (60,0)*+{X}=\"x00\";\n                        (80,0)*+{Y}=\"x10\";\n                        (60,-15)*+{1 \\times X}=\"x01\";\n                        (60,-30)*+{P_1 \\times X}=\"x02\";\n                        (80,-45)*+{X}=\"xr02\";\n                        (100,-45)*+{Y}=\"xr12\";\n                        {\\ar^{f} \"x00\" ; \"x10\"};\n                        {\\ar@/^2pc/^{1} \"x10\" ; \"xr12\"};\n                        {\\ar_{\\cong} \"x00\" ; \"x01\"};\n                        {\\ar_{\\eta^P \\times 1} \"x01\" ; \"x02\"};\n                        {\\ar_{\\tilde{\\alpha}_1} \"x02\" ; \"xr02\"};\n                        {\\ar_{f} \"xr02\" ; \"xr12\"};\n                        {\\ar@/^2pc/^{1} \"x00\" ; \"xr02\"};\n                        {\\ar@{=>}^{\\tilde{\\phi}_\\eta} (70,-20) ; (70,-24)};\n                        {\\ar@{=} (45,-22.5) ; (49,-22.5)};\n                    \\endxy\n                \\]\n    \\end{itemize}\n\\end{Defi}\n\n\\begin{Defi}\nLet $(X, \\alpha_n,\\phi,\\phi_\\eta)$ and $(Y, \\beta_n,\\psi,\\psi_{\\eta})$ be pseudoalgebras for a $\\ML$-operad $P$. A \\textit{strict morphism} of $P$-pseudoalgebras consists of a pseudomorphism in which all of the isomorphisms $\\overline{f}_{n}$ are identities.\n\\end{Defi}\n\n\\begin{rem}\nA strict algebra for a $\\ML$-operad $P$ in $\\mb{Cat}$ is precisely the same thing as an algebra for $P$ considered as an operad in the \\textit{category} of small categories and functors. A strict morphism between strict algebras is then just a map of $P$-algebras in the standard sense. We could also consider the notion of a lax algebra for an operad, or a lax morphism of algebras, simply by considering natural transformations in place of isomorphisms in the definitions.\n\nIn \\cref{def:ps-morph} of a pseudomorphism we did not originally make it clear that the isomorphisms $\\overline{f}_n$ should satisfy an equivariance condition. This was highlighted in remarks on (QQQ Check numeric references to published version and our definition/theorem of pseudocommutativity) Definition 2.21 in the thesis of Rubin \\cite{rubin-thesis}. Similarly, this is also explicity stated as Definition 2.23 of \\cite{guillou_symmetric}, as mentioned in \\cite{guillou_multiplicative}. That we don't include an explicit equivariance axiom is due to Conventions \\ref{conv_coeq}. In \\cref{def:ps-morph} we require the existence of natural isomorphisms $f_n$ in order to induce corresponding natural isomorphisms $\\overline{f}_n$. That the $\\overline{f}_n$ are induced by the $f_n$ corresponds to the fact that the $\\overline{f}_n$ satisfy an equivariance condition, namely that for $(\\sigma, g, x_1, \\ldots, x_n) \\in P(n) \\times \\Lambda(n) \\times X^n$, we have\n  \\[\n    \\left(\\overline{f}_n\\right)_{\\left(\\sigma \\cdot g, x_1, \\ldots, x_n\\right)} = \\left(\\overline{f}_n\\right)_{\\left(\\sigma,x_{\\pi(g)^{-1}(1)},\\ldots,x_{\\pi(g)^{-1}(n)}\\right)}.\n  \\]\n\\end{rem}\n\n\\begin{Defi}\nLet $P$ be a $\\ML$-operad and let $f, g \\colon (X, \\alpha, \\phi, \\phi_\\eta) \\rightarrow (Y, \\beta, \\psi, \\psi_\\eta)$ be pseudomorphisms of $P$-pseudoalgebras. A \\textit{$P$-transformation} is then a natural transformation $\\gamma \\colon f \\Rightarrow g$ such that the following equality of pasting diagrams holds, for all $n$.\n    \\[\n        \\xy\n            (0,0)*+{P_n \\times X^n}=\"00\";\n            (30,0)*+{P_n \\times Y^n}=\"10\";\n            (0,-20)*+{X}=\"01\";\n            (30,-20)*+{Y}=\"11\";\n            {\\ar@/^1.5pc/^{1 \\times f^n} \"00\" ; \"10\"};\n            {\\ar_{1 \\times g^n} \"00\" ; \"10\"};\n            {\\ar^{\\tilde{\\beta}_n} \"10\" ; \"11\"};\n            {\\ar_{\\tilde{\\alpha}_n} \"00\" ; \"01\"};\n            {\\ar_{g} \"01\" ; \"11\"};\n            {\\ar@{=>}^{1 \\times \\gamma^n} (13.5,5.5) ; (13.5,1.5)};\n            {\\ar@{=>}^{\\overline{g}_n} (13.5,-8) ; (13.5,-12)};\n            (60,0)*+{P_n \\times X^n}=\"x00\";\n            (90,0)*+{P_n \\times Y^n}=\"x10\";\n            (60,-20)*+{X}=\"x01\";\n            (90,-20)*+{Y}=\"x11\";\n            {\\ar^{1 \\times f^n} \"x00\" ; \"x10\"};\n            {\\ar^{\\tilde{\\beta}_n} \"x10\" ; \"x11\"};\n            {\\ar_{\\tilde{\\alpha}_n} \"x00\" ; \"x01\"};\n            {\\ar^{f} \"x01\" ; \"x11\"};\n            {\\ar@/_1.5pc/_{g} \"x01\" ; \"x11\"};\n            {\\ar@{=>}^{\\gamma} (75,-21.5) ; (75,-25.5)};\n            {\\ar@{=>}^{\\overline{f}_n} (75,-8) ; (75,-12)};\n            {\\ar@{=} (42.75,-10) ; (46.75,-10)};\n        \\endxy\n    \\]\n\\end{Defi}\n\nWe can form various $2$-categories using these cells.\n\n\\begin{Defi}\nLet $P$ be a $\\ML$-operad.\n\\begin{itemize}\n\\item The $2$-category $P\\mbox{-}\\mb{Alg}_{s}$ consists of strict $P$-algebras, strict morphisms, and $P$-transformations.\n\\item The $2$-category $\\mb{Ps}\\mbox{-}P\\mbox{-}\\mb{Alg}$ consists of $P$-pseudoalgebras, pseudomorphisms, and $P$-transformations.\n\\end{itemize}\n\\end{Defi}\n\nWe also have the corresponding $2$-monadic definitions, which we give for completeness. We state these for any $2$-category $\\m{K}$, as specializing to $\\mb{Cat}$ does not simplify them in any way.\n\n\\begin{Defi}\nLet $T \\colon \\m{K} \\rightarrow \\m{K}$ be a $2$-monad. A $T$-\\textit{pseudoalgebra} consists of an object $X$, a $1$-cell $\\alpha \\colon TX \\rightarrow X$, and invertible $2$-cells\n    \\[\n        \\xy\n            (0,0)*+{T^2X}=\"00\";\n            (20,0)*+{TX}=\"10\";\n            (0,-15)*+{TX}=\"01\";\n            (20,-15)*+{X}=\"11\";\n            {\\ar^{T\\alpha} \"00\" ; \"10\"};\n            {\\ar^{\\alpha} \"10\" ; \"11\"};\n            {\\ar_{\\mu_X} \"00\" ;  \"01\"};\n            {\\ar_{\\alpha} \"01\" ; \"11\"};\n            {\\ar@{=>}^{\\Phi} (10,-5.5) ; (10,-9.5)};\n            (40,0)*+{X}=\"20\";\n            (52.5,-15)*+{TX}=\"31\";\n            (72.5,-15)*+{X}=\"41\";\n            {\\ar_{\\eta_X} \"20\" ; \"31\"};\n            {\\ar_{\\alpha} \"31\" ; \"41\"};\n            {\\ar@/^1.5pc/^{1_X} \"20\" ; \"41\"};\n            {\\ar@{=>}^{\\Phi_{\\eta}} (54.5,-5.5) ; (54.5,-9.5)};\n        \\endxy\n    \\]\n\nsatisfying the following axioms.\n    \\begin{itemize}\n        \\item The following equality of pasting diagrams holds.\n    \\[\n        \\xy\n            (5,0)*+{T^3X}=\"t3xl\";\n            (29,0)*+{T^2X}=\"t2xl1\";\n            (5,-17.5)*+{T^2X}=\"t2xl2\";\n            (24,-35)*+{TX}=\"txl1\";\n            (48,-17.5)*+{TX}=\"txl2\";\n            (48,-35)*+{X}=\"xl\";\n            (24,-17.5)*+{T^2X}=\"t2xl3\";\n            {\\ar^{T^2\\alpha} \"t3xl\" ; \"t2xl1\"};\n            {\\ar^{T\\alpha} \"t2xl1\" ; \"txl2\"};\n            {\\ar^{\\alpha} \"txl2\" ; \"xl\"};\n            {\\ar_{\\mu_{TX}} \"t3xl\" ; \"t2xl2\"};\n            {\\ar_{\\mu_X} \"t2xl2\" ; \"txl1\"};\n            {\\ar_{\\alpha} \"txl1\" ; \"xl\"};\n            {\\ar_{T\\mu_X} \"t3xl\" ; \"t2xl3\"};\n            {\\ar^{T\\alpha} \"t2xl3\" ; \"txl2\"};\n            {\\ar_{\\mu_X} \"t2xl3\" ; \"txl1\"};\n            {\\ar@{=>}_{T\\Phi} (26,-6) ; (26,-10)};\n            {\\ar@{=>}^{\\Phi} (36,-24) ; (36,-28)};\n            (64,0)*+{T^3X}=\"t3xr\";\n            (88,0)*+{T^2X}=\"t2xr1\";\n            (64,-17.5)*+{T^2X}=\"t2xr2\";\n            (83,-35)*+{TX}=\"txr1\";\n            (107,-17.5)*+{TX}=\"txr2\";\n            (107,-35)*+{X}=\"xr\";\n            (88,-17.5)*+{TX}=\"txr3\";\n            {\\ar^{T^2\\alpha} \"t3xr\" ; \"t2xr1\"};\n            {\\ar^{T\\alpha} \"t2xr1\" ; \"txr2\"};\n            {\\ar^{\\alpha} \"txr2\" ; \"xr\"};\n            {\\ar_{\\mu_{TX}} \"t3xr\" ; \"t2xr2\"};\n            {\\ar_{\\mu_X} \"t2xr2\" ; \"txr1\"};\n            {\\ar_{\\alpha} \"txr1\" ; \"xr\"};\n            {\\ar_{T\\alpha} \"t2xr2\" ; \"txr3\"};\n            {\\ar_{\\alpha} \"txr3\" ; \"xr\"};\n            {\\ar_{\\mu_X} \"t2xr1\" ; \"txr3\"};\n            {\\ar@{=>}_{\\Phi} (98,-15) ; (98,-19)};\n            {\\ar@{=>}^{\\Phi} (85,-24) ; (85,-28)};\n            {\\ar@{=} (54,-20) ; (56,-20)};\n        \\endxy\n    \\]\n\n    \\item The following pasting diagram is an identity.\n    \\[\n        \\xy\n            (0,0)*+{TX}=\"txl1\";\n            (15,-15)*+{T^2X}=\"t2x\";\n            (15,-30)*+{TX}=\"txl2\";\n            (35,-15)*+{TX}=\"txl3\";\n            (35,-30)*+{X}=\"xl\";\n            {\\ar@/^1.7pc/^{1_{TX}} \"txl1\" ; \"txl3\"};\n            {\\ar@/_1.7pc/_{1_{TX}} \"txl1\" ; \"txl2\"};\n            {\\ar_{T\\eta_X} \"txl1\" ; \"t2x\"};\n            {\\ar^{T\\alpha} \"t2x\" ; \"txl3\"};\n            {\\ar_{\\mu_X} \"t2x\" ; \"txl2\"};\n            {\\ar_{\\alpha} \"txl2\" ; \"xl\"};\n            {\\ar^{\\alpha} \"txl3\" ; \"xl\"};\n            {\\ar@{=>}^{T\\Phi_\\eta} (17,-5.5) ; (17,-9.5)};\n            {\\ar@{=>}^{\\Phi} (25,-20.5) ; (25,-24.5)};\n        \\endxy\n    \\]\n\n    \\end{itemize}\n\\end{Defi}\n\n\\begin{Defi}\nLet $T \\colon \\m{K} \\rightarrow \\m{K}$ be a $2$-monad. A \\textit{strict $T$-algebra} consists of a pseudoalgebra in which all of the isomorphisms $\\Phi$ are identities.\n\\end{Defi}\n\n\\begin{Defi}\nLet $T$ be a $2$-monad and let $(X,\\alpha,\\Phi,\\Phi_\\eta)$, $(Y,\\beta,\\Psi,\\Psi_\\eta)$ be $T$-pseudoalgebras. A \\textit{pseudomorphism} $(f, \\bar{f})$ between these pseudoalgebras consists of a $1$-cell $f \\colon X \\rightarrow Y$ along with an invertible $2$-cell\n    \\[\n        \\xy\n            (0,0)*+{TX}=\"00\";\n            (20,0)*+{TY}=\"10\";\n            (0,-15)*+{X}=\"01\";\n            (20,-15)*+{Y}=\"11\";\n            {\\ar^{Tf} \"00\" ; \"10\"};\n            {\\ar^{\\beta} \"10\" ; \"11\"};\n            {\\ar_{\\alpha} \"00\" ; \"01\"};\n            {\\ar_{f} \"01\" ; \"11\"};\n            {\\ar@{=>}^{\\bar{f}} (10,-5.5) ; (10,-9.5)};\n        \\endxy\n    \\]\n\nsatisfying the following axioms.\n    \\begin{itemize}\n        \\item The following equality of pasting diagrams holds.\n                \\[\n        \\xy\n            (5,0)*+{T^2X}=\"t3xl\";\n            (29,0)*+{T^2Y}=\"t2xl1\";\n            (5,-17.5)*+{TX}=\"t2xl2\";\n            (24,-35)*+{TX}=\"txl1\";\n            (48,-17.5)*+{TY}=\"txl2\";\n            (48,-35)*+{Y}=\"xl\";\n            (24,-17.5)*+{TX}=\"t2xl3\";\n            {\\ar^{T^2f} \"t3xl\" ; \"t2xl1\"};\n            {\\ar^{T\\beta} \"t2xl1\" ; \"txl2\"};\n            {\\ar^{\\beta} \"txl2\" ; \"xl\"};\n            {\\ar_{\\mu_X} \"t3xl\" ; \"t2xl2\"};\n            {\\ar_{\\alpha} \"t2xl2\" ; \"txl1\"};\n            {\\ar_{f} \"txl1\" ; \"xl\"};\n            {\\ar^{T\\alpha} \"t3xl\" ; \"t2xl3\"};\n            {\\ar^{Tf} \"t2xl3\" ; \"txl2\"};\n            {\\ar_{\\alpha} \"t2xl3\" ; \"txl1\"};\n            {\\ar@{=>}^{T\\bar{f}} (24,-6) ; (24,-10)};\n            {\\ar@{=>}^{\\bar{f}} (36,-24) ; (36,-28)};\n            {\\ar@{=>}^{\\Phi} (13.5,-15.5) ; (13.5,-19.5)};\n            (64,0)*+{T^2X}=\"t3xr\";\n            (88,0)*+{T^2Y}=\"t2xr1\";\n            (64,-17.5)*+{TX}=\"t2xr2\";\n            (83,-35)*+{TX}=\"txr1\";\n            (107,-17.5)*+{TY}=\"txr2\";\n            (107,-35)*+{Y}=\"xr\";\n            (88,-17.5)*+{TX}=\"txr3\";\n            {\\ar^{T^2f} \"t3xr\" ; \"t2xr1\"};\n            {\\ar^{T\\beta} \"t2xr1\" ; \"txr2\"};\n            {\\ar^{\\beta} \"txr2\" ; \"xr\"};\n            {\\ar_{\\mu_{X}} \"t3xr\" ; \"t2xr2\"};\n            {\\ar_{\\alpha} \"t2xr2\" ; \"txr1\"};\n            {\\ar_{f} \"txr1\" ; \"xr\"};\n            {\\ar_{Tf} \"t2xr2\" ; \"txr3\"};\n            {\\ar_{\\beta} \"txr3\" ; \"xr\"};\n            {\\ar_{\\mu_Y} \"t2xr1\" ; \"txr3\"};\n            {\\ar@{=>}_{\\Psi} (98,-15) ; (98,-19)};\n            {\\ar@{=>}^{\\bar{f}} (85,-24) ; (85,-28)};\n            {\\ar@{=} (54,-20) ; (56,-20)};\n        \\endxy\n    \\]\n    %redraw with tikzpicture\n    \\item The following equality of pasting diagrams holds.\n            \\[\n                        \\xy\n            (0,0)*+{X}=\"00\";\n            (20,0)*+{Y}=\"10\";\n            (0,-20)*+{TX}=\"01\";\n            (20,-20)*+{TY}=\"11\";\n            (10,-35)*+{X}=\"02\";\n            (30,-35)*+{Y}=\"12\";\n            {\\ar^{f} \"00\" ; \"10\"};\n            {\\ar@/^1.5pc/^{1_Y} \"10\" ; \"12\"};\n            {\\ar_{\\eta_X} \"00\" ; \"01\"};\n            {\\ar_{\\eta_Y} \"10\" ; \"11\"};\n            {\\ar_{Tf} \"01\" ; \"11\"};\n            {\\ar_{\\alpha} \"01\" ; \"02\"};\n            {\\ar_{f} \"02\" ; \"12\"};\n            {\\ar^{\\beta} \"11\" ; \"12\"};\n            {\\ar@{=>}^{\\bar{f}} (15,-25.5) ; (15,-29.5)};\n            {\\ar@{=>}^{\\Psi_{\\eta}} (25,-17) ; (25,-21)};\n            (50,0)*+{X}=\"30\";\n            (70,0)*+{Y}=\"40\";\n            (50,-20)*+{TX}=\"31\";\n            (60,-35)*+{X}=\"32\";\n            (80,-35)*+{Y}=\"42\";\n            {\\ar^{f} \"30\" ; \"40\"};\n            {\\ar_{\\eta_X} \"30\" ; \"31\"};\n            {\\ar_{\\alpha} \"31\" ; \"32\"};\n            {\\ar_{f} \"32\" ; \"42\"};\n            {\\ar@/^1.5pc/^{1_X} \"30\" ; \"32\"};\n            {\\ar@/^1.5pc/^{1_Y} \"40\" ; \"42\"};\n            {\\ar@{=>}^{\\Phi_{\\eta}} (55,-17) ; (55,-21)};\n        \\endxy\n        \\]\n        %redraw with tikzpicture\n\n\\end{itemize}\n\\end{Defi}\n\n\\begin{Defi}\nLet $T$ be a $2$-monad and let $(X,\\alpha,\\Phi,\\Phi_\\eta)$, $(Y,\\beta,\\Psi,\\Psi_\\eta)$ be $T$-pseudoalgebras. A \\textit{strict morphism} $(f, \\bar{f})$ consists of a pseudomorphism in which $\\bar{f}$ is an identity.\n\\end{Defi}\n\n\\begin{rem}\nOnce again, the strict algebras and strict morphisms are exactly the same as algebras and morphisms for the underlying monad on the underlying category of $\\m{K}$.\n\\end{rem}\n\n\\begin{Defi}\nLet $(f, \\overline{f}), (g, \\overline{g}) \\colon X \\rightarrow Y$ be pseudomorphisms of $T$-algebras. A \\textit{$T$-transformation} consists of a $2$-cell $\\gamma \\colon f \\Rightarrow g$ such that the following equality of pasting diagrams holds.\n    \\[\n        \\xy\n            (0,0)*+{TX}=\"00\";\n            (30,0)*+{TY}=\"10\";\n            (0,-20)*+{X}=\"01\";\n            (30,-20)*+{Y}=\"11\";\n            {\\ar@/^1.5pc/^{Tf} \"00\" ; \"10\"};\n            {\\ar_{Tg} \"00\" ; \"10\"};\n            {\\ar^{\\beta} \"10\" ; \"11\"};\n            {\\ar_{\\alpha} \"00\" ; \"01\"};\n            {\\ar_{g} \"01\" ; \"11\"};\n            {\\ar@{=>}^{T \\gamma} (13.5,5.5) ; (13.5,1.5)};\n            {\\ar@{=>}^{\\overline{g}} (13.5,-8) ; (13.5,-12)};\n            (60,0)*+{TX}=\"x00\";\n            (90,0)*+{TY}=\"x10\";\n            (60,-20)*+{X}=\"x01\";\n            (90,-20)*+{Y}=\"x11\";\n            {\\ar^{Tf} \"x00\" ; \"x10\"};\n            {\\ar^{\\beta} \"x10\" ; \"x11\"};\n            {\\ar_{\\alpha} \"x00\" ; \"x01\"};\n            {\\ar^{f} \"x01\" ; \"x11\"};\n            {\\ar@/_1.5pc/_{g} \"x01\" ; \"x11\"};\n            {\\ar@{=>}^{\\gamma} (75,-21.5) ; (75,-25.5)};\n            {\\ar@{=>}^{\\overline{f}} (75,-8) ; (75,-12)};\n            {\\ar@{=} (42.75,-10) ; (46.75,-10)};\n        \\endxy\n    \\]\n    %redraw with tikzpicture\n\n\\end{Defi}\n\nOnce again, we have $2$-categories defined using the different kinds of cells.\n\n\\begin{Defi}\nLet $T$ be a $2$-monad.\n\\begin{itemize}\n\\item The $2$-category $T\\mbox{-}\\mb{Alg}_{s}$ consists of strict $T$-algebras, strict morphisms, and $T$-transformations.\n\\item The $2$-category $\\mb{Ps}\\mbox{-}T\\mbox{-}\\mb{Alg}$ consists of $T$-pseudoalgebras, pseudomorphisms, and $T$-transformations.\n\\end{itemize}\n\\end{Defi}\n\nOur main result in this section is the following, showing that one can consider algebras and higher cells, in either strict or pseudo strength, using either the operadic or $2$-monadic incarnation of a $\\ML$-operad $P$. This extends \\cref{op=monad1}.\n\n\\begin{thm}\nLet $P$ be a $\\ML$-operad in $\\mb{Cat}$.\n\\begin{itemize}\n\\item There is an isomorphism of $2$-categories\n    \\[\n        P\\mbox{-}\\mb{Alg}_{s} \\cong \\underline{P}\\mbox{-}\\mb{Alg}_{s}.\n    \\]\n\\item There is an isomorphism of $2$-categories\n    \\[\n        \\mb{Ps}\\mbox{-}P\\mbox{-}\\mb{Alg} \\cong \\mb{Ps}\\mbox{-}\\underline{P}\\mbox{-}\\mb{Alg}\n    \\]\n    extending the one above.\n\\end{itemize}\n\\end{thm}\n\\begin{proof}\nWe begin by noting that we suppress the difference between $2$-cells $\\Gamma$ and those $\\tilde{\\Gamma}$ as in Conventions \\ref{conv_coeq}, implicitly always using $2$-cells defined on a coequalizer which are appropriately equivariant with respect to the group actions involved.\n\nA proof of the first statement follows from our proof of the second by inserting identities where appropriate. Thus we begin by constructing a $2$-functor $R \\colon \\mb{Ps}\\mbox{-}\\underline{P}\\mbox{-}\\mb{Alg} \\rightarrow \\mb{Ps}\\mbox{-}P\\mbox{-}\\mb{Alg}$. We map a $\\underline{P}$-pseudoalgebra $(X,\\alpha,\\Phi,\\Phi_\\eta)$ to the following $P$-pseudoalgebra on the same category $X$. First we define the functor $\\alpha_n$ to be the composite\n    \\[\n        \\xy\n            (0,0)*+{\\alpha_n \\colon P(n) \\times_{\\Lambda(n)} X^n}=\"00\";\n            (35,0)*+{\\underline{P}(X)}=\"10\";\n            (55,0)*+{X.}=\"20\";\n            {\\ar@{^{(}->} \"00\" ; \"10\"};\n            {\\ar^{\\alpha} \"10\" ; \"20\"};\n        \\endxy\n    \\]\nThe isomorphisms $\\phi_{k_1,\\ldots,k_n}$ are defined using $\\Phi$ as in the following diagram\n\n\t\\[\n\t\t\\xy\n\t\t\t(-10,0)*+{\\scriptstyle P_n \\times \\prod_{i=1}^n\\left(P_{k_i} \\times X^{k_i}\\right)}=\"00\";\n           \t(30,0)*+{\\scriptstyle P_n \\times \\prod_i \\left( P_{k_i} \\times_{\\Lambda_{k_i}} X^{k_i} \\right)}=\"10\";\n            (60,0)*+{\\scriptstyle P_n \\times \\underline{P}(X)^n}=\"20\";\n            (90,0)*+{\\scriptstyle P_n \\times X^n}=\"30\";\n            (-10,-20)*+{\\scriptstyle P_n \\times \\prod_{i} P_{k_i} \\times X^{\\Sigma k_I}}=\"01\";\n            (-10,-40)*+{\\scriptstyle P_{\\Sigma k_i} \\times X^{\\Sigma k_{i}}}=\"02\";\n            (60,-10)*+{\\scriptstyle P_n \\times_{\\Lambda_n} \\underline{P}(X)^n}=\"21\";\n            (60,-20)*+{\\scriptstyle \\underline{P}^2(X)}=\"22\";\n            (90,-10)*+{\\scriptstyle P_n \\times_{\\Lambda_n} X^n}=\"31\";\n            (90,-20)*+{\\scriptstyle \\underline{P}(X)}=\"32\";\n            (30,-40)*+{\\scriptstyle P_{\\Sigma k_i} \\times_{\\Lambda_{\\Sigma k_i}} X^{\\Sigma k_i}}=\"12\";\n            (60,-40)*+{\\scriptstyle \\underline{P}(X)}=\"23\";\n            (90,-40)*+{\\scriptstyle X}=\"33\";\n            {\\ar \"00\" ; \"10\"};\n            {\\ar \"00\" ; \"01\"};\n            {\\ar_{\\mu^P \\times 1} \"01\" ; \"02\"};\n            {\\ar@{^{(}->} \"10\" ; \"20\"};\n            {\\ar \"20\" ; \"21\"};\n            {\\ar^{1 \\times \\alpha^n} \"20\" ; \"30\"};\n            {\\ar \"30\" ; \"31\"};\n            {\\ar@{^{(}->} \"21\" ; \"22\"};\n            {\\ar^{\\underline{P}\\alpha} \"22\" ; \"32\"};\n            {\\ar@{^{(}->} \"31\" ; \"32\"};\n            {\\ar_{\\mu_X} \"22\" ; \"23\"};\n            {\\ar_{\\alpha} \"23\" ; \"33\"};\n            {\\ar^{\\alpha} \"32\" ; \"33\"};\n            {\\ar \"02\" ; \"12\"};\n            {\\ar@{^{(}->} \"12\" ; \"23\"};\n            {\\ar@{=>}^{\\Phi} (75,-28) ; (75,-32)};\n        \\endxy\n    \\]\n\nwhilst $\\Phi_\\eta$ is simply sent to itself, since the composition of $\\alpha$ with the composite of the coequalizer and inclusion map from $P(1) \\times X$ into $\\underline{P}(X)$ is just $\\tilde{\\alpha_1}$. Checking the axioms here is most easily done on components and it can easily seen that the axioms required of this data to be a $P$-pseudoalgebra are precisely those that they satisfy by virtue of $X$ being a $\\underline{P}$-pseudoalgebra.\n\nFor a $1$-cell $(f,\\overline{f}) \\colon (X, \\alpha) \\rightarrow (Y, \\beta)$, we send $f$ to itself whilst sending $\\overline{f}$ to the obvious family of isomorphisms, as follows.\n    \\[\n        \\xy\n            (-30,0)*+{P(n) \\times X^n}=\"-10\";\n            (-30,-15)*+{P(n) \\times Y^n}=\"-11\";\n            (0,0)*+{P(n) \\times_{\\Lambda(n)} X^n}=\"00\";\n            (30,0)*+{\\underline{P}(X)}=\"10\";\n            (60,0)*+{X}=\"20\";\n            (0,-15)*+{P(n) \\times_{\\Lambda(n)} Y^n}=\"01\";\n            (30,-15)*+{\\underline{P}(Y)}=\"11\";\n            (60,-15)*+{Y}=\"21\";\n            {\\ar@{^{(}->} \"00\" ; \"10\"};\n            {\\ar^{\\alpha} \"10\" ; \"20\"};\n            {\\ar_{1 \\times f^n} \"00\" ; \"01\"};\n            {\\ar_{\\underline{P}f} \"10\" ; \"11\"};\n            {\\ar^{f} \"20\" ; \"21\"};\n            {\\ar@{^{(}->} \"01\" ; \"11\"};\n            {\\ar_{\\beta} \"11\" ; \"21\"};\n            {\\ar \"-10\" ; \"00\"};\n            {\\ar \"-11\" ; \"01\"};\n            {\\ar_{1 \\times f^n} \"-10\" ; \"-11\"};\n            {\\ar@{=>}^{\\overline{f}} (45,-5.5) ; (45,-9.5)};\n        \\endxy\n    \\]\n\nIt is easy to check that the above data satisfy the axioms for being a pseudomorphism of $P$-pseudoalgebras, following from the axioms for $(f,\\overline{f})$ being a pseudomorphism of $\\underline{P}$-pseudoalgebras. A $\\underline{P}$-transformation $\\gamma \\colon (f, \\bar{f}) \\Rightarrow (g, \\bar{g})$ immediately gives a $P$-transformation $\\bar{\\gamma}$ between the families of isomorphisms we previously defined, with the components of $\\bar{\\gamma}$ being precisely those of $\\gamma$. It is then easily shown that $R$ is a $2$-functor.\n\nFor there to be an isomorphism of $2$-categories, we require an inverse to $R$, namely a $2$-functor $S \\colon \\mb{Ps}\\mbox{-}P\\mbox{-}\\mb{Alg} \\rightarrow \\mb{Ps}\\mbox{-}\\underline{P}\\mbox{-}\\mb{Alg}$. Now assume that $(X, \\alpha_n, \\phi_{\\underline{k}_i}, \\phi_\\eta)$ is a $P$-pseudoalgebra. We will give the same object $X$ a $\\underline{P}$-pseudoalgebra structure. We can induce a functor $\\alpha \\colon \\underline{P}(X) \\rightarrow X$ by using the universal property of the coproduct.\n    \\[\n        \\xy\n            (-30,0)*+{P(n) \\times X^n}=\"-10\";\n            (0,0)*+{P(n) \\times_{\\Lambda(n)} X^n}=\"00\";\n            (30,0)*+{\\underline{P}(X)}=\"10\";\n            (30,-15)*+{X}=\"11\";\n            {\\ar \"-10\" ; \"00\"};\n            {\\ar^{\\alpha_n} \"00\" ; \"11\"};\n            {\\ar@{^{(}->} \"00\" ; \"10\"};\n            {\\ar^{\\exists ! \\alpha} \"10\" ; \"11\"};\n            {\\ar_{\\tilde{\\alpha}_n} \"-10\" ; \"11\"};\n        \\endxy\n    \\]\n\nOf course, this can be induced using either $\\alpha_n$ or $\\tilde{\\alpha}_n$, each giving the same functor $\\alpha$ by uniqueness. The components of the isomorphism $\\Phi \\colon \\alpha \\circ \\underline{P}(\\alpha) \\Rightarrow \\alpha \\circ \\mu_X$ can be given as follows. Let $\\left|\\underline{x}_i\\right|$ denote the number of objects in the list $\\underline{x}_i$. Then define the component of $\\Phi$ at the object\n    \\[\n        \\left[p;\\left[q_1;\\underline{x}_1\\right],\\ldots,\\left[q_n;\\underline{x}_n\\right]\\right]\n    \\]\nto be the component of $\\phi_{\\left|\\underline{x}_1\\right|, \\ldots, |\\underline{x}_n|}$ at the same object. To make this clearer, consider the object $[p;[q_1;x_{11}],[q_2;x_{21},x_{22}],[q_3;x_{31}]]$. The component of $\\Phi$ at this object is given by the component of $\\phi_{1,2,1}$ at the same object. The isomorphism $\\phi_\\eta$ is again sent to itself.\n\nNow given a $1$-cell $f$ with structure $2$-cells $\\overline{f}_n$ we define a $1$-cell $(F,\\overline{F})$ with underlying $1$-cell $f$ and structure $2$-cell $\\overline{F}$ with components\n    \\[\n        \\overline{F}_{[p;x_1, \\ldots, x_n]} := \\left(\\overline{f}_{n}\\right)_{(p;x_1,\\ldots,x_n)}.\n    \\]\nFor example, the component of $\\overline{F}$ at the object $[p;x_1,x_2,x_3]$ would be the component of $f_3$ at the object $(p;x_1,x_2,x_3)$.\n\nThe mapping for $2$-cells is just the identity as before. These mappings again constitute a $2$-functor in the obvious way and from how they are defined it is also clear that this is an inverse to $R$.\n\\end{proof}\n\n\\begin{rem}\nAnother interpretation of pseudoalgebras can be given in terms of pseudomorphisms of operads. Algebras for an operad $P$ can be identified with a morphism of operads $F \\colon P \\rightarrow \\mathcal{E}_X$, where $\\mathcal{E}_X$ is the endomorphism operad (\\cref{endoalg}). We can similarly define pseudomorphisms for a $\\mathbf{Cat}$-enriched $\\ML$-operad and identify pseudoalgebras with pseudomorphisms into the endomorphism operad.\n\nIf $P$, $Q$ are $\\ML$-operads then a \\textit{pseudomorphism} of $\\ML$-operads $F \\colon P \\rightarrow Q$ consists of a family of $\\ML$-equivariant functors\n            \\[\n                \\left(F_n \\colon P(n) \\rightarrow Q(n)\\right)_{n \\in \\mathbb{N}}\n            \\]\ntogether with isomorphisms instead of the standard algebra axioms. For example, the associativity isomorphism has the following form.\n            \\[\n                \\xy\n                    (0,0)*+{\\scriptstyle P(n) \\times \\prod_i P(k_i)}=\"00\";\n                    (35,0)*+{\\scriptstyle Q(n) \\times \\prod_i Q(k_i)}=\"10\";\n                    (0,-15)*+{\\scriptstyle P(\\Sigma k_i)}=\"01\";\n                    (35,-15)*+{\\scriptstyle Q(\\Sigma k_i)}=\"11\";\n                    {\\ar^{F_n \\times \\prod_i F_{k_i}} \"00\" ; \"10\"};\n                    {\\ar^{\\mu^Q} \"10\" ; \"11\"};\n                    {\\ar_{\\mu^P} \"00\" ; \"01\"};\n                    {\\ar_{F_{\\Sigma k_i}} \"01\" ; \"11\"};\n                    {\\ar@{=>}^{\\psi_{k_1,\\ldots,k_n}} (15,-5.5) ; (15,-9.5)};\n                \\endxy\n            \\]\n\nThese isomorphisms are then required to satisfy their own axioms, and these ensure that we have a weak map of $2$-monads $\\underline{P} \\Rightarrow \\underline{Q}$. In particular, one can show that a pseudomorphism from $P$ into the endomorphism operad $\\mathcal{E}_X$ produces pseudoalgebras for the operad $P$ using the closed structure on $\\mb{Cat}$. While abstractly pleasing, we do not pursue this argument any further here.\n\\end{rem}\n\n\\subsection{$2$-categorical properties of operads in \\texorpdfstring{$\\mb{Cat}$}{\\textbf{Cat}}}\\label{sec:propofopsincat}\n\nThis section will be concerned with characterizing various properties of those $2$-monads induced by $\\ML$-operads in $\\mb{Cat}$. We first show that these $2$-monads are finitary. Second, we show that the coherence theorem in \\cite{lack-cod} applies to all such $2$-monads and allows us to show that each pseudo-$\\underline{P}$-algebra is equivalent to a strict $\\underline{P}$-algebra (and so similarly, by our previous results, to the pseudoalgebras for a $\\ML$-operad $P$). Both of these results are simple extensions of well-known results about operads. Finally, we give conditions for these $2$-monads to be $2$-cartesian, describing how they interact with certain limits, namely $2$-pullbacks. Operads do not always yield $2$-cartesian $2$-monads, and giving a complete characterization of when they do is more involved than our results on accessibility or coherence.\n\n For a $2$-monad $T$, the $2$-categories $\\mb{Ps}\\mbox{-}T\\mbox{-}\\mb{Alg}$ (of pseudoalgebras and weak morphisms) and $T\\mbox{-}\\mb{Alg}_s$ (of strict algebras and strict morphisms) are of particular interest. The behavior of colimits in both of these $2$-categories can often be deduced from properties of $T$, the most common being that $T$ is finitary. In practice, one thinks of a finitary monad as one in which all operations take finitely many inputs as variables. If $T$ is finitary, then $T\\mbox{-}\\mb{Alg}_s$ will be cocomplete by standard results given in \\cite{BKP}. There are additional results of a purely $2$-dimensional nature concerning finitary $2$-monads, detailed in \\cite{lack-cod} and extending those in \\cite{BKP}, namely the existence of a left adjoint\n    \\[\n        \\mb{Ps}\\mbox{-}T\\mbox{-}\\mb{Alg} \\rightarrow T\\mbox{-}\\mb{Alg}_s\n    \\]\nto the forgetful $2$-functor which regards a strict algebra as a pseudoalgebra with identity structure isomorphisms.\n\nWe begin by showing each associated $2$-monad is finitary.\n\\begin{prop}\nLet $P$ be a $\\ML$-operad. Then $\\underline{P}$ is finitary.\n\\end{prop}\n\\begin{proof}\nTo show that $\\underline{P}$ is finitary we must show that it preserves filtered colimits or, equivalently, that it preserves directed colimits (see \\cite{ar}). Consider some directed colimit, $\\text{colim}X_{i}$ say, in $\\mathbf{Cat}$. Then consider the following sequence of isomorphisms:\n    \\begin{align*}\n      \\underline{P}(\\text{colim}X_{i}) &= \\coprod_n P(n) \\times_{\\Lambda(n)} (\\text{colim}X_{i})^n \\\\\n      &\\cong \\coprod_n P(n) \\times_{\\Lambda(n)} \\text{colim}(X_{i}^n) \\\\\n      &\\cong \\coprod_n \\text{colim}(P(n) \\times_{\\Lambda(n)} X_{i}^n) \\\\\n      &\\cong \\text{colim}\\coprod_n P(n) \\times_{\\Lambda(n)} X_{i}^n \\\\\n      &= \\text{colim}\\underline{P}(X_{i}).\n    \\end{align*}\nSince $\\mathbf{Cat}$ is locally finitely presentable then directed colimits commute with finite limits, giving the first isomorphism. The second isomorphism follows from this fact as well as that colimits commute with coequalizers. The third isomorphism is simply coproducts commuting with other colimits.\n\\end{proof}\n\nThe next part of this section is motivated by the issue of coherence. At its most basic, a coherence theorem is a way of describing when a notion of weaker structure is in some way equivalent to a stricter structure. The prototypical case here is the coherence theorem for monoidal categories. In a monoidal category we require associator isomorphisms\n    \\[\n        \\left( A \\otimes B \\right) \\otimes C \\cong A \\otimes \\left( B \\otimes C \\right)\n    \\]\nfor all objects in the category. The coherence theorem tells us that, for any monoidal category $M$, there exists a strict monoidal category which is equivalent to $M$. In other words, we can treat the associators in $M$ as identities, and similarly for the unit isomorphisms.\n\nThe abstract approach to coherence considers when the pseudoalgebras for a $2$-monad $T$ are equivalent to strict $T$-algebras, with the most comprehensive account appearing in \\cite{lack-cod}. Lack gives a general theorem which provides sufficient conditions for the existence of a left adjoint to the forgetful $2$-functor\n    \\[\n        U \\colon T\\mbox{-}\\mb{Alg}_s \\rightarrow \\mb{Ps}\\mbox{-}T\\mbox{-}\\mb{Alg}\n    \\]\nfor which the components of the unit of the adjunction are equivalences. We focus on one version of this general result which has hypotheses that are quite easy to check in practice. First we require that the base $2$-category $\\mathcal{K}$ has an enhanced factorization system. This is much like an orthogonal factorization system on a $2$-category, consisting of two classes of maps $(\\mathcal{L},\\mathcal{R})$, satisfying the lifting properties on $1$-cells and $2$-cells as follows. Given a commutative square\n     \\[\n        \\xy\n            (0,0)*+{A}=\"00\";\n            (15,0)*+{C}=\"10\";\n            (0,-15)*+{B}=\"01\";\n            (15,-15)*+{D}=\"11\";\n            {\\ar^{f} \"00\" ; \"10\"};\n            {\\ar^{r} \"10\" ; \"11\"};\n            {\\ar_{l} \"00\" ; \"01\"};\n            {\\ar_{g} \"01\" ; \"11\"};\n        \\endxy\n     \\]\n\nwhere $l \\in \\m{L}$ and $r \\in {R}$, there exists a unique morphism $m \\colon B \\rightarrow C$ such that $rm = g$ and $ml = f$. Similarly, given two commuting squares for which $rf = gl$ and $rf' = f'l$, along with $2$-cells $\\delta \\colon f \\Rightarrow f'$ and $\\gamma \\colon g \\Rightarrow g'$ for which $\\gamma \\ast 1_l = 1_r \\ast \\delta$, there exists a unique $2$-cell $\\mu \\colon m \\Rightarrow m'$, where $m$ and $m'$ are induced by the $1$-cell lifting property, satisfying $\\mu \\ast 1_l = \\delta$ and $1_r \\ast \\mu = \\gamma$. However, there is an additional $2$-dimensional property of the factorization system which says that given maps $l \\in \\m{L}$, $r \\in \\m{R}$ and an invertible $2$-cell $\\alpha \\colon rf \\Rightarrow gl$\n    \\[\n        \\xy\n            (0,0)*+{A}=\"00\";\n            (15,0)*+{C}=\"10\";\n            (0,-15)*+{B}=\"01\";\n            (15,-15)*+{D}=\"11\";\n            {\\ar^{f} \"00\" ; \"10\"};\n            {\\ar^{r} \"10\" ; \"11\"};\n            {\\ar_{l} \"00\" ; \"01\"};\n            {\\ar_{g} \"01\" ; \"11\"};\n            {\\ar@{=>}^{\\alpha} (9.375,-5.625) ; (5.625,-9.375)};\n            (22.5,-7.5)*+{=};\n            (30,0)*+{A}=\"20\";\n            (45,0)*+{C}=\"30\";\n            (30,-15)*+{B}=\"21\";\n            (45,-15)*+{D}=\"31\";\n            {\\ar^{f} \"20\" ; \"30\"};\n            {\\ar^{r} \"30\" ; \"31\"};\n            {\\ar_{l} \"20\" ; \"21\"};\n            {\\ar_{g} \"21\" ; \"31\"};\n            {\\ar^{m} \"21\" ; \"30\"};\n            {\\ar@{=>}^{\\beta} (41,-8) ; (38,-12)};\n        \\endxy\n    \\]\n\nthere exists a unique pair $(m,\\beta)$ where $m \\colon B \\rightarrow C$ is a $1$-cell and $\\beta \\colon rm \\Rightarrow g$ is an invertible $2$-cell such that $ml = f$ and $\\beta \\ast 1_{l} = \\alpha$.\n\nFurther conditions require that $T$ preserve $\\mathcal{L}$ maps and that whenever $r \\in \\mathcal{R}$ and $rk \\cong 1$, then $kr \\cong 1$. In our case we are considering $2$-monads on the $2$-category $\\mathbf{Cat}$, which has the enhanced factorization system where $\\m{L}$ consists of bijective-on-objects functors and $\\m{R}$ is given by the full and faithful functors. This, along with the $2$-dimensional property making it an enhanced factorization system, is described in \\cite{power-gen}. The last stated condition, involving isomorphisms and maps in $\\m{R}$, is then clearly satisfied and so the only thing we need to check in order to satisfy the conditions of the coherence result are that the induced $2$-monads $\\underline{P}$ preserve bijective-on-objects functors, which follows simply from the fact that the set of objects functor, $\\ob \\colon \\mb{Cat} \\rightarrow \\mb{Set}$, preserves colimits, being left adjoint to the indiscrete category functor, $E \\colon \\mb{Set} \\rightarrow \\mb{Cat}$, as described in \\cref{symmoncor}.\n\n\\begin{prop}\nFor any $\\ML$-operad $P$, the $2$-monad $\\underline{P}$ preserves bijective-on-objects functors.\n\\end{prop}\n\\begin{cor}\nEvery pseudo-$\\underline{P}$-algebra is equivalent to a strict $\\underline{P}$-algebra.\n\\end{cor}\n\n\n\nWe finally turn to a discussion of the interaction between operads and pullbacks. The monads arising from a non-symmetric operad are always cartesian, as described in \\cite{leinster}. The monads that arise from symmetric operads, however, are not always cartesian and so it is useful to be able to characterize exactly when they are. An example of where this fails is the symmetric operad for which the algebras are commutative monoids. In the case of $2$-monads we can consider the  strict $2$-limit analogous to the pullback, the $2$-pullback, and characterize when the induced $2$-monad from a $\\ML$-operad is $2$-cartesian, as we now describe.\n\n\\begin{Defi}\nA $2$-monad $T \\colon \\mathcal{K} \\rightarrow \\mathcal{K}$ is said to be \\textit{$2$-cartesian} if\n    \\begin{itemize}\n        \\item the $2$-category $\\mathcal{K}$ has $2$-pullbacks,\n        \\item the functor $T$ preserves $2$-pullbacks, and\n        \\item the naturality squares for the unit and multiplication of the $2$-monad are $2$-pullbacks.\n    \\end{itemize}\n\\end{Defi}\n\nIt is important to note that the  $2$-pullback of a diagram is actually the same as the ordinary pullback in $\\mb{Cat}$, see \\cite{kelly-elem}. Since we will be computing with coequalizers of the form $A \\times_{\\Lambda} B$ repeatedly, we give the following useful lemma.\n\n\\begin{lem}\\label{coeq-lem}\nLet $G$ be a group and let $A$, $B$ be categories for which $A$ has a right action by $G$ and $B$ has a left action by $G$. An action of $G$ on the product $A \\times B$ can then be defined by\n    \\[\n        (a,b) \\cdot g \\colon = \\left(a \\cdot g, g^{-1} \\cdot b\\right).\n    \\]\nIf this action of $G$ on $A \\times B$ is free, then the category $(A \\times B)/G$, consisting of the equivalence classes of this action, is isomorphic to the coequalizer $A \\times_G B$.\n\\end{lem}\n\\begin{proof}\nThe category $A \\times_G B$ is defined as the coequalizer\n    \\[\n        \\xy\n            (0,0)*+{A \\times G \\times B}=\"00\";\n            (30,0)*+{A \\times B}=\"10\";\n            (60,0)*+{A \\times_G B}=\"20\";\n            {\\ar@<1ex>^{\\lambda} \"00\" ; \"10\"};\n            {\\ar@<-1ex>_{\\rho} \"00\" ; \"10\"};\n            {\\ar^{\\varepsilon} \"10\" ; \"20\"};\n        \\endxy\n    \\]\nwhere $\\lambda(a,g,b) = (a \\cdot g, b)$ and $\\rho(a,g,b) = (a, g \\cdot b)$. However, the map $A \\times B \\rightarrow (A \\times B)/G$, sending $(a,b)$ to the equivalence class $[a,b] = [a \\cdot g, g^{-1} \\cdot b]$, also coequalizes $\\lambda$ and $\\rho$ since\n    \\[\n        [a \\cdot g, b] = \\left[(a \\cdot g) \\cdot g^{-1}, g \\cdot b\\right] = [a, g \\cdot b].\n    \\]\n\nGiven any other category $X$ and a functor $\\chi \\colon A \\times B \\rightarrow X$ which coequalizes $\\lambda$ and $\\rho$, we define a functor $\\phi \\colon (A \\times B)/G \\rightarrow X$ by $\\phi[a,b] = \\chi(a,b)$. That this is well-defined is clear, since\n    \\[\n        \\phi\\left[a \\cdot g, g^{-1} \\cdot b\\right] = \\chi\\left(a \\cdot g, g^{-1} \\cdot b\\right) = \\chi\\left(a \\cdot \\left(gg^{-1}\\right), b\\right) = \\chi(a, b) = \\phi[a,b].\n    \\]\nThis is also unique and so we find that $(A \\times B)/G$ satisfies the universal property of the coequalizer.\n\\end{proof}\n\nWe begin our study of the cartesian property in the context of symmetric operads.\n\n\\begin{prop}\\label{cart_unit}\nLet $P$ be a symmetric operad. Then the unit $\\eta \\colon \\id \\Rightarrow \\underline{P}$ for the associated monad is a cartesian transformation.\n\\end{prop}\n\\begin{proof}\nIn order to show that $\\eta$ is cartesian, we must prove that for a functor $f \\colon X \\rightarrow Y$, the pullback of the following diagram is the category $X$.\n\t\\[\n\t\t\\xy\n\t\t\t(40,0)*+{Y}=\"10\";\n\t\t\t(0,-15)*+{\\coprod P(n) \\times_{\\Sigma_n} X^n}=\"01\";\n\t\t\t(40,-15)*+{\\coprod P(n) \\times_{\\Sigma_n} Y^n}=\"11\";\n\t\t\t{\\ar^{\\eta_Y} \"10\" ; \"11\"};\n\t\t\t{\\ar_{\\underline{P}(f)} \"01\" ; \"11\"};\n\t\t\\endxy\n\t\\]\nThe pullback of this diagram is isomorphic to the coproduct of the pullbacks of diagrams of the following form.\n\\[\n\t\t\\xy\n\t\t\t(30,0)*+{Y}=\"10\";\n\t\t\t(0,-15)*+{P(1) \\times X}=\"01\";\n\t\t\t(30,-15)*+{P(1) \\times Y}=\"11\";\n\t\t\t{\\ar^{} \"10\" ; \"11\"};\n\t\t\t{\\ar_{1 \\times f} \"01\" ; \"11\"};\n\t\t\t% (45,-7.5)*{};\n\t\t\t(90,0)*+{\\emptyset}=\"60\";\n\t\t\t(60,-15)*+{P(n) \\times_{\\Sigma_{n}} X^n}=\"51\";\n\t\t\t(90,-15)*+{P(n) \\times_{\\Sigma_{n}} Y^n}=\"61\";\n\t\t\t{\\ar^{} \"60\" ; \"61\"};\n\t\t\t{\\ar_{1 \\times f^n} \"51\" ; \"61\"};\n\t\t\t(75,-21)*{n \\neq 1}\n\t\t\\endxy\n\t\\]\nIt is easy then to see that $X$ is the coproduct of the $n=1$ cospan, and that the empty category is the pullback of each of the other cospans, making $X$ the pullback of the original diagram and verifying that $\\eta$ is cartesian.\n\\end{proof}\n\n\n\\begin{prop}\nLet $P$ be a symmetric operad. Then the $2$-monad $\\underline{P}$ preserves pullbacks if and only if $\\Sigma_{n}$ acts freely on $P(n)$ for all $n$.\n\\end{prop}\n\\begin{proof}\nConsider the following pullback of discrete categories.\n    \\[\n        \\xy\n            (0,0)*+{\\lbrace (x,y), (x,y'), (x',y), (x',y') \\rbrace}=\"00\";\n            (40,0)*+{\\lbrace y,y' \\rbrace}=\"10\";\n            (0,-15)*+{\\lbrace x, x' \\rbrace}=\"01\";\n            (40,-15)*+{\\lbrace z \\rbrace}=\"11\";\n            {\\ar \"00\" ; \"10\"};\n            {\\ar \"10\" ; \"11\"};\n            {\\ar \"00\" ; \"01\"};\n            {\\ar \"01\" ; \"11\"};\n        \\endxy\n    \\]\nLetting $\\mathbf{4}$ denote the pullback and similarly writing $\\mathbf{2}_X = \\{ x, x' \\}$ and $\\mathbf{2}_Y = \\{y, y'\\}$, the following diagram results as the image of this pullback square under $\\underline{P}$.\n    \\[\n        \\xy\n            (0,0)*+{\\coprod P(n) \\times_{\\Sigma_n} \\mathbf{4}^n}=\"00\";\n            (40,0)*+{\\coprod P(n) \\times_{\\Sigma_n} \\mathbf{2}_Y^n}=\"10\";\n            (0,-15)*+{\\coprod P(n) \\times_{\\Sigma_n} \\mathbf{2}_X^n}=\"01\";\n            (40,-15)*+{\\coprod P(n)/\\Sigma_n}=\"11\";\n            {\\ar \"00\" ; \"10\"};\n            {\\ar \"10\" ; \"11\"};\n            {\\ar \"00\" ; \"01\"};\n            {\\ar \"01\" ; \"11\"}:\n        \\endxy\n    \\]\nThe projection map $\\underline{P}(\\mb{4}) \\rightarrow \\underline{P}(\\mb{2}_Y)$ maps an element\n    \\[\n        [p;(x_1,y_1), \\ldots, (x_n,y_n)]\n    \\]\nto the element\n    \\[\n        [p;y_1,\\ldots,y_n]\n    \\]\nand likewise for the projection to $\\underline{P}(\\mb{2}_X)$.\n\nNow assume that, for some $n$, the action of $\\Sigma_n$ on $P(n)$ is not free. Then find some $p \\in P(n)$ along with a nonidentity element $g \\in \\Sigma_n$ such that $p \\cdot g = p$. We will show that the existence of $g$ proves that $\\underline{P}$ is not cartesian.\n\nNow $g \\neq e$, so there exists an $i$ such that $g(i) \\neq i$; without loss of generality, we may take $i=1$. Using this $g$ we can find two distinct elements\n    \\[\n        \\left[p;(x',y),(x,y),\\ldots,(x,y),(x,y'),(x,y),\\ldots,(x,y)\\right]\n    \\]\nand\n    \\[\n        \\left[p;(x,y),\\ldots,(x,y),(x',y'),(x,y),\\ldots,(x,y)\\right]\n    \\]\nin $\\underline{P}(\\mb{4})$. In the first element we put $(x',y)$ in the first position and $(x,y')$ in position $g(1)$, whilst in the second element we put $(x',y')$ in position $g(1)$. Both of these elements, however, are mapped to the same elements in $\\underline{P}(\\mb{2}_X)$, since\n    \\begin{align*}\n           \\left[p; x', x, \\ldots, x\\right]&= \\left[p \\cdot g; (x', x, \\ldots, x)\\right]\\\\\n          &= \\left[p;g\\cdot (x', x, \\ldots, x)\\right]\\\\\n          &= \\left[p;x,x,\\ldots,x',\\ldots,x\\right].\n    \\end{align*}\nSimilarly, both of the elements are mapped to the same element in $\\underline{P}(\\mathbf{2}_Y)$, simply\n    \\[\n        \\left[p;y,\\ldots,y', \\ldots, y\\right].\n    \\]\nThe pullback of this diagram, however, has a unique element which is projected to the ones we have considered, so $\\underline{P}(\\mb{4})$ is not a pullback. Hence $\\underline{P}$ does not preserve pullbacks if for some $n$ the action of $\\Sigma_n$ on $P(n)$ is not free.\n\nNow assume that each $\\Sigma_n$ acts freely on $P(n)$. Given a pullback\n    \\[\n        \\xy\n            (0,0)*+{A}=\"00\";\n            (15,0)*+{B}=\"10\";\n            (0,-15)*+{C}=\"01\";\n            (15,-15)*+{D}=\"11\";\n            {\\ar^{F} \"00\" ; \"10\"};\n            {\\ar^{S} \"10\" ; \"11\"};\n            {\\ar_{R} \"00\" ; \"01\"};\n            {\\ar_{H} \"01\" ; \"11\"};\n        \\endxy\n    \\]\nwe must show that the image of the diagram under $\\underline{P}$ is also a pullback. Now this will be true if and only if each individual diagram\n        \\[\n            \\xy\n                (0,0)*+{P(n) \\times_{\\Sigma_n} A^n}=\"00\";\n                (30,0)*+{P(n) \\times_{\\Sigma_n} B^n}=\"10\";\n                (0,-15)*+{P(n) \\times_{\\Sigma_n} C^n}=\"01\";\n                (30,-15)*+{P(n) \\times_{\\Sigma_n} D^n}=\"11\";\n                {\\ar^{1 \\times F^n} \"00\" ; \"10\"};\n                {\\ar^{1 \\times S^n} \"10\" ; \"11\"};\n                {\\ar_{1 \\times R^n} \"00\" ; \"01\"};\n                {\\ar_{1 \\times H^n} \"01\" ; \"11\"}:\n            \\endxy\n    \\]\nis also a pullback. The pullback of the functors $1 \\times H^n$ and $1 \\times S^n$ is a category consisting of pairs of objects $[p;\\underline{c}]$ and $[q;\\underline{b}]$, where $\\underline{b}$ and $\\underline{c}$ represent lists of elements in $B$ and $C$, respectively. These pairs are then required to satisfy the property that\n    \\[\n        \\left[p;\\underline{H(c)}\\right] = \\left[q; \\underline{S(b)}\\right].\n    \\]\nUsing the previous lemma, we know that a pair\n    \\[\n        \\left(\\left[p;\\underline{c}\\right], \\left[q;\\underline{b}\\right]\\right)\n    \\]\nis in the pullback if and only if there exists an element $g \\in \\Sigma_n$ such that $p \\cdot g = q$ and $Hc_i = (Sb_{\\pi(g)^{-1}(i)})$. Using this we can define mutual inverses between $P(n) \\times_{\\Sigma_n} A^n$ and the pullback $Q'$. Considering the category $A$ as the pullback of the diagram we started with, we can consider objects of $P(n) \\times_{\\Sigma_n} A^n$ as being equivalence classes\n    \\[\n        [p;(b_1,c_1),\\ldots,(b_n,c_n)]\n    \\]\nwhere $p \\in P(n)$ and $Hc_i = Sb_i$ for all $i$.\n\nTaking such an object, we send it to the pair\n    \\[\n        \\left(\\left[p;c_1,\\ldots,c_n\\right],[p;b_1,\\ldots,b_n]\\right)\n    \\]\nwhich lies in the pullback since the identity in $\\Sigma_n$ satisfies the condition given earlier. An inverse to this sends a pair of equivalence classes in $Q'$ to the single equivalence class\n    \\[\n        \\left[p;\\left(c_1,b_{\\pi(g)^{-1}(1)}\\right),\\ldots,\\left(c_n,b_{\\pi(g)^{-1}(n)}\\right)\\right]\n    \\]\nin $P(n) \\times_{\\Sigma_n} A^n$. If we apply the map into $Q'$ we get the pair\n    \\[\n        \\left(\\left[p;c_1,\\ldots,c_n\\right],\\left[p;b_{\\pi(g)^{-1}(1)},\\ldots,b_{\\pi(g)^{-1}(n)}\\right]\\right)\n    \\]\nwhich is equal to the original pair since $p \\cdot g = q$; the other composite is trivially an identity. A similar calculation on morphisms finishes the proof that $P(n) \\times_{\\Sigma_n} A^{n}$ is the pullback as required.\n\\end{proof}\n\n\\begin{prop}\nLet $P$ be a symmetric operad. If the $\\Sigma_n$-actions are all free, then the multiplication $\\mu \\colon  \\underline{P}^{2} \\Rightarrow \\underline{P}$ of the associated monad is a cartesian transformation.\n\\end{prop}\n\\begin{proof}\nNote that if all of the diagrams\n    \\[\n        \\xy\n            (0,0)*+{\\underline{P}^2(X)}=\"00\";\n            (20,0)*+{\\underline{P}^2(1)}=\"10\";\n            (0,-15)*+{\\underline{P}(X)}=\"01\";\n            (20,-15)*+{\\underline{P}(1)}=\"11\";\n            {\\ar^{\\underline{P}^2(!)} \"00\" ; \"10\"};\n            {\\ar^{\\mu_1} \"10\" ; \"11\"};\n            {\\ar_{\\mu_X} \"00\" ; \"01\"};\n            {\\ar_{\\underline{P}(!)} \"01\" ; \"11\"};\n        \\endxy\n    \\]\nare pullbacks then the outside of the diagram\n    \\[\n        \\xy\n            (0,0)*+{\\underline{P}^2(X)}=\"00\";\n            (20,0)*+{\\underline{P}^2(Y)}=\"10\";\n            (40,0)*+{\\underline{P}^2(1)}=\"20\";\n            (0,-15)*+{\\underline{P}(X)}=\"01\";\n            (20,-15)*+{\\underline{P}(Y)}=\"11\";\n            (40,-15)*+{\\underline{P}(1)}=\"21\";\n            {\\ar^{\\underline{P}^2(f)} \"00\" ; \"10\"};\n            {\\ar^{\\underline{P}^2(!)} \"10\" ; \"20\"};\n            {\\ar^{\\mu_{1}} \"20\" ; \"21\"};\n            {\\ar_{\\mu_X} \"00\" ; \"01\"};\n            {\\ar_{\\underline{P}(f)} \"01\" ; \"11\"};\n            {\\ar_{\\underline{P}(!)} \"11\" ; \"21\"};\n            {\\ar_{\\mu_Y} \"10\" ; \"11\"};\n        \\endxy\n    \\]\nis also a pullback and so each of the naturality squares for $\\mu$ must therefore be a pullback. Now we can split up the square above, much like we did for $\\eta$, and prove that each of the squares below is a pullback.\n    \\[\n        \\xy\n            (0,0)*+{\\coprod P(m) \\times_{\\Sigma_m} \\prod_i \\left(P(k_i) \\times_{\\Sigma_{k_i}} X^{k_i}\\right)}=\"00\";\n            (60,0)*+{\\coprod P(m) \\times_{\\Sigma_m} \\prod_i \\left(P(k_i) / \\Sigma_{k_i}\\right)}=\"10\";\n            (0,-20)*+{P(n) \\times_{\\Sigma_{n}} X^n}=\"01\";\n            (60,-20)*+{P(n) / \\Sigma_{n}}=\"11\";\n            {\\ar \"00\" ; \"10\"};\n            {\\ar \"00\" ; \"01\"};\n            {\\ar \"01\" ; \"11\"};\n            {\\ar \"10\" ; \"11\"};\n        \\endxy\n    \\]\nThe map along the bottom is the obvious one, sending $[p; x_1, \\ldots, x_n]$ simply to the equivalence class $[p]$. Along the right hand side the map is the one corresponding to operadic composition, sending $[q;[p_1],\\ldots,[p_m]]$ to $[\\mu^P(q;p_1,\\ldots,p_n)]$. The pullback of these maps would be the category consisting of pairs\n    \\[\n        \\left([p;x_1,\\ldots,x_{\\Sigma k_i}],[q;[p_1],\\ldots,[p_n]]\\right),\n    \\]\nwhere $q \\in P(n)$, $p_i \\in P(k_i)$, $p \\in P(\\Sigma k_i)$, and for which $[p] = [\\mu^P(q;p_1,\\ldots,p_n)]$. The upper left category in the diagram, which we will refer to here as $Q$, has objects\n    \\[\n        \\left[q;\\left[p_1;\\underline{x}_1\\right],\\ldots,\\left[p_n;\\underline{x}_n\\right]\\right].\n    \\]\n\nQQQ (Describe these.) There are obvious maps out of $Q$ making the diagram commute and as such inducing a functor from $Q$ into the pullback via the universal property. This functor sends an object such as the one just described to the pair\n    \\[\n        \\left(\\left[\\mu^P(q;p_1,\\ldots,p_n);\\underline{x}\\right], [q;[p_1],\\ldots,[p_n]]\\right).\n    \\]\nGiven an object in the pullback, we then have a pair, as described above, which has $[p] = [\\mu^P(q;p_1,\\ldots,p_n)]$ meaning that we can find an element $g \\in \\Sigma_{\\Sigma k_i}$ such that $p  = \\mu^P(q;p_1,\\ldots,p_n) \\cdot g$. Thus we can describe an inverse to the induced functor by sending a pair in the pullback to the object\n    \\[\n        [q;[p_1;\\pi(g)(\\underline{x})_1],\\ldots,[p_n;\\pi(g)(\\underline{x})_n]],\n    \\]\nwhere $\\pi(g)(\\underline{x})_i$ denotes the $i$th block of $\\underline{x}$ after applying the permutation $\\pi(g)$. For example, if $\\underline{x} = (x_{11}, x_{12}, x_{21}, x_{22}, x_{23}, x_{31})$ and $\\pi(g) = (1\\, \\, 3 \\, \\, 5)$, then\n    \\[\n        \\pi(g)(\\underline{x}) = (x_{23}, x_{12}, x_{11}, x_{22}, x_{21}, x_{31}).\n    \\]\nThus $\\pi(g)(\\underline{x})_1 = (x_{23}, x_{12})$, $\\pi(g)(\\underline{x})_2 = (x_{11}, x_{22}, x_{21})$ and $\\pi(g)(\\underline{x})_3 = (x_{31})$.\n\nNow applying the induced functor we find that we get back an object in the pullback for which the first entry is $[q;[p_1],\\ldots,[p_n]]$ and whose second entry is\n    \\[\n       \\left[\\mu^P(q;p_1,\\ldots,p_n);\\pi(g)(\\underline{x})\\right] = \\left[\\mu^P(q;p_1,\\ldots,p_n) \\cdot g;\\underline{x}\\right] = [p;\\underline{x}],\n    \\]\nwhich is what we started with. Showing the other composite is an identity is similar, here using the fact that the identity acts trivially on $\\mu^P(q;p_1,\\ldots,p_n)$. Taking the coproduct of these squares then gives us the original diagram that we wanted to show was a pullback and, since each individual square is a pullback, so is the original.\n\\end{proof}\n\nCollecting these results together gives the following corollary.\n\n\\begin{cor}\\label{cart_cor}\nThe $2$-monad associated to a symmetric operad $P$ is $2$-cartesian if and only if the action of $\\Sigma_n$ is free on each $P(n)$.\n\\end{cor}\n\nWe require one simple technical lemma before giving a complete characterization of $\\ML$-operads which induce cartesian $2$-monads.\n\n\\begin{lem}\\label{kernel_lem}\nLet $C$ be a category with a right action of some group $\\Lambda$, and let $\\pi \\colon  \\Lambda \\rightarrow \\Sigma$ be a group homomorphism to any other group $\\Sigma$. Then the right $\\Sigma$-action on $C \\times_{\\Lambda} \\Sigma$ is free if and only if the only elements of $\\Lambda$ which fix an object of $C$ lie in the kernel of $\\pi$.\n\\end{lem}\n\\begin{proof}\nFirst, note that a group action on a category is free if and only if it is free on objects as fixing a morphism requires fixing its source and target. Thus our arguments need only concern the objects involved.\n\nSince the set of objects functor preserves colimits, the objects of $C \\times_{\\Lambda} \\Sigma$ are equivalence classes $[c;g]$ where $c \\in C$ and $g \\in \\Sigma$, with $[c\\cdot r;g] = [c; \\pi(r)g]$. First assume the $\\Sigma$-action is free. Then noting that $[c;e]\\cdot g =[c;g]$, we have if $[c;g] = [c;e]$ then $g=e$. Let $r \\in \\Lambda$ be an element such that $c\\cdot r = c$. Then\n  \\[\n    [c;e] = [c\\cdot r; e] = [c; \\pi(r)],\n  \\]\nso $\\pi(r) = e$.\n\nNow assume that every element of $\\Lambda$ fixing an object lies in the kernel of $\\pi$. Let $\\tau \\in \\Sigma$, and assume it fixes $[p; \\sigma]$. Without loss of generality, we can take $\\sigma = e$, so that\n  \\[\n    [p; \\tau] = [p;e]\\cdot \\tau = [p;e].\n  \\]\nSince the objects of $C \\times_{\\Lambda} \\Sigma$ are equivalence classes as above, there exists an element $r \\in \\Lambda$ such that $p\\cdot r^{-1} = p$ and $\\tau = \\pi(r)$. But by assumption, we must have $r^{-1}$, and hence $r$, in the kernel, so $\\tau = e$ and the $\\Sigma$-action is free.\n\\end{proof}\n\n\\begin{thm}\\label{cart_thm}\nThe $2$-monad associated to a $\\ML$-operad $P$ is $2$-cartesian if and only if whenever $p \\cdot g = p$ for an object $p \\in P(n)$, $g \\in \\textrm{Ker} \\, \\pi (n)$.\n\\end{thm}\n\\begin{proof}\nSince the monad $\\underline{P}$ is isomorphic to $\\underline{S(P)}$, we need only verify when $\\underline{S(P)}$ is $2$-cartesian. Thus the theorem is a direct consequence of \\cref{kernel_lem} and \\cref{cart_cor}.\n\\end{proof}\n\n\\subsection{The Borel construction for action operads}\n\n\nThe classical Borel construction is a functor from $G$-spaces to spaces, sending a $G$-space $X$ to $EG \\times_{G} X$. Our goal in this section is to use the formal description of the Borel construction to construct some special operads in $\\mb{Cat}$.  We start by reviewing the analogues of the functors $E, B \\colon \\mb{Grp} \\rightarrow \\mb{Top}$ now taking values in $\\mb{Cat}$.\n\n\\begin{Defi}\\label{Defi:e_b}\n  \\begin{enumerate}\n    \\item Let $X$ be a set. We define the \\textit{translation category} $EX$ to have objects the elements of $X$ and morphisms consisting of a unique isomorphism between any two objects.\n    \\item Let $G$ be a group. The category $BG$ has a single object $*$, and hom-set $BG(*,*) = G$ with composition and identity given by multiplication and the unit element in the group, respectively.\n  \\end{enumerate}\n\\end{Defi}\n\n\\begin{Defi}\nA functor $F \\colon X \\rightarrow Y$ is an \\emph{isofibration} if given $x \\in X$ and an isomorphism $f\\colon y \\xrightarrow{\\cong} F(x)$ in $Y$, then there exists an isomorphism $g$ in $X$ such that $F(g) = f$.\n\\end{Defi}\n\n\\begin{prop}\nThere exists a natural transformation $p \\colon EU \\Rightarrow B$, where $U$ is the underlying set of a group, which is pointwise an isofibration. Applying the classifying space functor to the component $p_{G}$ gives a universal principal $G$-bundle.\n\\end{prop}\n\\begin{proof}\nGiven a group $G$, $p_{G} \\colon EUG \\rightarrow BG$ sends every object of $EUG$ to the unique object of $BG$. The unique isomorphism $g \\rightarrow  h$ in $EUG$ is mapped to $hg^{-1} \\colon * \\rightarrow *$. It is easy to directly check that this is an isofibration, as well as to see that the classifying spaces of $EUG$ and $BG$ are the spaces classically known as $EG,BG$, with $|p_{G}|$ being the standard universal principal $G$-bundle.\n\\end{proof}\n\nWe will also need the functors $E, B$ defined for more than just a single set or group, in particular for the sets or groups which make up an operad and are indexed by the natural numbers.\n\n\\begin{nota}\\label{nota:e_b}\nLet $S$ be a set which we view as a discrete category.\n  \\begin{enumerate}\n    \\item For any functor $F \\colon S \\rightarrow \\mb{Sets}$, let $EF$ denote the composite $E \\circ F \\colon S \\rightarrow \\mb{Cat}$; we often view $F$ as an indexed set $\\{ F(s) \\}$, in which case $EF$ is the indexed category $\\{ EF(s) \\}$.\n    \\item For any functor $F \\colon S \\rightarrow \\mb{Grp}$, let $BF$ denote the composite $B \\circ F \\colon S \\rightarrow \\mb{Cat}$; we often view $F$ as an indexed group $\\{ F(s) \\}$, in which case $BF$ is the indexed category $\\{ BF(s) \\}$.\n  \\end{enumerate}\n\\end{nota}\n\nThe following lemma is a straightforward verification.\n\n\\begin{lem}\\label{symmoncor}\nThe functor $E \\colon \\mb{Sets} \\rightarrow \\mb{Cat}$ is right adjoint to the set of objects functor. Therefore $E$ preserves all limits, and in particular is a symmetric monoidal functor when both categories are equipped with their cartesian monoidal structures.\n\\end{lem}\n\nWe are additionally interested in $\\mb{\\Lambda}$-operads in $\\mb{Cat}$ (or other cocomplete symmetric monoidal categories in which the tensor product preserves colimits in each variable). While the definition above gives the correct notion of a $\\mb{\\Lambda}$-operad in $\\mb{Cat}$ if we interpret the two equivariance axioms to hold for both objects and morphisms, it is useful to give a purely diagrammatic expression of these axioms. In the diagrams below, expressions of the form $G \\times C$ for a group $G$ and category $C$ mean that the group $G$ is to be treated as a discrete category. This follows the standard method of how one expresses group actions in categories other than $\\mb{Sets}$ using a copower. Thus the diagrams below are the two equivariance axioms given in \\cref{Defi:lamop} expressed diagrammatically.\n    %% Expanded diagram\n  % \\[\n  %   \\xy\n  %     (0,0)*+{\\scriptstyle P(n) \\times P(k_{1}) \\times \\cdots \\times P(k_{n}) \\times \\Lambda(k_{1}) \\times \\cdots \\times \\Lambda(k_{n}) } =\"00\";\n  %     (0,-15)*+{\\scriptstyle P(\\underline{k}) \\times \\Lambda(\\underline{k}) } =\"01\";\n  %     (60,0)*+{\\scriptstyle P(n) \\times P(k_{1}) \\times \\Lambda(k_{1}) \\times \\cdots \\times P(k_{n}) \\times  \\Lambda(k_{n}) } =\"20\";\n  %     (60,-15)*+{\\scriptstyle P(n) \\times P(k_{1}) \\times \\cdots \\times P(k_{n}) } =\"21\";\n  %     (30, -25)*+{\\scriptstyle P(\\underline{k}) } =\"12\";% diagram\n  %     {\\ar^{\\cong} \"00\" ; \"20\"};\n  %     {\\ar^{1 \\times \\alpha_{k_1} \\times \\cdots \\times \\alpha_{k_n}} \"20\" ; \"21\"};\n  %     {\\ar^{\\mu^P} \"21\" ; \"12\"};\n  %     {\\ar_{\\mu^P \\times \\mu^\\Lambda(e;-)} \"00\" ; \"01\"};\n  %     {\\ar_{\\alpha_{\\underline{k}}} \"01\" ; \"12\"};\n  %   \\endxy\n  % \\]\n  \\[\n    \\xy\n      (0,0)*+{\\scriptstyle P(n) \\times \\left(\\prod_{i=1}^n P(k_i)\\right) \\times \\left(\\prod_{i=1}^n \\Lambda(k_i)\\right)} =\"00\";\n      (0,-15)*+{\\scriptstyle P(\\underline{k}) \\times \\Lambda(\\underline{k}) } =\"01\";\n      (60,0)*+{\\scriptstyle P(n) \\times \\left(\\prod_{i=1}^n \\left(P(k_{i}) \\times \\Lambda(k_{i})\\right)\\right)} =\"20\";\n      (60,-15)*+{\\scriptstyle P(n) \\times \\left(\\prod_{i=1}^n P(k_i)\\right) } =\"21\";\n      (30, -25)*+{\\scriptstyle P(\\underline{k}) } =\"12\";% diagram\n      {\\ar^{\\cong} \"00\" ; \"20\"};\n      {\\ar^{1 \\times \\prod_{i=1}^n \\alpha_i} \"20\" ; \"21\"};\n      {\\ar^{\\mu^P} \"21\" ; \"12\"};\n      {\\ar_{\\mu^P \\times \\mu^\\Lambda(e;-)} \"00\" ; \"01\"};\n      {\\ar_{\\alpha_{\\underline{k}}} \"01\" ; \"12\"};\n    \\endxy\n  \\]\n    %% Expanded diagram\n  % \\[\n  %   \\xy\n  %     (0,0)*+{\\scriptstyle P(n) \\times \\Lambda(n) \\times P(k_{1}) \\times \\cdots \\times P(k_{n}) } =\"00\";\n  %     (0,-10)*+{\\scriptstyle P(n) \\times \\Lambda(n) \\times \\Lambda(n) \\times P(k_{1}) \\times \\cdots \\times P(k_{n}) } =\"01\";\n  %     (0,-20)*+{\\scriptstyle P(n) \\times \\Lambda(n) \\times P(k_{1}) \\times \\cdots \\times P(k_{n}) \\times \\Lambda(n) } =\"02\";\n  %     (0,-30)*+{\\scriptstyle P(n) \\times \\Sigma_{n} \\times P(k_{1}) \\times \\cdots \\times P(k_{n}) \\times \\Lambda(n) } =\"03\";\n  %     (55,-30)*+{\\scriptstyle P(\\underline{k}) \\times \\Lambda(\\underline{k}) } =\"13\";\n  %     (70,0)*+{\\scriptstyle P(n) \\times P(k_{1}) \\times \\cdots \\times P(k_{n}) } =\"20\";\n  %     (70,-18)*+{\\scriptstyle P(\\underline{k}) } =\"21\";\n  %     {\\ar_{1 \\times \\Delta \\times 1} \"00\" ; \"01\"};\n  %     {\\ar^{\\cong} \"01\" ; \"02\"};\n  %     {\\ar_{1 \\times \\pi_{n} \\times 1} \"02\" ; \"03\"};\n  %     {\\ar^{} \"03\" ; \"13\"};\n  %     (35,-33)*{\\scriptstyle \\tilde{\\mu}^P \\times \\mu^\\Lambda(-;\\underline{e})};\n  %     {\\ar_{\\alpha_{\\underline{k}}} \"13\" ; \"21\"};\n  %     {\\ar^{\\alpha_{n} \\times 1} \"00\" ; \"20\"};\n  %     {\\ar^{\\mu^P} \"20\" ; \"21\"};\n  %   \\endxy\n  % \\]\n  \\[\n    \\xy\n      (0,0)*+{\\scriptstyle P(n) \\times \\Lambda(n) \\times \\prod_{i=1}^n P(k_i) } =\"00\";\n      (0,-10)*+{\\scriptstyle P(n) \\times \\Lambda(n) \\times \\Lambda(n) \\times \\prod_{i=1}^n P(k_i) } =\"01\";\n      (0,-20)*+{\\scriptstyle P(n) \\times \\Lambda(n) \\times \\prod_{i=1}^n P(k_i) \\times \\Lambda(n) } =\"02\";\n      (0,-30)*+{\\scriptstyle P(n) \\times \\Sigma_{n} \\times \\prod_{i=1}^n P(k_i) \\times \\Lambda(n) } =\"03\";\n      (55,-30)*+{\\scriptstyle P(\\underline{k}) \\times \\Lambda(\\underline{k}) } =\"13\";\n      (70,0)*+{\\scriptstyle P(n) \\times \\prod_{i=1}^n P(k_i) } =\"20\";\n      (70,-18)*+{\\scriptstyle P(\\underline{k}) } =\"21\";\n      {\\ar_{1 \\times \\Delta \\times 1} \"00\" ; \"01\"};\n      {\\ar_{\\cong} \"01\" ; \"02\"};\n      {\\ar_{1 \\times \\pi_{n} \\times 1} \"02\" ; \"03\"};\n      {\\ar^{} \"03\" ; \"13\"};\n      (35,-33)*{\\scriptstyle \\tilde{\\mu}^P \\times \\mu^\\Lambda(-;\\underline{e})};\n      {\\ar_{\\alpha_{\\underline{k}}} \"13\" ; \"21\"};\n      {\\ar^{\\alpha_{n} \\times 1} \"00\" ; \"20\"};\n      {\\ar^{\\mu^P} \"20\" ; \"21\"};\n    \\endxy\n  \\]\nIn the second diagram, the morphism\n    \\[\n        \\tilde{\\mu}^P \\colon P(n) \\times \\Sigma_n \\times \\prod_{i=1}^n P(k_i) \\rightarrow P(\\underline{k} \\times \\Lambda(\\underline{k}))\n    \\]\nis first the left action of $\\Sigma_n$ on the product followed by the operad multiplication, and $\\underline{e}$ is $e_{k_{1}}, \\ldots, e_{k_{n}}$.\n\n\\begin{Defi}\\label{Defi:actop_to_cat}\nLet $\\mb{\\Lambda}$ be an action operad. Then $B\\Lambda$ (see \\cref{nota:e_b}) is the category with objects the natural numbers and\n  \\[\n    B\\Lambda(m,n) = \\left\\{ \\begin{array}{lc}\n    \\Lambda(n), & m = n \\\\\n    \\emptyset, & m \\neq n,\n    \\end{array} \\right.\n  \\]\nwhere composition is given by group multiplication and the identity morphism is the unit element $e_n \\in \\Lambda(n)$.\n\\end{Defi}\n\n\\begin{thm}\\label{preserveGop}\nLet $M,N$ be cocomplete symmetric monoidal categories in which the tensor product preserves colimits in each variable, and let $F \\colon M \\rightarrow N$ be a symmetric lax monoidal functor with unit constraint $\\varphi_{0}$ and tensor constraint $\\varphi_{2}$. Let $\\mb{\\Lambda}$ be an action operad, and $P$ a $\\mb{\\Lambda}$-operad in $M$. Then $FP = \\{ F(P(n)) \\}$ has a canonical $\\mb{\\Lambda}$-operad structure, giving a functor\n  \\[\n    F_{*} \\colon \\mb{\\Lambda}\\mbox{-}Op(M) \\rightarrow \\mb{\\Lambda}\\mbox{-}Op(N)\n  \\]\nfrom the category of $\\mb{\\Lambda}$-operads in $M$ to the category of $\\mb{\\Lambda}$-operads in $N$.\n\\end{thm}\n\\begin{proof}\nThe category of $\\mb{\\Lambda}$-operads in $M$ is the category of monoids for the composition product $\\circ_{M}$ on $[B\\Lambda^{\\textrm{op}}, M]$ constructed in \\cref{sec:opasmon}. Composition with $F$ gives a functor\n  \\[\n    F_{*} \\colon  [B\\Lambda^{\\textrm{op}}, M] \\rightarrow [B\\Lambda^{\\textrm{op}}, N],\n  \\]\n  and to show that it gives a functor between the categories of monoids we need only prove that $F_{*}$ is lax monoidal with respect to $\\circ_{M}$ and $\\circ_{N}$. In other words, we must construct natural transformations with components $F_{*}X \\circ_{N} F_{*}Y \\rightarrow F_{*}(X \\circ_{M} Y)$ and $I_{Op(N)} \\rightarrow F_{*}(I_{Op(M)})$ and then verify the lax monoidal functor axioms. We note that in the calculations below, we often write $F$ instead of $F_{*}$, but it should be clear from context when we are applying $F$ to objects and morphisms in $M$ and when we are applying $F_{*}$ to a functor $ B\\Lambda^{\\textrm{op}} \\rightarrow M$.\n\nWe first remind the reader about copowers in cocomplete categories. For an object $X$ and set $S$, the copower $X \\odot S$ is the coproduct $\\coprod_{s \\in S} X$. We have natural isomorphisms $(X \\odot S) \\odot T \\cong X \\odot (S \\times T)$ and $X \\odot 1 \\cong X$, and using these we can define an action of a group $G$ on an object $X$ using a map $X \\odot G \\rightarrow X$. Any functor $F$ between categories with coproducts is lax monoidal with respect to those coproducts:  the natural map $FA \\coprod FB \\rightarrow F(A \\coprod B)$ is just the map induced by the universal property of the coproduct using $F$ applied to the coproduct inclusions $A \\hookrightarrow A \\coprod B, B \\hookrightarrow A \\coprod B$. In particular, for any functor $F$ there exists an induced map $FX \\odot S \\rightarrow F(X \\odot S)$.\n\nThe unit object in $[B\\Lambda^{\\textrm{op}}, M]$ for $\\circ_{M}$ is the copower $I_{M} \\odot B\\Lambda(-,1)$. Thus the unit constraint for $F_{*}$ is the composite\n  \\[\n    I_{N} \\odot B\\Lambda(-,1) \\stackrel{\\varphi_{0} \\odot 1}{\\longrightarrow} FI_{M} \\odot B\\Lambda(-,1) \\rightarrow F(I_{M} \\odot B\\Lambda(-,1) ).\n  \\]\n\nFor the tensor constraint, we will require a map\n  \\[\n    t \\colon (FY)^{\\star n}(k) \\rightarrow F\\left(Y^{\\star n}(k)\\right)\n  \\]\n where $\\star$ is the Day convolution product; having constructed one, the tensor constraint is then the following composite.\n% \\[\n% \\begin{array}{rcl}\n% (FX \\circ FY)(k) & \\cong & \\int^{n} FX(n) \\otimes (FY)^{\\star n}(k) \\\\\n% & \\stackrel{ \\int 1 \\otimes t}{\\longrightarrow}  & \\int^{n} FX(n) \\otimes F(Y^{\\star n}(k)) \\\\\n% & \\stackrel{\\int \\varphi_{2}}{\\longrightarrow}  & \\int^{n} F(X(n) \\otimes Y^{\\star n}(k)) \\\\\n% & \\longrightarrow & F (\\int^{n} X(n) \\otimes Y^{\\star n}(k)) \\\\\n% & \\cong & F(X \\circ Y)(k),\n% \\end{array}\n% \\]\n  \\begin{align*}\n    (FX \\circ FY)(k)  &\\xrightarrow{\\cong} \\int^{n} FX(n) \\otimes (FY)^{\\star n}(k) \\\\\n    &\\xrightarrow{\\int 1 \\otimes t} \\int^{n} FX(n) \\otimes F(Y^{\\star n}(k)) \\\\\n    &\\xrightarrow{\\int \\varphi_2} \\int^{n} F(X(n) \\otimes Y^{\\star n}(k)) \\\\\n    &\\longrightarrow F \\left(\\int^{n} X(n) \\otimes Y^{\\star n}(k)\\right) \\\\\n    &\\xrightarrow{\\cong} F(X \\circ Y)(k)\n  \\end{align*}\n\nBoth isomorphisms in the composite above are induced by universal properties (see \\cref{section:operads_in_Cat} for more details) and the unlabeled arrow is induced by the same argument as that for coproducts above but this time using coends. The arrow $t$ is constructed in a similar fashion, and is the composite below.\n% \\[\n% \\begin{array}{rcl}\n% (FY)^{\\star n}(k) & = & \\int^{k_{1}, \\ldots, k_{n}} FY(k_{1}) \\otimes \\cdots \\otimes FY(k_{n}) \\odot B\\Lambda(k, \\sum k_{i}) \\\\\n% & \\rightarrow &  \\int^{k_{1}, \\ldots, k_{n}} F(Y(k_{1}) \\otimes \\cdots \\otimes Y(k_{n})) \\odot B\\Lambda(k, \\sum k_{i}) \\\\\n% & \\rightarrow & \\int^{k_{1}, \\ldots, k_{n}} F(Y(k_{1}) \\otimes \\cdots \\otimes Y(k_{n}) \\odot B\\Lambda(k, \\sum k_{i}) ) \\\\\n% & \\rightarrow & F\\int^{k_{1}, \\ldots, k_{n}} Y(k_{1}) \\otimes \\cdots \\otimes Y(k_{n}) \\odot B\\Lambda(k, \\sum k_{i})  \\\\\n% & = & F(Y^{\\star n}(k))\n% \\end{array}\n% \\]\n  \\begin{align*}\n    (FY)^{\\star n}(k) & =  \\int^{k_{1}, \\ldots, k_{n}} FY(k_{1}) \\otimes \\cdots \\otimes FY(k_{n}) \\odot B\\Lambda(k, \\sum k_{i}) \\\\\n    & \\rightarrow   \\int^{k_{1}, \\ldots, k_{n}} F(Y(k_{1}) \\otimes \\cdots \\otimes Y(k_{n})) \\odot B\\Lambda(k, \\sum k_{i}) \\\\\n    & \\rightarrow  \\int^{k_{1}, \\ldots, k_{n}} F(Y(k_{1}) \\otimes \\cdots \\otimes Y(k_{n}) \\odot B\\Lambda(k, \\sum k_{i}) ) \\\\\n    & \\rightarrow  F\\int^{k_{1}, \\ldots, k_{n}} Y(k_{1}) \\otimes \\cdots \\otimes Y(k_{n}) \\odot B\\Lambda(k, \\sum k_{i})  \\\\\n    & =  F(Y^{\\star n}(k))\n  \\end{align*}\nChecking the lax monoidal functor axioms is tedious but entirely routine using the lax monoidal functor axioms for $F$ together with various universal properties of colimits, and we leave the details to the reader.\n\\end{proof}\n\nCombining \\cref{preserveGop} and \\cref{gisgop} with \\cref{symmoncor}, we immediately obtain the following.\n\n\\begin{cor}\\label{cor:elambda_lambdaop}\nLet $\\mb{\\Lambda}$ be an action operad. Then $E\\Lambda = \\{ E\\left(\\Lambda(n)\\right) \\}$ (see \\cref{nota:e_b}) is a $\\mb{\\Lambda}$-operad in $\\mb{Cat}$.\n\\end{cor}\n\nAny $\\mb{\\Lambda}$-operad $P$ in $\\mb{Cat}$ gives rise to a $2$-monad on $\\mb{Cat}$ which we will often also denote by $P$ or, as in \\cref{section:operads_in_Cat}, by $\\underline{P}$. In the context of \\cref{cor:elambda_lambdaop}, that $2$-monad (also denoted $E\\Lambda$) is given by\n  \\[\n    X \\mapsto \\coprod_{n \\geq 0} E\\Lambda(n) \\times_{\\Lambda(n)} X^{n}\n  \\]\nwhere the action of $\\Lambda(n)$ on $E\\Lambda(n)$ is given by the obvious multiplication action on the right, and the action of $\\Lambda(n)$ on $X^{n}$ is given using $\\pi_{n} \\colon \\Lambda(n) \\rightarrow \\Sigma_{n}$ together with the standard left action of $\\Sigma_{n}$ on $X^{n}$ in any symmetric monoidal category. The $2$-monad $E\\Sigma$ is that for symmetric strict monoidal categories (see \\cref{sec:examples} for this and further examples).\n\n\\begin{Defi}\\label{lmc}\nA \\emph{$\\ML$-monoidal category} is a strict algebra for the $2$-monad $\\EL$. A \\emph{$\\ML$-monoidal functor} is a strict morphism for this $2$-monad $\\EL$. The $2$-category $\\lmc$ is the $2$-category $\\EL\\mbox{-}\\mb{Alg}_{s}$ of strict algebras, strict morphisms, and algebra $2$-cells for $\\EL$.\n\\end{Defi}\nQQQ $\\ML$-monoidal $2$-cell name? Is an algebra $2$-cell a $\\Lambda$-monoidal transformation?\n% QQQ Here is probably a natural place to split into another chapter? Previous stuff \"Abstract categorical properties of action operads\", later stuff \"Monoidal structures and multicategories\". Or after these results/the next section.\nQQQ Insert explicit descriptions of cells\n\n\\begin{prop}\\label{el_via_moncats}\nA strict $\\ML$-monoidal category structure on $X$ determines and is determined by\n\\begin{itemize}\n\\item a strict monoidal category structure on $X$: $(X, \\otimes, I)$,\n\\item for each $\\sigma \\in \\Lambda(n)$ and $x_1$, $\\ldots$, $x_n \\in X$, an isomorphism\n  \\[\n    \\sigma_{x_1,\\ldots,x_n} \\colon x_1 \\otimes \\ldots x_n \\rightarrow x_{\\pi(\\sigma)^{-1}(1)} \\otimes \\ldots \\otimes x_{\\pi(\\sigma)^{-1}(n)}\n  \\]\nwhich is natural in each $x_i$,\n\\item such that for any $\\tau_i \\in \\Lambda(k_i)$ and $\\sigma \\in \\Lambda(n)$, where $1 \\leq i \\leq n$, the following diagram commutes\n\\[\n  \\xy\n    (0,0)*+{\\bigotimes_{i=1}^n \\bigotimes_{j=1}^{k_i} x_{i,j}}=\"a\";\n    (50,0)*+{\\bigotimes_{i=1}^n \\bigotimes_{j=1}^{k_i} x_{i,\\pi(\\sigma)^{-1}(j)}}=\"b\";\n    (25,-20)*+{\\bigotimes_{i=1}^n \\bigotimes_{j=1}^{k_i} x_{\\pi(\\tau)^{-1}(i),\\pi\\left(\\sigma_{\\pi(\\tau)^{-1}(i)}\\right)^{-1}(j)}}=\"c\";\n    %\n    {\\ar^(.4){\\tau_1 \\otimes \\cdots \\otimes \\tau_n} \"a\" ; \"b\"};\n    {\\ar^{\\sigma^{+}} \"b\" ; \"c\"};\n    {\\ar_{\\mu^{\\Lambda}(\\sigma;\\tau_1,\\ldots,\\tau_n)} \"a\" ; \"c\"};\n  \\endxy\n\\]\n\\item QQQ needs to be some equivariance condition in here, otherwise appropriate axioms (e.g., hexagon identities) don't come out of this \n\\end{itemize}\n\\end{prop}\n\\begin{proof}\nQQQ Missing something about equivariance.\n\n% First we shall show an $\\EL$-algebra structure on $X$ can be used to specify the monoidal structure described above. If $X$ is an $\\EL$-algebra then we also have the family of morphisms $\\alpha_n \\colon E\\Lambda(n) \\times X^n \\rightarrow X$ satisfying the usual axioms. We define the monoidal product of two objects $x$, $y \\in X$ to be\n%   \\[\n%     x \\otimes y = \\alpha_2(e_2;x,y)\n%   \\]\n% and the unit object to be\n%   \\[\n%     I = \\alpha_0(e_0;).\n%   \\]\n% Strict associativity follows from the the $\\EL$-algebra axioms and \\cref{calclem} as follows:\n%   \\begin{align*}\n%     (x_1 \\otimes x_2) \\otimes x_3 &= \\alpha_2(e_2;\\alpha_2(e_2;x_1,x_2),x_3)\\\\\n%     &= \\alpha_2(e_2;\\alpha_2(e_2;x_1,x_2),\\alpha_1(e_1;x_3))\\\\\n%     &= \\alpha_3(\\mu(e_2;e_2,e_1);x_1,x_2,x_3)\\\\\n%     &= \\alpha_3(e_3;x_1,x_2,x_3)\\\\\n%     &= \\alpha_3(\\mu(e_2;e_1,e_2);x_1,x_2,x_3)\\\\\n%     &= \\alpha_2(e_2;\\alpha(e_1;x_1),\\alpha(e_2;x_2,x_3))\\\\\n%     &= \\alpha_2(e_2;x_1,\\alpha_2(e_2;x_2,x_3))\\\\\n%     &= x_1 \\otimes (x_2 \\otimes x_3).\n%   \\end{align*}\n% Due to this we can then write $n$-fold monoidal products as\n%   \\[\n%     x_1 \\otimes \\ldots \\otimes x_n = \\alpha_n(e_n;x_1,\\ldots,x_n)\n%   \\]\n% and for any $\\sigma \\in \\Lambda(n)$ we now define\n%   \\[\n%     x_{\\pi(\\sigma)^{-1}(1)} \\otimes \\ldots \\otimes x_{\\pi(\\sigma)^{-1}(n)} = \\alpha_n(\\sigma;x_1,\\ldots,x_n).\n%   \\]\n% For the unit object we have\n%   \\begin{align*}\n%     I \\otimes x &= \\alpha_2(e_2;I,x)\\\\\n%     &= \\alpha_2(e_2;\\alpha_0(e_0;),\\alpha_1(e_1;x))\\\\\n%     &= \\alpha_1(\\mu^\\Lambda(e_2;e_0,e_1);x)\\\\\n%     &= \\alpha_1(e_1;x)\\\\\n%     &= x,\n%   \\end{align*}\n% with similar working to show that $x \\otimes I = x$.\n\n% Next we specify the permutation isomorphisms. Given $\\sigma \\in \\Lambda(n)$, there exists a unique isomorphism\n%   \\[\n%     ! \\colon e_n \\rightarrow \\sigma\n%   \\]\n% in $E\\Lambda(n)$, which we use to define the isomorphism\n%   \\[\n%     \\tilde{\\sigma} = \\alpha_n(!;\\underline{\\id}) \\colon \\alpha_n(e_n;x_1,\\ldots,x_n) \\rightarrow \\alpha_n(\\sigma;x_1,\\ldots,x_n).\n%   \\]\n% That these are natural follows simply from the functoriality of each $\\alpha_n$, giving\n%   \\[\n%   \\alpha_n(!;\\underline{\\id})\\alpha(\\id;f_1,\\ldots,f_n) = \\alpha_n(!;f_1,\\ldots,f_n) = \\alpha_n(\\id;f_1,\\ldots,f_n)\\alpha_n(!;\\underline{\\id})\n%   \\]\n% for $f_i \\colon x_i \\rightarrow x_i'$. The isomorphisms also satisfy the axioms specified in the diagram above as a direct result of the $\\EL$-algebra axioms.\n\n% Conversely, we begin with a strict monoidal category $(X,\\otimes,I)$, along with isomorphisms\n%   \\[\n%     \\tilde{\\sigma} \\colon x_1 \\otimes \\ldots \\otimes x_n \\rightarrow x_{\\pi(\\sigma)^{-1}(1)} \\otimes \\ldots \\otimes \\pi(\\sigma)^{-1}(n)\n%   \\]\n% satisfying the axioms specified above. We need to describe morphisms\n%   \\[\n%     \\alpha_n \\colon E\\Lambda(n) \\times X^n \\rightarrow X\n%   \\]\n% which satisfy the axioms of an $\\EL$-algebra. To begin with we first define\n%   \\[\n%     \\alpha_0(e_0;) = I.\n%   \\]\n% To define each $\\alpha_n$ we then put\n%   \\[\n%     \\alpha_n(\\sigma;x_1,\\ldots,x_n) = x_{\\pi(\\sigma)^{-1}(1)} \\otimes \\ldots \\otimes x_{\\pi(\\sigma)^{-1}(n)}.\n%   \\]\n% The unit axiom is satisfied immediately since we then have $\\alpha_1(e_1;x) = x$. The other $\\EL$-algebra axiom is then essentially the axiom described in the diagram above.\n\\end{proof}\n\n\\begin{prop}\\label{el_strictmap}\nLet $X,Y$ be strict $\\ML$-monoidal categories, and $F \\colon X \\rightarrow Y$ be a functor. $F$ is a strict $\\ML$-monoidal functor if and only if\n\\end{prop}\n\\begin{proof}\n\n\\end{proof}\n\n\\begin{prop}\\label{el_weakmap}\nLet $X,Y$ be strict $\\ML$-monoidal categories, and $F \\colon X \\rightarrow Y$ be a functor. The structure of a weak $\\ML$-monoidal functor determines and is determined by some stuff.\n\\end{prop}\n\\begin{proof}\n\n\\end{proof}\n\n\\begin{prop}\\label{el_2cells}\nLet $X,Y$ be strict $\\ML$-monoidal categories, and $F, G \\colon X \\rightarrow Y$ be strict $\\ML$-monoidal functors. The structure of an $\\EL$-algebra $2$-cell $\\alpha \\colon F \\Rightarrow G$ determines and is determined by some stuff.\n\\end{prop}\n\\begin{proof}\n\n\\end{proof}\n\n\\subsection{Free $\\ML$-monoidal categories}\n\n\nIt will be useful for our calculations later to give an explicit description of the categories $E\\Lambda(n) \\times_{\\Lambda(n)} X^{n}$. Objects are equivalence classes of tuples $(g; x_1, \\ldots, x_n)$ where $g \\in \\Lambda(n)$ and the $x_{i}$ are objects of $X$, with the equivalence relation given by\n  \\[\n    (gh; x_1, \\ldots, x_n) \\sim \\left(g; x_{\\pi(h)^{-1}(1)}, \\ldots, x_{\\pi(h)^{-1}(n)}\\right);\n  \\]\n  we write these classes as $[g; x_1, \\ldots, x_n]$. Morphisms are then equivalence classes of morphisms\n  \\[\n    (!; f_1, \\ldots, f_n) \\colon  (g; x_1, \\ldots, x_n) \\rightarrow \\left(h; x_1', \\ldots, x_n'\\right).\n  \\]\nWe have two distinguished classes of morphisms, one for which the map $! \\colon  g \\rightarrow h$ is the identity and one for which all the $f_{i}$'s are the identity. Every morphism in $E\\Lambda(n) \\times X^{n}$ is uniquely a composite of a  morphism of the first type followed by one of the second type. Now $E\\Lambda(n) \\times_{\\Lambda(n)} X^{n}$ is a quotient of $E\\Lambda(n) \\times X^{n}$ by a free group action, so every morphism of $E\\Lambda(n) \\times_{\\Lambda(n)} X^{n}$ is in the image of the quotient map. Using this fact, we can prove the following useful lemma.\n\n\\begin{lem}\\label{hom-set-lemma}\nFor an action operad $\\mb{\\Lambda}$ and any category $X$, the set of morphisms from $[e; x_1, \\ldots, x_n]$ to $[e; y_1, \\ldots, y_n]$ in $E\\Lambda(n) \\times_{\\Lambda(n)} X^{n}$ is\n  \\[\n    \\coprod_{g \\in \\Lambda(n)} \\prod_{i=1}^{n} X\\left(x_i, y_{\\pi(g)(i)}\\right).\n  \\]\n\\end{lem}\n\\begin{proof}\nA morphism with source $(e; x_1, \\ldots, x_n)$ in $E\\Lambda(n) \\times X^{n}$ is uniquely a composite\n  \\[\n    (e; x_1, \\ldots, x_n) \\stackrel{(\\id; f_{1}, \\ldots, f_{n})}{\\longrightarrow} \\left(e; x_1', \\ldots, x_n'\\right) \\stackrel{(!; \\id, \\ldots, \\id)}{\\longrightarrow} \\left(g; x_1', \\ldots, x_n'\\right).\n  \\]\nDescending to the quotient, this becomes a morphism\n  \\[\n    [e; x_1, \\ldots, x_n] \\rightarrow \\left[g; x_1', \\ldots, x_n'\\right] = \\left[e; x_{\\pi(g)^{-1}(1)}', \\ldots, x_{\\pi(g)^{-1}(n)}'\\right],\n  \\]\nand therefore is a morphism $[e; x_1, \\ldots, x_n] \\rightarrow [e; y_1, \\ldots, y_n]$ precisely when $y_i = x_{\\pi(g)^{-1}(i)}'$, and so $f_i \\in   X(x_i, y_{\\pi(g)(i)})$.\n\\end{proof}\n\n\\begin{nota}\\label{tensor_notation}\nFor $g \\in \\ML(n)$ and objects $x_1, \\ldots, x_n$ of a $\\ML$-monoidal category $X$, we write \n  \\[\n    g^{\\otimes} \\colon x_1 \\otimes \\cdots x_n \\rightarrow x_{\\pi(g)^{-1}(1)} \\otimes \\cdots \\otimes x_{\\pi(g)^{-1}(n)}\n  \\]\nfor the image of the map\n  \\[\n    (!; \\id, \\ldots, \\id) \\colon  (e; x_1, \\ldots, x_n) \\rightarrow (g; x_1, \\ldots, x_n)\n  \\]\nin $E\\Lambda(n) \\times_{\\Lambda(n)} X^{n}$.\n\\end{nota}\n\n\\begin{Defi}\\label{action_map}\nWe call the map \n  \\[\n    g^{\\otimes} \\colon x_1 \\otimes \\cdots \\otimes x_n \\rightarrow x_{\\pi(g)^{-1}(1)} \\otimes \\cdots x_{\\pi(g)^{-1}(n)}\n  \\]\nthe \\emph{action} of $g$ on $x_1 \\otimes \\cdots x_n$.\n\\end{Defi}\n\n\\begin{rem}\nIt is obvious that $g^{\\otimes} \\otimes h^{\\otimes} = \\mu(e_2; g, h)^{\\otimes}$. The latter can also be written $\\beta(g, h)^{\\otimes}$ (using \\cref{thm:charAOp}) or $(g \\oplus h)^{\\otimes}$  (using \\cref{beta_to_oplus}).\n\\end{rem}\n\nThe $2$-monad $E\\Lambda$ is both finitary and cartesian (see \\cref{sec:propofopsincat}). In fact we can characterize this operad uniquely (up to equivalence) using a standard argument.\nQQQ Say what contractible means here. \n\\begin{Defi}\nLet $\\mb{\\Lambda}$ be an action operad. A \\textit{$\\mb{\\Lambda}_{\\infty}$ operad} $P$ is a $\\mb{\\Lambda}$-operad in which each action $P(n) \\times \\Lambda(n) \\rightarrow P(n)$ is free and each $P(n)$ is contractible.\n\\end{Defi}\n\n\\begin{rem}\nOne should also note that by \\cref{cor:elambda_lambdaop} there exists a canonical $\\mb{\\Lambda}_{\\infty}$ operad in $\\mb{Cat}$, namely $E\\Lambda$ itself, and thus also in the category of simplicial sets by taking the nerve (the nerve functor is represented by a cosimplicial category, namely $\\Delta \\subseteq \\mb{Cat}$, so preserves products) and in suitable categories of topological spaces by taking the geometric realization (once again, product-preserving with the correct category of spaces). Thus we have something like a Barratt-Eccles $\\mb{\\Lambda}_{\\infty}$ operad for any action operad $\\mb{\\Lambda}$.\n\\end{rem}\n\n\\begin{rem}\nThe above definition makes sense in a wide context, but needs interpretation. We can interpret the freeness condition in any complete category, as completeness allows one to compute fixed points using equalizers. Contractibility then requires a notion of equivalence or weak equivalence, such as in an $(\\infty, 1)$-category or Quillen model category, and a terminal object. Our interest is in the above definition interpreted in $\\mb{Cat}$, in which case both conditions (free action and contractible $P(n)$'s) mean the obvious thing.\n\\end{rem}\n\n\\begin{prop}\nFor any two $\\mb{\\Lambda}_{\\infty}$ operads $P,Q$ in $\\mb{Cat}$, there exists a span $P \\leftarrow R \\rightarrow Q$ of pointwise equivalences of $\\mb{\\Lambda}$-operads.\n\\end{prop}\n\\begin{proof}\nGiven $\\mb{\\Lambda}_{\\infty}$ operads $P$, $Q$ in $\\mb{Cat}$, the product $P \\times Q$ with the diagonal action is also $\\mb{\\Lambda}_{\\infty}$. Each of the projection maps is a pointwise equivalence of $\\mb{\\Lambda}$-operads.\n\\end{proof}\n\\begin{rem}\nOnce again, this proof holds in a wide context. We required that the product of free actions is again free, true in any complete category. We also required that the product of contractible objects is contractible; this condition will hold, for example, in any Quillen model category in which all objects are fibrant or in which the product of weak equivalences is again a weak equivalence.\n\\end{rem}\n\n\n\\subsection{Abstract properties of the Borel construction}\n\nKelly's theory of clubs \\cite{kelly_club1, kelly_club0, kelly_club2} was designed to simplify and explain certain aspects of coherence results, namely the fact that many coherence results rely on extrapolating information about general free objects for a $2$-monad $T$ from information about the specific free object $T1$ where $1$ denotes the terminal category. This occurs, for example, in the study of the many different flavors of monoidal category:  plain monoidal category, braided monoidal category, symmetric monoidal category, and so on. This section will explain how every action operad gives rise to a club, as well as compute the clubs which arise as the image of this procedure.\n\nWe begin by reminding the reader of the notion of a club, or more specifically what Kelly \\cite{kelly_club1,kelly_club2} calls a club over $\\mb{P}$. We will only be interested in clubs over $\\mb{P}$, and thusly shorten the terminology to club from this point onward. Defining clubs is accomplished most succinctly using Leinster's terminology of generalized operads \\cite{leinster}.\n\n\\begin{Defi}\nLet $C$ be a category with finite limits.\n\\begin{enumerate}\n\\item A monad $T \\colon C \\rightarrow C$ is \\textit{cartesian} if the functor $T$ preserves pullbacks, and the naturality squares for the unit $\\eta$ and the multiplication $\\mu$ for $T$ are all pullbacks.\n\\item The category of \\textit{$T$-collections}, $T\\mbox{-}\\mb{Coll}$, is the slice category $C/T1$, where $1$ denotes the terminal object.\n\\item Given a pair of $T$-collections $X \\stackrel{x}{\\rightarrow} T1, Y \\stackrel{y}{\\rightarrow} T1$, their \\textit{composition product} $X \\circ Y$ is given by the pullback below together with the morphism along the top.\n  \\[\n    \\xy\n      (0,0)*+{X \\circ Y} =\"00\";\n      (15,0)*+{TY} =\"10\";\n      (30,0)*+{T^{2}1} =\"20\";\n      (45,0)*+{T1} =\"30\";\n      (0,-10)*+{X} =\"01\";\n      (15,-10)*+{T1} =\"11\";\n      {\\ar^{} \"00\" ; \"10\"};\n      {\\ar^{Ty} \"10\" ; \"20\"};\n      {\\ar^{\\mu} \"20\" ; \"30\"};\n      {\\ar^{T!} \"10\" ; \"11\"};\n      {\\ar_{x} \"01\" ; \"11\"};\n      {\\ar^{} \"00\" ; \"01\"};\n      (3,-3)*{\\lrcorner};\n    \\endxy\n  \\]\n\\item The composition product, along with the unit of the adjunction $\\eta \\colon 1 \\rightarrow T1$, give $T\\mbox{-}\\mb{Coll}$ a monoidal structure. A \\textit{$T$-operad} is a monoid in $T\\mbox{-}\\mb{Coll}$.\n\\end{enumerate}\n\\end{Defi}\n\n\\begin{rem}\nEverything in the above definition can be $\\mb{Cat}$-enriched without any substantial modifications. Thus we require our ground $2$-category to have finite limits in the enriched sense, and the slice and pullbacks are the $2$-categorical (and not bicategorical) versions. If we take this $2$-category to be $\\mb{Cat}$, then in each case the underlying category of the $2$-categorical construction is given by the corresponding $1$-categorical version. From this point, we will not distinguish between the $1$-dimensional and $2$-dimensional theory. Our interest, of course, is in the $2$-dimensional version.\n\\end{rem}\n\nLet $\\Sigma$ be the operad of symmetric groups. This is the terminal object of the category of action operads, with each $\\pi_{n}$ the identity map. Then $E\\Sigma$ is a $2$-monad on $\\mb{Cat}$, and by results in \\cref{sec:propofopsincat} it is cartesian.\n\n\\begin{Defi}\nA \\textit{club} is a $T$-operad in $\\mb{Cat}$ for $T = E\\Sigma$.\n\\end{Defi}\n\n\\begin{rem}\nThe category $\\mb{P}$ in Kelly's terminology is the result of applying $E\\Sigma$ to $1$, and can be identified with $B\\Sigma = \\coprod B\\Sigma_{n}$.\n\\end{rem}\n\nIt is useful to break down the definition of a club. A club consists of\n\\begin{enumerate}\n\\item a category $K$ together with a functor $K \\rightarrow B \\Sigma$,\n\\item a multiplication map $K \\circ K \\rightarrow K$, and\n\\item a unit map $1 \\rightarrow K$\n\\end{enumerate}\nsatisfying the axioms to be a monoid in the monoidal category of $E\\Sigma$-collections. By the definition of $K \\circ K$ as a pullback, objects are tuples of objects of $K$ $(x; y_{1}, \\ldots, y_{n})$ where $\\pi(x) = n$. A morphism\n  \\[\n    (x; y_{1}, \\ldots, y_{n}) \\rightarrow (z; w_{1}, \\ldots, w_{m})\n  \\]\nexists only when $n=m$ (since $B\\Sigma$ only has endomorphisms) and then consists of a morphism $f \\colon x \\rightarrow z$ in $K$ together with morphisms $g_{i} \\colon y_{i} \\rightarrow z_{\\pi(x)(i)}$ in $K$.\n\n\\begin{nota}\\label{nota:clubmult}\nFor a club $K$ and a morphism $(f; g_{1}, \\ldots, g_{n})$ in $K \\circ K$, we write $f(g_{1}, \\ldots, g_{n})$ for the image of the morphism under the functor $K \\circ K \\rightarrow K$.\n\\end{nota}\n\nWe will usually just refer to a club by its underlying category $K$.\n\n\n\\begin{thm}\nLet $\\mb{\\Lambda}$ be an action operad. Then the map of operads $\\pi \\colon \\Lambda \\rightarrow \\Sigma$ gives the category $B\\Lambda = \\coprod B\\Lambda(n)$ the structure of a club.\n\\end{thm}\n\\begin{proof}\nTo give the functor $B\\pi \\colon B\\Lambda \\rightarrow B \\Sigma$ the structure of a club it suffices (see \\cite{leinster}) to show that\n\\begin{itemize}\n\\item the induced monad, which we will show to be $E\\Lambda$, is a cartesian monad on $\\mb{Cat}$,\n\\item the transformation $\\tilde{\\pi} \\colon E\\Lambda \\Rightarrow E\\Sigma$ induced by the functor $E\\pi$ is cartesian, and\n\\item $\\tilde{\\pi}$ commutes with the monad structures.\n\\end{itemize}\nThe monad $E\\Lambda$ is always cartesian by results of \\cref{sec:propofopsincat}. The transformation $\\tilde{\\pi}$ is the coproduct of the maps $\\tilde{\\pi}_{n}$ which are induced by the universal property of the coequalizer as shown below.\n  \\[\n    \\xy\n      (0,0)*+{\\scriptstyle E\\Lambda(n) \\times \\Lambda(n) \\times X^n} =\"00\";\n      (0,-10)*+{\\scriptstyle E\\Sigma_{n} \\times \\Sigma_{n} \\times X^n} =\"01\";\n      (30,0)*+{\\scriptstyle E\\Lambda(n) \\times X^n} =\"10\";\n      (30,-10)*+{\\scriptstyle E\\Sigma_{n} \\times X^n} =\"11\";\n      (60,0)*+{\\scriptstyle E\\Lambda(n) \\times_{\\Lambda(n)} X^n} =\"20\";\n      (60,-10)*+{\\scriptstyle E\\Sigma_{n} \\times_{\\Sigma_{n}}  X^n} =\"21\";\n      {\\ar (12,1)*{}; (22,1)*{} };\n      {\\ar (12,-1)*{}; (22,-1)*{} };\n      {\\ar_{E\\pi \\times \\pi \\times 1} \"00\" ; \"01\"};\n      {\\ar (12,-9)*{}; (22,-9)*{} };\n      {\\ar (12,-11)*{}; (22,-11)*{} };\n      {\\ar_{E\\pi \\times 1} \"10\" ; \"11\"};\n      {\\ar@{.>}^{\\tilde{\\pi}_{n}} \"20\" ; \"21\"};\n      {\\ar \"10\" ; \"20\"};\n      {\\ar \"11\" ; \"21\"};\n    \\endxy\n  \\]\nNaturality is immediate, and since $\\pi$ is a map of operads $\\tilde{\\pi}$ also commutes with the monad structures.\n\nIt only remains to show that $\\tilde{\\pi}$ is cartesian and that the induced monad is actually $E\\Lambda$. Since the monads $E\\Lambda$ and $E\\Sigma$ both decompose into a disjoint union of functors, we only have to show that, for any $n$, the square below is a pullback.\n  \\[\n    \\xy\n      (0,0)*+{E\\Lambda(n) \\times_{\\Lambda(n)} X^n} =\"00\";\n      (0,-10)*+{B\\Lambda(n)} =\"01\";\n      (35,0)*+{E\\Sigma_{n} \\times_{\\Sigma_{n}} X^n} =\"10\";\n      (35,-10)*+{B\\Sigma_{n}} =\"11\";\n      {\\ar^{} \"00\" ; \"10\"};\n      {\\ar^{} \"10\" ; \"11\"};\n      {\\ar^{} \"00\" ; \"01\"};\n      {\\ar^{} \"01\" ; \"11\"};\n    \\endxy\n  \\]\nBy \\cref{coeq-lem}\n%(QQQ happy with this reference? QQQ Seems like the right thing?)\n, this amounts to showing that the square below is a pullback.\n  \\[\n    \\xy\n      (0,0)*+{E\\Lambda(n) \\times X^n/\\Lambda(n)} =\"00\";\n      (0,-10)*+{B\\Lambda(n)} =\"01\";\n      (35,0)*+{E\\Sigma_{n} \\times X^n/\\Sigma_{n}} =\"10\";\n      (35,-10)*+{B\\Sigma_{n}} =\"11\";\n      {\\ar^{} \"00\" ; \"10\"};\n      {\\ar^{} \"10\" ; \"11\"};\n      {\\ar^{} \"00\" ; \"01\"};\n      {\\ar^{} \"01\" ; \"11\"};\n    \\endxy\n  \\]\nHere, $(A \\times B)/G$ is the category whose objects are equivalence classes of pairs $(a,b)$ where $(a,b) \\sim (ag, g^{-1}b)$, and similarly for morphisms. Now the bottom map is clearly bijective on objects since these categories only have one object. An object in the top right is an equivalence class\n  \\[\n    [\\sigma; x_{1}, \\ldots, x_{n}] = \\left[e; x_{\\sigma^{-1}(1)}, \\ldots, x_{\\sigma^{-1}(n)}\\right].\n  \\]\nA similar description holds for objects in the top left, with $g \\in \\Lambda(n)$ replacing $\\sigma$ and $\\pi(g)^{-1}$ replacing $\\sigma^{-1}$ in the subscripts. The map along the top sends $[g; x_{1}, \\ldots, x_{n}]$ to $[\\pi(g); x_{1}, \\ldots, x_{n}]$, and thus sends $[e; x_{1}, \\ldots, x_{n}]$ to $[e; x_{1}, \\ldots, x_{n}]$, giving a bijection on objects.\n\nNow a morphism in $(E\\Lambda(n) \\times X^{n})/\\Lambda(n)$ can be given as\n  \\[\n    [e; x_{1}, \\ldots, x_{n}] \\stackrel{[!; f_{i}]}{\\longrightarrow} [g; y_{1}, \\ldots, y_{n}].\n  \\]\nMapping down to $B\\Lambda(n)$ gives $ge^{-1} = g$, while mapping over to $(E\\Sigma_{n} \\times X^{n})/\\Sigma_{n}$ gives $[!; f_{i}]$ where $! \\colon e \\rightarrow \\pi(g)$ is now a morphism in $E\\Sigma_{n}$. In other words, a morphism in the upper left corner of our putative pullback square is determined completely by its images along the top and lefthand functors. Furthermore, given $g \\in \\Lambda(n)$, $\\tau = \\pi(g)$, and morphisms $f_{i} \\colon x_{i} \\rightarrow y_{i}$ in $X$, the morphism $[! \\colon e \\rightarrow g; f_{i}]$ maps to the pair $(g, [! \\colon e \\rightarrow \\tau; f_{i}])$, completing the proof that this square is indeed a pullback.\n\\end{proof}\n\nThe club, which we now denote $K_{\\mb{\\Lambda}}$, associated to $E\\Lambda$ has the following properties. First, the functor $K_{\\mb{\\Lambda}} \\rightarrow B\\Sigma$ is a functor between groupoids. Second, the functor $K_{\\mb{\\Lambda}} \\rightarrow B\\Sigma$ is  bijective-on-objects. We claim that these properties characterize those clubs which arise from action operads. Thus the clubs arising from action operads are very similar to PROPs \\cite{mac_prop, markl_prop}.\n\n\\begin{thm}\\label{thm:club=operad}\nLet $K$ be a club such that\n\\begin{itemize}\n\\item the map $K \\rightarrow B\\Sigma$ is bijective on objects and\n\\item $K$ is a groupoid.\n\\end{itemize}\nThen $K \\cong K_{\\mb{\\Lambda}}$ for some action operad $\\mb{\\Lambda}$. The assignment $\\mb{\\Lambda} \\mapsto K_{\\mb{\\Lambda}}$ is a full and faithful embedding of the category of action operads $\\mb{AOp}$ into the category of clubs.\n\\end{thm}\n\\begin{proof}\nLet $K$ be such a club. Our hypotheses immediately imply that $K$ is a groupoid with objects in bijection with the natural numbers; we will now assume the functor $K \\rightarrow B\\Sigma$ is the identity on objects. Let $\\Lambda(n) = K(n,n)$. Now $K$ comes equipped with a functor to $B\\Sigma$, in other words group homomorphisms $\\pi_{n} \\colon \\Lambda(n) \\rightarrow \\Sigma_{n}$. We claim that the club structure on $K$ makes the collection of groups $\\{ \\Lambda(n) \\}$ an action operad. In order to do so, we will employ \\cref{thm:charAOp}.\n\nFirst, we give the group homomorphism $\\beta$ using \\cref{nota:clubmult}. Define\n  \\[\n    \\beta(g_{1}, \\ldots, g_{n}) = e_{n}(g_{1}, \\ldots, g_{n})\n  \\]\n (see \\ref{nota:clubmult}) where $e_{n}$ is the identity morphism $n \\rightarrow n$ in $K(n,n)$. Functoriality of the club multiplication map immediately implies that this is a group homomorphism. Second, we define the function $\\delta$ in a similar fashion:\n  \\[\n    \\delta_{n; k_{1}, \\ldots, k_{n}}(f) = f(e_{1}, \\ldots, e_{n}),\n  \\]\nwhere here $e_{i}$ is the identity morphism of $k_{i}$ in $K$.\n\nThere are now nine axioms to verify in \\cref{thm:charAOp}. The club multiplication functor is a map of collections, so a map over $B\\Sigma$; this fact immediately implies that axioms \\eqref{eq1} (using morphisms in $K \\circ K$ with only $g_{i}$ parts) and \\eqref{eq4} (using morphisms in $K \\circ K$ with only $f$ parts) hold. The mere fact that multiplication is a functor also implies axioms \\eqref{eq6} (once again using morphisms with only $f$ parts) and \\eqref{eq8} (by considering the composite of a morphism with only an $f$ with a morphism with only $g_{i}$'s). Axiom \\eqref{eq2} is the equation $e_{1}(g) = g$ which is a direct consequence of the unit axiom for the club $K$; the same is true of axiom \\eqref{eq5}. Axioms \\eqref{eq3}, \\eqref{eq7},  and \\eqref{eq9} all follow from the associativity of the club multiplication.\n\nFinally, we would like to show that this gives a full and faithful embedding $K_{-} \\colon \\mb{AOp} \\rightarrow \\mb{Club}$ of the category of action operads into the category of clubs. Let $f, f' \\colon \\mb{\\Lambda} \\rightarrow \\mb{\\Lambda'}$ be maps between action operads. Then if $K_{f} = K_{f'}$ as maps between clubs, then they must be equal as functors $K_{\\mb{\\Lambda}} \\rightarrow K_{\\mb{\\Lambda'}}$. But these functors are nothing more than the coproducts of the functors\n  \\[\n    B(f_{n}), B(f_{n}') \\colon B\\Lambda(n) \\rightarrow B\\Lambda'(n),\n  \\]\nand the functor $B$ from groups to categories is faithful, so $K_{-}$ is also faithful. Now let $f \\colon K_{\\mb{\\Lambda}} \\rightarrow K_{\\mb{\\Lambda'}}$ be a maps of clubs. We clearly get group homomorphisms $f_{n} \\colon \\Lambda(n) \\rightarrow \\Lambda'(n)$ such that $\\pi^{\\Lambda}_{n} = \\pi^{\\Lambda'}_{n} f_{n}$, so we must only show that the $f_{n}$ also constitute an operad map. Using the description of the club structure above in terms of the maps $\\beta, \\delta$, we are able to see that commuting with the club multiplication implies commuting with both of these, which in turn is equivalent to commuting with operad multiplication. Thus $K_{-}$ is full as well.\n\\end{proof}\n\n\\begin{rem}\nFirst, one should note that being a club over $B\\Sigma$ means that every $K$-algebra has an underlying strict monoidal structure. Second, requiring that $K \\rightarrow B\\Sigma$ be bijective on objects ensures that $K$ does not have  operations other than $\\otimes$, such as duals or internal hom-objects, from which to build new types of objects. Finally, $K$ being a groupoid ensures that all of the ``constraint morphisms'' that exist in algebras for $K$ are invertible.\n\nThese hypotheses could be relaxed somewhat. Instead of having a club over $B\\Sigma$, we could have a club over the free symmetric monoidal category on one object (note that the free symmetric monoidal category monad on $\\mb{Cat}$ is still cartesian). This would produce $K$-algebras with underlying monoidal structures which are not necessarily strict. This change should have relatively little impact on how the theory is developed. Changing $K$ to be a category instead of a groupoid would likely have a larger impact, as the resulting action operads would have monoids instead of groups at each level. We have made repeated use of inverses throughout the proofs in the basic theory of action operads, and these would have to be revisited if groups were replaced by monoids in the definition of action operads.\n\\end{rem}\n\nIn \\cite{kelly_club1}, Kelly discusses clubs given by generators and relations. His generators include functorial operations more general than what we are interested in here, and the natural transformations are not required to be invertible. In our case, the only generating operations we require are those of a unit and tensor product, as the algebras for $E\\Lambda$ are always strict monoidal categories with additional structure. Tracing through his discussion of generators and relations for a club gives the following theorem.\n\n\\begin{thm}\\label{pres1}\nLet $\\mb{\\Lambda}$ be an action operad with presentation given by $(\\mathbf{g},\\mathbf{r}, s_{i}, p)$. Then the club $E\\Lambda$ is generated by\n\\begin{itemize}\n  \\item functors giving the unit object and tensor product, and\n  \\item natural transformations given by the collection $\\mathbf{g}$:  each element $x$ of $\\mathbf{g}$ with $\\pi(x) = \\sigma_{x} \\in \\Sigma_{|x|}$ gives a natural transformation from the $n$th tensor power functor to itself,\n\\end{itemize}\nsubject to relations such that the following axioms hold.\n\\begin{itemize}\n  \\item The monoidal structure given by the unit and tensor product is strict.\n  \\item The transformations given by the elements of $\\mathbf{g}$ are all natural isomorphisms.\n  \\item For each element $y \\in \\mathbf{r}$, the equation $s_{1}(y) = s_{2}(y)$ holds.\n\\end{itemize}\n\\end{thm}\n\nBringing this down to a concrete level we have the following corollary.\n\n\\begin{cor}\\label{pres2}\nAssume we have a notion $\\mathcal{M}$ of strict monoidal category which is given by  a set natural isomorphisms\n  \\[\n    \\mathcal{G} = \\left\\{ (f, \\pi_{f}) \\, | \\,  x_{1} \\otimes \\cdots \\otimes x_{n} \\stackrel{f}{\\longrightarrow} x_{\\pi_{f}^{-1}(1)} \\otimes \\cdots \\otimes x_{\\pi_{f}^{-1}(n)} \\right\\}\n  \\]\nsubject to a set $\\mathcal{R}$ of axioms. Each such axiom is given by the data\n\\begin{itemize}\n  \\item two finite sets $f_{1}, \\ldots, f_{n}$ and $f_{1}', \\ldots, f_{m}'$ of elements of $\\mathcal{G}$; and\n  \\item two formal composites $F,F'$ using only composition and tensor product operations and the $f_{i}$, respectively $f_{i}'$, \n\\end{itemize}\nsuch that the underlying permutation of $F$ equals the underlying permutation of $F'$ (we compute the underlying permutations using the functions $\\beta, \\delta$ of \\cref{thm:charAOp}). The element $\\left(\\underline{f}, \\underline{f}', F, F'\\right)$ of the set $\\mathcal{R}$ of axioms corresponds to the requirement that the composite of the morphisms $f_{i}$ using $F$ equals the composite of the morphisms $f_{j}'$ using $F'$ in any strict monoidal category of type $\\mathcal{M}$. Then strict monoidal categories of type $\\mathcal{M}$ are given as the algebras for the club $E\\Lambda$ where $\\mb{\\Lambda}$ is the action operad with\n\\begin{itemize}\n  \\item $\\mathbf{g} = \\mathcal{G}$,\n  \\item $\\mathbf{r} = \\mathcal{R}$,\n  \\item $s_{1}$ given by mapping the generator $\\left(\\underline{f}, \\underline{f}', F, F'\\right)$ to the operadic composition of the $f_{i}$ using $F$ via $\\beta, \\delta$, and\n  \\item $s_{2}$ given by mapping the generator $\\left(\\underline{f}, \\underline{f}', F, F'\\right)$ to the operadic composition of the $f_{i}'$ using $F'$ via $\\beta, \\delta$.\n\\end{itemize}\n\\end{cor}\n",
			"file": "3-operads_in_cat/3-operads_in_cat.tex",
			"file_size": 114793,
			"file_write_time": 133310425119971467,
			"settings":
			{
				"buffer_size": 113016,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "%!TEX root = ../operads_paper.tex\n\\section{Monoidal structures and multicategories}\n \\subsection{Introduction to monoidal structures}\nQQQ\n\t\\begin{itemize}\n\t\t\\item need to start off by talking about monoidal structures and what this chapter will lead to\n\t\t\\item starts off with Examples section\n\t\t\\item monoidal categories via action operads\n\t\t\\item pseudo-commutativity\n\t\t\\item profunctors and multicategories\n\t\\end{itemize}\n\\subsection{Examples}\\label{sec:examples}\n\nIn this section we will discuss examples of the preceding theory. We have seen that there are three equivalent incarnations of the same algebraic structure:\n\\begin{itemize}\n\\item as an action operad $\\mb{\\Lambda}$,\n\\item as a $2$-monad $X \\mapsto \\coprod E\\Lambda(n) \\times_{\\Lambda(n)} X^{n}$ on $\\mb{Cat}$, or\n\\item as a club $B\\Lambda \\rightarrow B\\Sigma$ satisfying certain properties.\n\\end{itemize}\nIn practice, something like the third of these is the most likely to arise from applications (even if the notion of a club is perhaps less well-known outside of the categorical literature than that of an operad or a $2$-monad) as a club can be given by a presentation as we discussed in \\cref{sec:presofacops}. We will go into more detail here, explaining how particular monoidal structures of interest are represented in this theory.\n\n\n\\begin{example}\nThe $2$-monad for symmetric strict monoidal categories (or permutative categories, as they are known in the topological literature) is given by $E \\mb{\\Sigma}$, so the notion of symmetric strict monoidal categories corresponds to the symmetric operad. While this example is well-known, we go into further detail to set the stage for less common examples.\n\nThe $2$-monad $E\\Sigma$ on $\\mb{Cat}$ is given by\n  \\[\n    E\\Sigma (X) = \\coprod E\\Sigma_{n} \\times_{\\Sigma_{n}} X^{n}.\n  \\]\nAn object of $E\\Sigma_{n} \\times_{\\Sigma_{n}} X^{n}$ is an equivalence class of the form $[\\sigma; x_{1}, \\ldots, x_{n}]$ where $\\sigma \\in \\Sigma_{n}$ and $x_{i} \\in X$. The equivalence relation gives\n  \\[\n    [\\sigma; x_{1}, \\ldots, x_{n}] = \\left[e; x_{\\sigma^{-1}(1)}, \\ldots, x_{\\sigma^{-1}(n)}\\right],\n  \\]\nso objects can be identified with finite strings of objects of $X$. Morphisms are given by equivalence classes of the form\n  \\[\n    [\\sigma; x_{1}, \\ldots, x_{n}] \\stackrel{[!; f_{1}, \\ldots, f_{n}]}{\\longrightarrow} [\\tau; y_{1}, \\ldots, y_{n}].\n  \\]\nHere $! \\colon \\sigma \\cong \\tau$ is the unique isomorphism in $E \\Sigma_{n}$, and $f_{i} \\colon x_{i} \\rightarrow y_{i}$ in $X$. Using the equivalence relation, we find that morphisms between finite strings\n  \\[\n    x_{1}, \\ldots, x_{n} \\rightarrow y_{1}, \\ldots, y_{n}\n  \\]\nare given by a permutation $\\rho \\in \\Sigma_{n}$ together with maps $f_{i} \\colon x_{i} \\rightarrow y_{\\rho(i)}$ in $X$ (note that there are no morphisms between strings of different length); this is a special case of the calculation in \\cref{hom-set-lemma}. Thus $E \\Sigma(X)$ is easily seen to be the free permutative category generated by $X$, and therefore $\\Sigma$-monoidal categories are permutative categories.\n\\end{example}\n\n\\begin{example}\nThe template above can be used to show that the braid operad $\\mb{B}$ corresponds to the $2$-monad for braided strict monoidal categories. The details are almost exactly the same, only we use braids instead of permutations. The equivalence relation on objects gives\n  \\[\n    [\\gamma; x_{1}, \\ldots, x_{n}] = \\left[e; x_{\\pi(\\gamma)^{-1}(1)}, \\ldots, x_{\\pi(\\gamma)^{-1}(n)}\\right],\n  \\]\nwhere $\\gamma \\in B_{n}$ and $\\pi(\\gamma)$ is its underlying permutation; thus objects of $EB(X)$ are once again finite strings of objects of $X$. A morphism\n  \\[\n    x_{1}, \\ldots, x_{n} \\rightarrow y_{1}, \\ldots, y_{n}\n  \\]\nis then given by a braid $\\gamma \\in B_{n}$ together with maps $f_{i} \\colon x_{i} \\rightarrow y_{\\pi(\\gamma)(i)}$ in $X$. Thus one should view a morphism as given by\n\\begin{itemize}\n\\item a finite ordered set $x_{1}, \\ldots, x_{n}$ of objects of $X$ as the source,\n\\item another such finite ordered set (of the same cardinality) $y_{1}, \\ldots, y_{n}$ of objects of $X$ as the target,\n\\item a geometric braid $\\gamma \\in B_{n}$ on $n$ strands, and\n\\item for each strand, a morphism in $X$ from the object labeling the source of that strand to the object labeling the target.\n\\end{itemize}\nThis is precisely Joyal and Street's \\cite{js} construction of the free braided strict monoidal category generated by a category $X$, and thus $\\mb{B}$-monoidal categories are braided strict monoidal categories.\n\nThis example can be extended to include ribbon braided categories as well. A \\textit{ribbon braid} is given, geometrically, in much the same way as a braid except that instead of paths $[0,1] \\rightarrow \\mathbb{R}^{3}$ making up each individual strand, we use ribbons\n$[0,1] \\times [-\\varepsilon, \\varepsilon] \\rightarrow \\mathbb{R}^{3}$. This introduces the possibility of performing a full twist on a ribbon, and one can describe ribbon braided categories using generators and relations by introducing a natural twist isomorphism $\\tau_{A} \\colon A \\rightarrow A$ and imposing one relation between the twist and the braid $\\gamma_{A,B} \\colon A \\otimes B \\rightarrow B \\otimes A$. In \\cite{sal-wahl}, the authors show that the ribbon braid groups give an action operad $\\mb{RB}$, and that (strict) ribbon braided categories are precisely the algebras for $ERB$.\n\\end{example}\n\nWe now turn to an example which is not as widely known in the categorical literature, that of coboundary categories \\cite{drin-quasihopf}. These arise in the representation theory of quantum groups and in the theory of crystals \\cite{hk-cobound, hk-quantum}. Our goal here is to refine the relationship between coboundary categories and the operad of $n$-fruit cactus groups in \\cite{hk-cobound} by using the theory of action operads and our Borel construction. We begin by recalling the definition of a coboundary category.\n\n\n\\begin{Defi}\\label{def:cobcat}\nA \\textit{coboundary category} is a monoidal category $C$ equipped with a natural isomorphism $\\sigma_{x,y} \\colon x \\otimes y \\rightarrow y \\otimes x$ (called the \\textit{commutor}) such that\n\\begin{itemize}\n\\item $\\sigma_{y,x} \\circ \\sigma_{x,y} = 1_{x \\otimes y}$ and\n\\item the diagram\n  \\[\n    \\xy\n      (0,0)*+{(x \\otimes y) \\otimes z} =\"00\";\n      (35,0)*+{x \\otimes (y \\otimes z)} =\"10\";\n      (70,0)*+{x \\otimes (z \\otimes y)} =\"20\";\n      (0,-15)*+{(y \\otimes x) \\otimes z} =\"01\";\n      (35,-15)*+{z \\otimes (y \\otimes x)} =\"11\";\n      (70,-15)*+{(z \\otimes y )\\otimes x} =\"21\";\n      {\\ar \"00\"; \"10\" };\n      {\\ar^{1 \\sigma_{y,z}} \"10\"; \"20\" };\n      {\\ar^{\\sigma_{x,zy}} \"20\"; \"21\" };\n      {\\ar_{\\sigma_{x,y}1} \"00\"; \"01\" };\n      {\\ar_{\\sigma_{yx,z}} \"01\"; \"11\" };\n      {\\ar \"11\"; \"21\" };\n    \\endxy\n  \\]\ncommutes (in which the unlabeled morphisms are an associator and an inverse associator).\n\\end{itemize}\n\\end{Defi}\n\n\\begin{example}\\label{ex:cobcats}\n\\begin{enumerate}\n\\item As noted by Savage \\cite{savage-braidcob}, any braiding automatically satisfies the cactus relation (the diagram in \\cref{def:cobcat}). However, since braidings need not be involutions this does not mean that any braided monoidal category is a coboundary category. However, it should then be clear that any symmetric monoidal category is also a coboundary category.\n\\item The name coboundary category comes from the original work of Drinfeld \\cite{drin-quasihopf} in which he shows that the category of representations of a coboundary Hopf algebra has the structure of coboundary category.\n\\item Henriques and Kamnitzer \\cite{hk-cobound} show that the category of crystals for a finite dimensional complex reductive Lie algebra has the structure of a coboundary category. \n\\end{enumerate}\n\\end{example}\n\nOur interest is in strict coboundary categories by which we mean coboundary categories with strict underlying monoidal category. Under the assumption of strictness, the second axiom above does not include associations for the tensor product and reduces to a square. To show that every coboundary category is equivalent to a strict coboundary category, we must introduce the $2$-category $\\mb{CobCat}$ of coboundary categories.\n\n\\begin{Defi}\nLet $(C,\\sigma), (C', \\sigma')$ be coboundary categories. A \\emph{coboundary functor} $F \\colon C \\rightarrow C'$ is a strong monoidal functor (with invertible constraints $\\varphi_{0}$ for the unit and $\\varphi_{x,y}$ for the tensor product) such that\n  \\[\n    F\\sigma_{x,y} \\circ \\varphi_{x,y} = \\varphi_{y,x} \\circ \\sigma_{Fx,Fy}'\n  \\]\nholds.\n\\end{Defi}\n\nCoboundary functors are composed just as strong monoidal functors are, giving the following.\n\n\\begin{lem}\nCoboundary categories, coboundary functors, and monoidal transformations form a $2$-category, which we denote $\\mb{CobCat}$.\n\\end{lem}\n\n\n\\begin{prop}\nLet $(C, \\sigma)$ be a coboundary category. Then there exists a strict coboundary category $(C', \\sigma')$ which is equivalent to $(C, \\sigma)$ in $\\mb{CobCat}$.\n\\end{prop}\n\\begin{proof}\nConsider the underlying monoidal category of $(C, \\sigma)$, which we will just write as $C$. We can find a strict monoidal category $C'$ by coherence for monoidal categories together with an equivalence, as monoidal categories, between $C$ and $C'$. By standard methods \\cite{maclane-catwork}, this can be improved to an adjoint equivalence between $C$ and $C'$ in the $2$-category of monoidal categories, strong monoidal functors, and monoidal transformations. Let $F \\colon  C \\rightarrow C', G \\colon C' \\rightarrow C$ be the functors in this adjoint equivalence, and $\\eta \\colon 1 \\Rightarrow FG$ the unit (which we note for emphasis is invertible since it the unit of an adjoint equivalence). For objects $x,y \\in C'$, we define a commutor $\\sigma'$ for $C'$ as the composite\n  \\begin{align*}\n    xy & \\stackrel{\\eta \\otimes \\eta}{\\longrightarrow} FGxFGy \\\\\n    & \\stackrel{\\cong}{\\longrightarrow} F(GxGy) \\\\\n    & \\stackrel{F\\sigma}{\\longrightarrow} F(GyGx) \\\\\n    & \\stackrel{\\cong}{\\longrightarrow}  FGyFGx \\\\\n    & \\stackrel{\\eta^{-1} \\otimes \\eta^{-1}}{\\longrightarrow} yx.\n  \\end{align*}\nWe then leave to the reader, if they wish, the computations to show that $\\sigma'$ is a commutor for $C'$ and that $F,G$ become coboundary functors using $\\sigma'$.\n\\end{proof}\n\nWe now turn to the operadic description of strict coboundary categories; we note from this point onwards, all our coboundary categories are assumed to be strict.\n\n\\begin{Defi}\nFix $n>1$, and let $1 \\leq p < q \\leq n$, $1 \\leq k < l \\leq n$.\n\\begin{enumerate}\n\\item $p<q$ is \\textit{disjoint} from $k<l$ if $q<k$ or $l<p$.\n\\item $p<q$ \\textit{contains} $k<l$ if $p \\leq k < l \\leq q$.\n\\end{enumerate}\n\\end{Defi}\n\n\\begin{Defi}\nLet $1 \\leq p < q \\leq n$, and define $\\hat{s}_{p,q} \\in \\Sigma_{n}$ to be the permutation defined below.\n  \\[\n    \\begin{array}{r|ccccccccccccc}\n      i & 1 & 2 & \\cdots & p-1 & p & p+1 & p+2 & \\cdots & q-1 & q & q+1 & \\cdots & n \\\\\n      \\hat{s}_{p,q}(i) & 1 & 2 & \\cdots & p-1 & q & q-1 & q-2 & \\cdots & p+1 & p & q+1 & \\cdots & n\n    \\end{array}\n  \\]\n\\end{Defi}\n\nThe $n$-fruit cactus group is then defined as follows.\n\n\\begin{Defi}\\label{Defi:defcactus}\nLet $J_{n}$ be the group generated by symbols $s_{p,q}$ for $1 \\leq p < q \\leq n$ subject to the following relations.\n  \\begin{enumerate}\n    \\item For all $p < q$, $s_{p,q}^{2}=e$.\n    \\item If $p<q$ is disjoint from $k<l$, then $s_{p,q}s_{k,l} = s_{k,l}s_{p,q}$.\n    \\item If $p<q$ contains $k<l$, then $s_{p,q}s_{k,l} = s_{m,n}s_{p,q}$ where\n      \\begin{itemize}\n        \\item $m = \\hat{s}_{p,q}(l)$ and\n        \\item $n = \\hat{s}_{p,q}(k)$.\n      \\end{itemize}\n  \\end{enumerate}\n\\end{Defi}\n\nIt is easy to check that the elements $\\hat{s}_{p,q} \\in \\Sigma_{n}$ satisfy the three relations in \\cref{Defi:defcactus}, so $s_{p,q} \\mapsto \\hat{s}_{p,q}$ extends to a group homomorphism $\\pi_{n} \\colon J_{n} \\rightarrow \\Sigma_{n}$. This is the first step in proving the following.\n\n\\begin{thm}\\label{J_aop}\nThe collection of groups $J = \\{ J_{n} \\}$ form an action operad.\n\\end{thm}\n\\begin{proof}\nWe will use \\cref{thm:charAOp} to determine the rest of the action operad structure. Thus we must give, for any collection of natural numbers $n, k_{1}, \\ldots, k_{n}$ and $\\underline{k} = \\sum k_{i}$, group homomorphisms $\\beta \\colon J_{k_{1}} \\times \\cdots \\times J_{k_{n}} \\rightarrow J_{\\underline{k}}$ and functions $\\delta \\colon J_{n} \\rightarrow J_{\\underline{k}}$ satisfying nine axioms. We define both of these on generators, starting with $\\beta$.\n\nLet $s_{p_{i}, q_{i}} \\in J_{k_{i}}$. Let $r_{i} = k_{1} + k_{2} + \\cdots + k_{i-1}$ for $i > 1$. Define $\\beta$ by\n  \\[\n    \\beta(s_{p_{1}, q_{1}}, \\ldots, s_{p_{n}, q_{n}}) = s_{p_{1}, q_{1}} s_{p_{2}+r_{2}, q_{2}+r_{2}} \\cdots s_{p_{n}+r_{n}, q_{n}+r_{n}}.\n  \\]\nNote that $s_{p_{i}+r_{i}, q_{i}+r_{i}}$ and $s_{p_{j}+r_{j}, q_{j}+r_{j}}$ are disjoint when $i \\neq j$.\n\nIt is easy to check that this disjointness property ensures that $\\beta$ gives a well-defined group homomorphism\n  \\[\n    J_{k_{1}} \\times \\cdots \\times J_{k_{n}} \\rightarrow J_{\\underline{k}}.\n  \\]\n\nTo define $\\delta \\colon J_{n} \\rightarrow J_{\\underline{k}}$ for natural numbers $n, k_{1}, \\ldots, k_{n}$ and $\\underline{k} = \\sum k_{i}$, let $m_{k} = s_{1,k} \\in J_{k}$. Then we start by defining\n  \\[\n    \\delta(m_{n}) = m_{\\underline{k}} \\cdot \\beta(m_{k_{1}}, m_{k_{2}}, \\ldots, m_{k_{n}}).\n  \\]\nNote that, by equation \\ref{eq8} of \\cref{thm:charAOp}, this is equal to\n  \\[\n    \\beta(m_{k_{n}}, m_{k_{n-1}}, \\ldots, m_{k_{1}}) \\cdot m_{\\underline{k}}.\n  \\]\nNow $s_{p,q} \\in J_{n}$ is equal to $\\beta(e_{p-1}, m_{q-p+1}, e_{n-q})$ (here $e_{i}$ is the identity element in $J_{i}$) by definition of the $m_{i}$ and $\\beta$, so we can define $\\delta$ on any generator $s_{p,q}$ by\n  \\[\n    \\delta(s_{p,q}) = \\beta ( e_{A}, M, e_{B} )\n  \\]\nwith\n  \\begin{itemize}\n    \\item $A = k_{1} + k_{2} + \\cdots + k_{p-1}$,\n    \\item $M = m_{k_{p}+ \\cdots +k_{q}} \\cdot \\beta(m_{k_{p}}, m_{k_{p+1}}, \\ldots, m_{k_{q}})$, and\n    \\item $B = k_{q+1} + k_{q+2} + \\cdots + k_{n}$.\n  \\end{itemize}\nUnpacking this yields the following formula:\n  % \\[\n  %   \\resizebox{\\textwidth}{!}{$\\delta(s_{p,q}) = s_{k_{1}+\\cdots+k_{p-1}+1, k_{1}+\\cdots+k_{q}} \\cdot \\beta(e_{k_{1}+\\cdots+k_{p-1}}, m_{k_{p}}, \\ldots, m_{k_{q}}, e_{k_{q+1}+\\cdots+k_{n}}).$}\n  % \\]\n  \\[\n  \\delta(s_{p,q}) = s_{k_{1}+\\cdots+k_{p-1}+1, k_{1}+\\cdots+k_{q}} \\cdot \\beta(e_{k_{1}+\\cdots+k_{p-1}}, m_{k_{p}}, \\ldots, m_{k_{q}}, e_{k_{q+1}+\\cdots+k_{n}}).\n  \\]\n\nWe extend $\\delta$ to products of generators using axiom 6 of \\cref{thm:charAOp}. As before, we must check that this gives a well-defined function on products of two generators in each of the relations of the cactus groups, and we must also check that this is well-defined on products of three or more generators. Thus we define\n  \\[\n    \\delta_{n; j_{i}}(gh) = \\delta_{n; k_{i}}(g)\\delta_{n; j_{i}}(h)\n  \\]\nwhere $k_{i} = j_{\\pi(h)^{-1}(i)}$. There are three relations we must verify for compatibility.\n\\begin{itemize}\n\\item We must show that $\\delta_{n; j_{i}}\\left(s_{p,q}^{2}\\right) = e$. By definition, we have\n  \\[\n    \\delta_{n; j_{i}}\\left(s_{p,q}^{2}\\right) = \\delta_{n; k_{i}}\\left(s_{p,q}\\right)\\delta_{n; j_{i}}\\left(s_{p,q}\\right)\n  \\]\nwhich is\n  \\[\n    m_{\\underline{j}}\\beta(m_{j_{n}}, \\ldots, m_{j_{1}}) m_{\\underline{j}} \\beta(m_{j_{1}}, \\ldots, m_{j_{n}}).\n  \\]\nBy the remarks above in the definition of $\\delta$ and the fact that $s_{p,q}^{2}=e$, the element above is easily seen to be the identity.\n\\item We must show that $\\delta(s_{p,q}s_{k,l}) = \\delta(s_{k,l}s_{p,q})$ when $(p,q)$ is disjoint from $(k,l)$. This is another simple calculation using the definition of $\\delta$ and the disjointness of the terms involved.\n\\item We must show that $\\delta(s_{p,q}s_{k,l}) = \\delta(s_{a,b}s_{p,q})$,  where $a = \\hat{s}_{p,q}(l), b = \\hat{s}_{p,q}(k)$, if $p < k < l < q$. In this case, we use all of the relations in the cactus groups to show that each side is equal to\n  % \\[\n  %   \\resizebox{\\textwidth}{!}{$\\beta\\left(e_{j_{1}}, \\ldots, e_{j_{p-1}}, m_{j_{p}+\\cdots + j_{q}} \\cdot \\beta \\left(m_{j_{p}}, \\ldots m_{j_{k-1}}, m_{j_{k}+ \\cdots j_{l}}, m_{j_{l+1}}, \\cdots, m_{j_{q}}\\right), m_{j_{q+1}}, \\ldots, m_{j_{n}}\\right).$}\n  % \\]\n  \\[\n    \\beta\\left(\\underline{e}, m_{j_{p}+\\cdots + j_{q}} \\cdot \\beta \\left(m_{j_{p}}, \\ldots m_{j_{k-1}}, m_{j_{k}+ \\cdots +j_{l}}, m_{j_{l+1}}, \\cdots, m_{j_{q}}\\right), m_{j_{q+1}}, \\ldots, m_{j_{n}}\\right)\n  \\]\nwhere $\\underline{e} = e_{j_{1}}, \\ldots, e_{j_{p-1}}$.\n\\end{itemize}\nIn order to show that this gives a well-defined function on products of three or more generators, one proceeds inductively to show that $\\delta\\left((fg)h\\right) = \\delta\\left(f(gh)\\right)$ using the formula above. This is simply a matter of keeping track of the permutations used to define the subscripts for the different $\\delta$'s and we leave it to the reader, should they desire to see the details. This concludes the definition of the family of functions $\\delta_{n; j_{i}}$.\n\nThere are now nine axioms to check in \\cref{thm:charAOp}. Axioms \\eqref{eq1} - \\eqref{eq3} all concern $\\beta$, and are immediate from the defining formula. Axiom \\eqref{eq4} is obvious for the elements $m_{k}$, from which it follows in general by the formulas defining $\\delta$. For axiom \\eqref{eq5}, one can check easily that\n  \\[\n    \\delta_{n; 1, \\ldots, 1}(m_{n}) = m_{n}, \\quad \\delta_{1;n}(m_{n}) = m_{n}\n  \\]\nand once again the general case follows from these. Axiom \\eqref{eq6} holds by the construction of $\\delta$. Axiom \\eqref{eq8} can be verified with only one $h_{i}$ nontrivial at a time, and then it is a simple consequence of the second and third relations for $J_{n}$.\n\nAxiom \\eqref{eq9} is straightforward to check when only a single $g_{i}$ is a generator and the rest are identities using the defining formulas, and the general case then follows using axiom \\eqref{eq6}. Using \\eqref{eq9}, we can then prove axiom \\eqref{eq7} as follows; we suppress the subscripts on different $\\delta$'s for clarity. We must show\n  \\[\n    \\delta_{m_1 + \\cdots + m_n; p_{11}, \\ldots, p_{1m_{1}}, p_{21}, \\ldots, p_{nm_{m}}}\\left( \\delta_{n; m_{1}, \\ldots, m_{n}}(f) \\right) = \\delta_{n; P_{1}, \\ldots, P_{n}}(f),\n  \\]\nand we do so on $m_{n}$. By definition, we have\n  \\[\n    \\delta \\left( \\delta(m_{n}) \\right) = \\delta \\left( m_{\\underline{k}} \\beta(m_{k_{1}}, \\ldots, m_{k_{n}}) \\right),\n  \\]\nwhich by axiom \\eqref{eq6} is equal to\n  \\[\n    m_{P_{1} + \\cdots + P_{n}} \\cdot \\beta(m_{p_{11}}, \\ldots, m_{p_{n,m_{n}}}) \\cdot \\delta\\left( \\beta(m_{k_{1}}, \\ldots, m_{k_{n}}) \\right).\n  \\]\nNow this last term is equal to $\\beta \\left( \\delta(m_{k_{1}}), \\ldots, \\delta(m_{k_{n}}) \\right)$ by axiom \\eqref{eq9}, which is then equal to\n  \\[\n    \\beta \\left( m_{P_{1}}\\cdot \\beta(m_{p_{11}}, \\ldots, m_{p_{1,m_{1}}}), \\ldots,  m_{P_{n}}\\cdot \\beta(m_{p_{n1}}, \\ldots, m_{p_{1,m_{n}}}) \\right).\n  \\]\nTaken all together, the left hand side of axiom \\eqref{eq9} is then\n  % \\[\n  %   \\resizebox{\\textwidth}{!}{$m_{P_{1} + \\cdots + P_{n}} \\cdot \\beta(m_{p_{11}}, \\ldots, m_{p_{n,m_{n}}}) \\cdot \\beta \\left( m_{P_{1}}\\cdot \\beta(m_{p_{11}}, \\ldots, m_{p_{1,m_{1}}}), \\ldots,  m_{P_{n}}\\cdot \\beta(m_{p_{n1}}, \\ldots, m_{p_{1,m_{n}}}) \\right).$}\n  % \\]\n  % \\[\n  %   m_{P_{1} + \\cdots + P_{n}} \\cdot \\beta(m_{p_{11}}, \\ldots, m_{p_{n,m_{n}}}) \\cdot \\beta \\left( m_{P_{1}}\\cdot \\beta(m_{p_{11}}, \\ldots, m_{p_{1,m_{1}}}), \\ldots,  m_{P_{n}}\\cdot \\beta(m_{p_{n1}}, \\ldots, m_{p_{1,m_{n}}}) \\right).\n  % \\]\n  \\[\n    m_{P_{1} + \\cdots + P_{n}} \\cdot \\beta(m_{p_{11}}, \\ldots, m_{p_{n,m_{n}}}) \\cdot \\beta \\left( m_{P_{1}}\\cdot \\beta(\\underline{m_{p_{1}}}), \\ldots,  m_{P_{n}}\\cdot \\beta(\\underline{m_{p_{n}}}) \\right).\n  \\]\nwhere $\\underline{m_{p_{i}}} = m_{p_{i,1}}, \\cdots, m_{i,m_{i}}$\nAll of the terms coming from an $m_{p_{ij}}$ can be collected together, and since $s_{p,q}^{2} = e$ for all $p,q$, these cancel. This leaves\n  \\[\n    m_{P_{1} + \\cdots + P_{n}} \\cdot \\beta \\left( m_{P_{1}}, \\ldots,  m_{P_{n}} \\right)\n  \\]\nwhich is the right hand side of axiom \\eqref{eq9} as desired.\n\\end{proof}\n\n\\begin{lem}\nThe $2$-monad $C$ for strict coboundary categories is a club.\n\\end{lem}\n\\begin{proof}\nThis is obvious by \\ref{pres2}.\n\\end{proof}\n\n\\begin{thm}\nThe free coboundary category on one element, $C1$, is isomorphic to $B\\mb{J} = \\coprod BJ_{n}$.\n\\end{thm}\n\\begin{proof}\nThe universal property we desire is with respect to strict coboundary functors (i.e., coboundary functors whose underlying monoidal functor is strict), so we must give $B\\mb{J}$ the structure of a strict coboundary category and then check that to give a strict coboundary functor $B\\mb{J} \\rightarrow X$ to any other strict coboundary category is the same as giving an object of $X$.\n\nThe category $B\\mb{J}$ has natural numbers as objects, and addition as its tensor product. The tensor product of two morphisms is given by $\\beta$ as in \\ref{J_aop}, and it is simple to check that this is a strict monoidal structure. The commutor $\\sigma_{m,n}$ is $s_{1, m+n}s_{1,m}s_{m+1,m+n}$. Using the relations in $J_{n}$, it is clear that $\\sigma_{m,n}\\sigma_{n,m}$ is the identity, so we only have one more axiom to verify in order to give a coboundary structure. By definition, this axiom is equivalent to the equation\n  \\[\n    \\sigma_{m, p+n}\\cdot \\beta(e_{m}, \\sigma_{n,p}) = \\sigma_{n+m,p}\\cdot \\beta(\\sigma_{m,n},e_{p})\n  \\]\nholding for all $m,n,p$. Each side has six terms when written out using the definitions of $\\sigma$ and $\\beta$, two terms on each side cancel using $s_{p,q}^{2} = e$ and the disjointness relation, and the other four terms match after using the disjointness relation. This establishes the coboundary structure on $B\\mb{J}$; note that $\\sigma_{1,1} = s_{1,2}$, the nontrivial element of $J(2)$.\n\nEvery strict coboundary functor $F \\colon B\\mb{J} \\rightarrow X$ determines an object of $X$ by evaluation at $1$. Conversely, given an object $x$ of a strict coboundary category $X$, there is an action of $J_{n}$ on $X(x^{n},x^{n})$ by Theorem 7 of \\cite{hk-cobound} and therefore a strict monoidal functor $\\overline{x} \\colon B\\mb{J} \\rightarrow X$ with $\\overline{x}(1) = x$. By construction, this strict monoidal functor is in fact a strict coboundary functor since it sends the commutor $\\sigma_{1,1}$ in $B\\mb{J}$ to $\\sigma_{x,x}$ in $X$. In fact, the calculations in \\cite{hk-cobound} leading up to Theorem 7 show that every element of $J_{n}$ is given as an operadic composition of $\\sigma$'s, so requiring $\\overline{x}$ to be a strict coboundary functor with $\\overline{x}(1) = x$ determines the rest of the functor uniquely. This establishes the bijection between strict coboundary functors $F \\colon B\\mb{J} \\rightarrow X$ and objects of $X$ which proves that $B\\mb{J}$ is the free strict coboundary category on one object.\n\\end{proof}\n\n\\begin{cor}\nThe $2$-monad $C$ for coboundary categories corresponds, using  \\cref{thm:club=operad}, to the action operad $\\mb{J}$.\n\\end{cor}\n\n\\subsection{Basic properties of monoidal categories via action operads}\nQQQ Intro text to section.\nQQQ Comment on crossedness.\n\nFollowing the characterisation of action operads in \\cref{surjortriv}, we define crossed action operads as follows.\n\n\\begin{Defi} \nAn action operad $\\ML$ is \\emph{crossed} if each of the maps $\\pi_n \\colon \\ML(n) \\rightarrow \\Sigma_n$ is surjective.\n\\end{Defi}\n\n\\begin{lem}\\label{Gnobj} $\\ob(\\ELn)$ is the free monoid on $n$ generators, which is $\\mathbb{N}^{\\ast n}$, the free product of $n$ copies of $\\mathbb{N}$.\n\\end{lem}\n\nAs an immediate consequence of this, the source and target of any given morphism in $\\ELn$ must be related to one another via some permutation of the form $\\pi(g)$. This gives us an easy way to calculate the \\emph{connected components} of $\\ELn$, which are just the equivalence classes of objects under the relation $x \\sim y$ if there exists a morphism $f \\colon  x \\rightarrow y$ or $f \\colon y \\rightarrow x$.\n\\begin{prop}\\label{Gnconcomp} Considered as a monoid under tensor product, the connected components of $\\ELn$ are\n  \\[\n    \\pi_0(\\ELn) = \\begin{cases}\n    \t\t\t\t\t\t\t \\mathbb{N}^n & \\text{if $\\ML$ is crossed}, \\\\\n    \t\t\t\t\t\t\t \\mathbb{N}^{\\ast n} & \\text{otherwise}.\n    \t\t\t\t\t\t\t\\end{cases}\n  \\] \nAlso, the canonical homomorphism sending objects in $\\ELn$ to their connected component,\n  \\[\n    [ \\, \\_ \\, ] \\colon \\ob(\\ELn) \\rightarrow \\pi_0(\\ELn)\n  \\]\nis the quotient map of abelianization\n  \\[\n    \\ab \\colon \\mathbb{N}^{*n} \\rightarrow (\\mathbb{N}^{*n})^{\\ab} \\, = \\, \\mathbb{N}^n\n  \\]\nwhen $\\ML$ is crossed, and the identity map $\\id_{\\mathbb{N}^{*n}}$ otherwise.\n\\end{prop}\n\\begin{proof}\nBy \\cref{hom-set-lemma}, all morphisms in $\\ELn$ can be written uniquely as $\\alpha(g; \\id_{x_1}, \\ldots, \\id_{x_m})$, for some $g \\in G(m)$ and $x_i \\in \\{z_1, \\ldots, z_n \\}$. Since maps of this form have source $x_1 \\otimes \\ldots \\otimes x_m$ and target $x_{\\pi(g^{-1})(1)} \\otimes \\ldots \\otimes x_{\\pi(g^{-1})(m)}$, we see that the only pairs of object which might have a morphism between them are those that can be expanded as tensor products that differ by some permutation. \n\n\nIf our action operad $\\ML$ is crossed, then for any two objects like this, say source $x_1 \\otimes \\ldots \\otimes x_m$ and target $x_{\\sigma^{-1}(1)} \\otimes \\ldots \\otimes x_{\\sigma^{-1}(m)}$ for an arbitrary $\\sigma \\in \\Sigma_m$ , we can always find a map $\\alpha(g; \\id_{x_1}, \\ldots, \\id_{x_m})$ between them, because by \\cref{surjortriv} the underlying permutation maps $\\pi_m \\colon  G(m) \\rightarrow \\Sigma_m$ are all surjective and so there must exist at least one $g$ with $\\pi(g) = \\sigma$. In particular, for any two generating objects $z_i$ and $z_j$ of $\\ELn$ there must exist at least morphism between $z_i \\otimes z_j$ and $z_j \\otimes z_i$, and therefore\n  \\[\n    [z_i] \\otimes [z_j] = [z_i \\otimes z_j] = [z_j \\otimes z_i] = [z_j] \\otimes [z_i].\n  \\]\n\nThus the canonical map $[ \\, \\_ \\, ] \\colon \\mathrm{Ob}(\\ELn) \\rightarrow \\pi_0(\\ELn)$ is the one that makes the free product of $\\mathbb{N}^{*n}$ commutative; that is, the quotient map for the abelianization $\\ab \\colon \\mathbb{N}^{*n} \\rightarrow (\\mathbb{N}^{*n})^{\\ab}$. Hence $\\pi_0(\\ELn) = \\mathbb{N}^n$.\n\n%QQQ Removed \"underlying permutation operad\" as this means slightly different things in other texts\n% Conversely, if $\\ML$ is non-crossed then its underlying permutation operad $\\mathrm{Im}\\pi$ (see \\cref{image}) is trivial, and so the only morphisms in $\\ELn$ will be those of the form\nConversely, if $\\ML$ is non-crossed then its image operad $\\mathrm{Im}\\pi$ (see \\cref{image}) is trivial, and so the only morphisms in $\\ELn$ will be those of the form\n  \\[\n    \\alpha(e_m;\\id_{x_1}, \\ldots, \\id_{x_m}) = \\id_{x_1} \\otimes \\ldots \\otimes \\id_{x_m} = \\id_{x_1 \\otimes \\ldots \\otimes x_m}.\n  \\]\nTherefore the map $[ \\, \\_ \\,]$ just sends each object to its identity morphism, and since that function is one-to-one and onto it follows that\n% \\[ \\pi_0(\\ELn) \\quad = \\quad \\mathrm{Ob}(\\ELn) \\quad = \\quad \\mathbb{N}^{\\ast n}, \\quad \\quad \\quad \\quad \\quad [ \\, \\_ \\,] \\quad = \\quad \\id_{\\mathbb{N}^{*n}} \\]\n  \\[\n    \\pi_0(\\ELn) = \\mathrm{Ob}(\\ELn) = \\mathbb{N}^{\\ast n}, [ \\, \\_ \\,] = \\id_{\\mathbb{N}^{*n}}\n  \\]\nby \\cref{Gnobj}.\n\\end{proof}\n\n\\cref{Gnconcomp} is not the only way that the behaviour of $\\ELn$ is contingent on whether $\\ML$ is crossed, we will also find that the following property of monoidal categories holds.\n\n\\begin{Defi} A strict monoidal category $X$ is said to be \\emph{spacial} if tensoring with endomorphisms of the unit object commutes with all objects in the sense that \n  \\[\n    f~\\otimes~x =  x~\\otimes~f\n  \\]\nholds for all objects $x$ and morphisms $f \\colon I \\rightarrow I$. This amounts to requiring the commutativity of the following diagram.\n\n  \\[\n    \\xy\n      (0,0)*+{I \\otimes x}=\"a\";\n      (20,0)*+{I \\otimes x}=\"b\";\n      (20,-10)*+{x}=\"c\";\n      (20,-20)*+{x \\otimes I}=\"d\";\n      (0,-10)*+{x}=\"e\";\n      (0,-20)*+{x \\otimes I}=\"f\";\n      %\n      {\\ar^{f \\otimes x} \"a\" ; \"b\"};\n      {\\ar@{=} \"b\" ; \"c\"};\n      {\\ar@{=} \"c\" ; \"d\"};\n      {\\ar@{=} \"a\" ; \"e\"};\n      {\\ar@{=} \"e\" ; \"f\"};\n      {\\ar_{x \\otimes f} \"f\" ; \"d\"};\n    \\endxy\n  \\]\n\\end{Defi}\n\nThe motivation for the name `spacial' comes from the context of string diagrams \\cite{sel-graphmon}. In a string diagram, the act of tensoring two strings together is represented by placing those strings side by side. Since the defining feature of the unit object is that tensoring it with other objects should have no effect, the unit object is therefore represented diagrammatically by the absence of a string. An endomorphism of the unit thus appears as an entity with no input or output strings, detached from the rest of the diagram.\n\\begin{center}\n  \\begin{tikzpicture}\n    \\node(a) at (-0.5,0.5)[circle, fill=white, radius=2, draw]{$f$};\n    \\draw (1,2) -- (1,0) node[circle, fill=white, radius=22, draw]{$id_x$} -- (1,-2);\n    \\node at (3,0) {$=$};\n    \\node(b) at (6.5,0.5)[circle, fill=white, radius=2, draw]{$f$};\n    \\draw (5,2) -- (5,0) node[circle, fill=white, radius=22, draw]{$id_x$} -- (5,-2);\n    \\draw (-1,-2) -- (-1,2) -- (2,2) -- (2,-2) -- (-1,-2);\n    \\draw (4,-2) -- (4,2) -- (7,2) -- (7,-2) -- (4,-2);  \n  \\end{tikzpicture}\n\\end{center}\nIn a real-world version of these diagrams, we could use this detachedness to grab these endomorphisms and slide them over or under any strings we please, without affecting anything else in the diagram. This ability is embodied algebraically by the equation above, and hence categories which obey it are called `spacial'.\n\n\\begin{Defi}\\label{def:actionmorphism}\n  Let\n    \\[\n      \\alpha \\colon \\coprod_{n \\in \\mathbb{N}} P(n) \\otimes_{\\Lambda(n)} X^n \\rightarrow X\n    \\]\n  be the action of a $\\ML$-operad, for some $\\ML$-operad $P$. Let $g \\in P(n)$ and let\n    \\[\n      (f_1, \\ldots, f_n) \\colon (x_1, \\ldots, x_n) \\rightarrow (x_1', \\ldots, x_n')\n    \\]\n  be a morphism in $X^n$. An \\emph{action morphism} is a morphism of the form $\\alpha(g; f_1, \\ldots, f_n)$ in $X$.\n\\end{Defi}\n\n\\begin{rem}\n  Most often we will consider action morphisms as in \\cref{def:actionmorphism} where each of the $f_i$ is an identity, in which case we will use a shorthand notation\n    \\[\n      g^\\otimes = \\alpha(g;\\id_{x_1}, \\ldots, \\id_{x_n}).\n    \\]\n\\end{rem}\n\n\\begin{lem}\\label{spacial}\n  If $\\ML$ is a crossed action operad, then all $\\ML$-monoidal categories are spacial.\n\\end{lem}\n\\begin{proof}\nLet $\\ML$ be a crossed action operad, let $X$ be a $\\ML$-monoidal category, and fix $x \\in \\mathrm{Ob}(X)$ and \\( f\\colon I \\rightarrow I \\). From \\cref{surjortriv} we know that \\( \\pi \\colon \\Lambda(2) \\rightarrow S_2 \\) is surjective, so that the set $\\pi^{-1}(  \\trans{1}{2}  )$ is non-empty,\n% and from the uniqueness of action morphism composites (\\cref{hom-set-lemma})\nand from the rules for composition of action morphisms we see that for any such $g \\in \\pi^{-1}(  \\trans{1}{2}  )$,\n  \\begin{align*}\n    \\alpha(g  ;  \\id_x,  \\id_I  )\\alpha(  e_2  ;  \\id_x,  f  ) &= \\alpha(ge_2 ; \\id_x \\id_x, \\id_I f)\\\\\n    &= \\alpha(g  ;  \\id_x, f) \\\\\n    % &= \\alpha(e_2 g; \\id_x \\id_x, f \\id_I) \\\\\n    &= \\alpha(e_2; f, \\id_x )\\alpha(g; \\id_x, \\id_I). \\\\\n  \\end{align*}\n\nThus in order to obtain the result, it will suffice to find a particular $g \\in \\pi^{-1}(\\trans{1}{2})$ for which\n  \\[\n    \\alpha(g; \\id_x, \\id_I) = \\id_x.\n  \\]\nHowever, since\n  \\begin{align*}\n  \t\t\\alpha(  g  ;  \\id_x,  \\id_I  ) &= \\alpha(  g  ;  \\id_x,  \\alpha( e_0; - )  ) \\\\\n  \t\t&= \\alpha(  \\mu(g; e_1, e_0)  ;  \\id_x  )\n\t\t\\end{align*}\nall we need is to find a $g \\in \\pi^{-1}(\\trans{1}{2})$ for which\n  \\[\n    \\mu(g; e_1, e_0) = e_1.\n  \\]\nTo this end, choose an arbitrary element $h \\in \\pi^{-1}(\\trans{1}{2})$. This $h$ may not obey the above equation, but can be used to construct a new element, $g$, which does. Specifically, define\n  \\[\n    k := \\mu(h; e_1, e_0 )\n  \\]\nand then consider\n  \\[\n    g := h\\mu\\left(e_2; k^{-1}, e_1\\right).\n  \\] \nTo see that this is the correct choice of $g$, first note that we must have \\( \\pi(k) = e_1 \\), since this is the only element of $S_1$. Following from that, we have \n  \\begin{align*}\n  \t\\pi \\left(  \\mu(e_2; k^{-1}, e_1)  \\right) &= \\mu \\left(  \\pi(e_2) \\ ;  \\pi\\left(k^{-1}\\right),  \\pi(e_1)  \\right) \\\\\n  \t&= \\mu \\left(  e_2  \\ ;  e_1,  e_1  \\right) \\\\\n  \t&= e_2\n  \\end{align*}\nand hence\n  \\begin{align*}\n\t\t\\pi(g) &= \\pi \\left(h \\mu\\left(e_2; k^{-1}, e_1\\right) \\right) \\\\\n\t\t       &= \\pi(h) \\pi \\left(\\mu\\left(e_2; k^{-1}, e_1\\right) \\right) \\\\\n\t\t       &= \\trans{1}{2} e_2 \\\\\n\t\t       &= \\trans{1}{2}.\n  \\end{align*}\nSo $g$ is indeed in $\\pi^{-1}(\\trans{1}{2})$, and furthermore\n  \\begin{align*}\n  \t\\mu(g; e_1, e_0) & = \\mu \\left(  h \\mu\\left(e_2; k^{-1}, e_1\\right) \\ ;  e_1,  e_0  \\right) \\\\\n                  \t &= \\mu(  h \\ ;  e_1,  e_0  ) \\mu \\left(  \\mu\\left(e_2; k^{-1}, e_1\\right) ;  e_1,  e_0   \\right) \\\\\n                  \t &= \\mu(  h \\ ;  e_1,  e_0  ) \\mu \\left(  e_2 \\ ;  \\mu\\left(k^{-1}; e_1\\right),  \\mu(e_1;  e_0)  \\right) \\\\\n                  \t &= \\mu(  h \\ ;  e_1,  e_0  ) \\mu\\left(  e_2 \\ ;  k^{-1}, e_0  \\right) \\\\\n                  \t &= k k^{-1} \\\\\n                  \t &= e_1.\n  \\end{align*}\nTherefore, $h \\mu\\left(e_2; k^{-1}, e_1\\right)$ the required element $g$, and so working backwards through the proof we obtain the result. Since\n  \\[\n    \\mu(g; e_1, e_0) = e_1,\n  \\]\nthen\n  \\[\n    \\alpha(g;\\id_x, \\id_I) = \\id_x.\n  \\]\nSimilarly,\n  \\[\n    \\alpha(g;\\id_x, \\id_I) \\alpha(e_2; \\id_x, f) = \\alpha(e_2; f, \\id_x) \\alpha(g; \\id_x, \\id_I),\n  \\]\nwhich gives\n  \\[\n    \\alpha(e_2; \\id_x, f) = \\alpha(e_2; f, \\id_I).\n  \\]\n\n\\end{proof} \n\n\\cref{hom-set-lemma} also gives a complete description of how the morphisms of $\\ELn$ interact as a monoid under tensor product, though to best express this we need some new terminology.\n\n\\begin{Defi}\\label{def:length} Let $\\ML$ be an action operad. \n\\begin{enumerate}\n\\item We will use the notation $\\lop$ to denote the \\emph{underlying monoid} of this action operad. The underlying set of $\\lop$ is the disjoint union, $\\coprod_n \\Lambda(n)$, with block sum as the binary operation, $g \\oplus h = \\mu(e_2; g, h)$.\n\n\\item This monoid comes equipped with a homomorphism $| \\, \\_ \\, | \\colon \\Lambda \\rightarrow \\mathbb{N}$, sending each $g \\in \\Lambda$ to the natural number $m$ if and only if $g$ is an element of the group $\\Lambda(m)$. We call this number $|g|$ the \\emph{length} of $g$.\n\\end{enumerate}\n\\end{Defi}\n\nQQQ We have two different lengths which are sometimes the same, fix that. I want the free monoid length to be $\\ell$ I think.\n\n\\begin{Defi}\\label{lengthdef} Let $S$ be a set and $F(S)$ the free monoid on $S$, the monoid whose elements are strings of elements of $S$ and whose binary operation is concatenation. Then we will denote by\n  \\[\n    | \\, \\_ \\, | \\colon F(S) \\rightarrow \\mathbb{N}\n  \\]\nthe monoid homomorphism defined by sending each element of $S \\subseteq F(S)$ to 1, and therefore also each concatenation of $n$ elements of $S$ to the natural number $n$. Again, we will call $|x|$ the \\emph{length} of $x \\in F(S)$.\n\\end{Defi}\n\n\\begin{lem} \\label{Gnmor} The monoid of morphisms of the algebra $\\ELn$ is\n  \\[\n    \\mathrm{Mor}(\\ELn) \\cong \\lop \\times_{\\mathbb{N}} \\mathbb{N}^{\\ast n}\n  \\]\nwhere this is a pullback taken over the respective length homomorphisms,\n  % \\[\n  %   \\begin{tikzcd}\n  %     \\lop \\times_{\\mathbb{N}} \\mathbb{N}^{\\ast n} \\ar[dd, shift left=4] \\ar[rr] \\ar[ddrr, phantom, \"\\lrcorner\", very near start, shift left] & & \\mathbb{N}^{\\ast n} \\ar[dd, \"| \\, \\_ \\, |\"] & \\\\\n  %     & & & \\\\\n  %     \\quad \\quad \\Lambda \\ar[rr, \"| \\, \\_ \\, |\"] & & \\mathbb{N} &\n  %   \\end{tikzcd}\n  % \\]\n  \\[\n    \\xy\n      (0,0)*+{\\Lambda^{\\oplus} \\times_{\\mathbb{N}} \\mathbb{N}^{\\ast n}}=\"a\";\n      (20,0)*+{\\mathbb{N}^{\\ast n}}=\"b\";\n      (0,-20)*+{\\Lambda^{\\oplus}}=\"c\";\n      (20,-20)*+{\\mathbb{N}}=\"d\";\n      %\n      {\\ar \"a\" ; \"b\"};\n      {\\ar^{| \\_ |} \"b\" ; \"d\"};\n      {\\ar \"a\" ; \"c\"};\n      {\\ar_{| \\_ |} \"c\" ; \"d\"};\n      %\n      {\\ar@{-} (2.5,-5) ; (5,-5)};\n      {\\ar@{-} (5,-5) ; (5,-2.5)};\n    \\endxy\n  \\]\nusing the fact that $\\mathbb{N}^{\\ast n}$ is the free monoid $F\\left( \\, \\{z_1, \\ldots, z_n\\} \\, \\right)$.\n\\end{lem}\n\\begin{proof}\nAn element of $\\Lambda^{\\oplus} \\times_{\\mathbb{N}} F( \\, \\{z_1, \\ldots, z_n\\} \\, )$ is an element $g \\in \\Lambda(m)$ for some $m$, together with an $m$-tuple of objects $(x_1, \\ldots, x_m)$ from the set of generators $\\{z_1, \\ldots, z_n\\}$. Thus the action on $\\ELn$ defines a function \n% \\[ \\begin{array}{rlrll}\n% \t\t\t\\alpha & \\colon & \\Lambda \\times_{\\mathbb{N}} F\\left( \\, \\{z_1, \\ldots, z_n\\} \\, \\right) & \\rightarrow & \\mathrm{Mor}(\\ELn) \\\\\n% \t\t\t& \\colon & (g;x_1, \\ldots, x_m) & \\mapsto & \\alpha(g; \\id_{x_1}, \\ldots, \\id_{x_m})\n% \t\t\\end{array}\n% \\]\n\\begin{align*}\n    \\alpha \\colon \\Lambda^{\\oplus} \\times_{\\mathbb{N}} F\\left( \\, \\{z_1, \\ldots, z_n\\} \\, \\right) &\\rightarrow \\mathrm{Mor}(\\ELn) \\\\\n    (g;x_1, \\ldots, x_m) &\\mapsto \\alpha(g; \\id_{x_1}, \\ldots, \\id_{x_m})\n\\end{align*}\nBut by \\cref{hom-set-lemma}, each element of $\\mathrm{Mor}(\\ELn)$ can be expressed in the form $\\alpha(g; \\id_{x_1}, \\ldots, \\id_{x_m})$ for a unique collection $(g;x_1, \\ldots, x_m)$, and so this function $\\alpha$ is actually a bijection of sets. Furthermore, this function preserves tensor product, since\n  \\begin{align*}\n  \t\t\\alpha\\left((g;f_1, \\ldots, f_m) \\otimes (g';f'_1, \\ldots, f'_m)\\right) &= \\alpha\\left(g \\otimes g';f_1, \\ldots, f_m, f'_1, \\ldots, f'_m \\, \\right) \\\\\n  \t\t&= \\alpha\\left(g ; f_1, \\ldots, f_m \\right) \\otimes \\alpha\\left(g' ; f'_1, \\ldots, f'_m \\right)\n  \\end{align*}\nand hence it is a monoid isomorphism, as required.\n\\end{proof}\n\n\\subsection{Pseudo-commutativity}\n\nThis section gives conditions sufficient to equip the $2$-monad $\\underline{P}$ induced by a $\\ML$-operad $P$ in $\\mb{Cat}$ with a pseudo-commutative structure. Such a pseudo-commutativity will then give the $2$-category $\\mb{Ps}\\mbox{-}\\underline{P}\\mbox{-}\\mb{Alg}$ some additional structure that we briefly explain here. For a field $k$, the category $\\mb{Vect}$ of vector spaces over $k$ has many nice features. Of particular interest to us are the following three structures. First, the category $\\mb{Vect}$ is monoidal using the tensor product $\\otimes_{k}$. Second, the set of linear maps $V \\rightarrow W$ is itself a vector space which we denote $[V,W]$. Third, there is a notion of multilinear map $V_{1} \\times \\cdots \\times V_{n} \\rightarrow W$, with linear maps being the $1$-ary version. While these three structures are each useful in isolation, they are tied together by natural isomorphisms\n  \\[\n    \\mb{Vect}(V_{1} \\otimes V_{2}, W) \\cong \\mb{Vect}(V_{1}, [V_{2}, W]) \\cong \\mb{Bilin}(V_{1} \\times V_{2}, W)\n  \\]\nexpressing that $\\otimes$ gives a closed monoidal structure which represents the multicategory of multilinear maps. Moreover, the adjunction between $\\mb{Vect}$ and $\\mb{Sets}$ respects all of this structure in the appropriate way. This incredibly rich interplay between the tensor product, the internal mapping space, and the multicategory of multilinear maps all arises from the free vector space monad on $\\mb{Sets}$ being a \\textit{commutative} monad \\cite{kock-monads, kock-closed, kock-strong}. The notion of a pseudo-commutative $2$-monad \\cite{HP} is then a generalization of this machinery to a $2$-categorical context, and can be viewed as a starting point for importing tools from linear algebra into category theory.\n\nThe aim of this section is to give conditions that ensure that the $2$-monad $\\underline{P}$ associated to a $\\ML$-operad $P$ has a pseudo-commutative structure. We give the definition of pseudo-commutativity as in \\cite{HP} but before doing so we require the definition of a strength for a $2$-monad.\n\\begin{Defi}\nA \\textit{strength} for an endo-$2$-functor $T \\colon \\m{K} \\rightarrow \\m{K}$ on a $2$-category with products and terminal object $1$ consists of a $2$-natural transformation $d$ with components\n    \\[\n        d_{A,B} \\colon A \\times TB \\rightarrow T(A \\times B)\n    \\]\nsatisfying the following unit and associativity axioms \\cite{kock-monads}.\n  \\[\n    \\xy\n    (0,0)*+{1 \\times TA}=\"ul1\";\n    (30,0)*+{T(1 \\times A)}=\"ur1\";\n    (30,-13)*+{TA}=\"br1\";\n    (50,0)*+{A \\times B}=\"ul2\";\n    (80,0)*+{A \\times TB}=\"ur2\";\n    (80,-13)*+{T(A \\times B)}=\"br2\";\n    {\\ar^{d_{1,A}} \"ul1\"; \"ur1\"};\n    {\\ar^{\\cong} \"ur1\"; \"br1\"};\n    {\\ar_{\\cong} \"ul1\"; \"br1\"};\n    {\\ar^{1 \\times \\eta} \"ul2\"; \"ur2\"};\n    {\\ar^{d_{A,B}} \"ur2\"; \"br2\"};\n    {\\ar_{\\eta} \"ul2\"; \"br2\"};\n    \\endxy\n  \\]\n  \\[\n    \\xy\n    (0,0)*+{(A \\times B) \\times TC}=\"ul\";\n    (70,0)*+{T \\left((A \\times B) \\times C \\right)}=\"ur\";\n    (0,-15)*+{A \\times (B \\times TC)}=\"ll\";\n    (35,-15)*+{A \\times T(B \\times C)}=\"m\";\n    (70,-15)*+{ T \\left(A \\times (B \\times C) \\right)}=\"lr\";\n    {\\ar^{d_{AB,C}} \"ul\"; \"ur\"};\n    {\\ar^{Ta} \"ur\"; \"lr\"};\n    {\\ar_{a} \"ul\"; \"ll\"};\n    {\\ar_{1 \\times d_{B,C}} \"ll\"; \"m\"};\n    {\\ar_{d_{A,BC}} \"m\"; \"lr\"};\n    \\endxy\n  \\]\n  \\[\n    \\xy\n    (0,0)*+{A \\times T^{2}B}=\"ul\";\n    (60,0)*+{T^{2}(A \\times B)}=\"ur\";\n    (0,-15)*+{A \\times TB}=\"ll\";\n    (30,0)*+{T(A \\times TB)}=\"m\";\n    (60,-15)*+{ T(A \\times B)}=\"lr\";\n    {\\ar^{d_{A,TB}} \"ul\"; \"m\"};\n    {\\ar^{Td_{A,B}} \"m\"; \"ur\"};\n    {\\ar^{\\mu} \"ur\"; \"lr\"};\n    {\\ar_{1 \\times \\mu} \"ul\"; \"ll\"};\n    {\\ar_{d_{A,B}} \"ll\"; \"lr\"};\n    \\endxy\n  \\]\nSimilarly, a \\emph{costrength} for $T$ consists of a $2$-natural transformation $d^{\\ast}$ with components\n  \\[\n      d^{\\ast}_{A,B} \\colon TA \\times B \\rightarrow T(A \\times B)\n  \\]\nagain satisfying unit and associativity axioms.\n\\end{Defi}\nThe strength and costrength for the associated $2$-monad $\\underline{P}$ are quite simple to define. We define the strength $d$ for $\\underline{P}$ as follows. The component $d_{A,B}$ is a functor\n    \\[\n        d_{A,B} \\colon A \\times \\left(\\amalg P(n) \\times_{\\Lambda(n)} B^n\\right) \\rightarrow \\amalg P(n) \\times_{\\Lambda(n)} \\left(A \\times B \\right)^n\n    \\]\nwhich sends an object $(a, [p;b_1,\\ldots,b_n])$ to the object $[p;(a,b_1),\\ldots,(a,b_n)]$. We also define the costrength similarly, sending an object $([p;a_1,\\ldots,a_n],b)$ to the object which is an equivalence class $[p;(a_1,b), \\ldots, (a_n, b)]$. Both the strength and the costrength are defined in the obvious way on morphisms. QQQ (Check obviousness.)\n\n\\begin{rem}\nIt is crucial to note that the strength $d$ and the costrength $d^{*}$ do not depend on the $\\Lambda$-actions in the following sense. The $\\ML$-operad $P$ has an underlying non-symmetric operad that we also denote $P$, and it has a strength\n  \\[\n    d_{A,B} \\colon A \\times \\left(\\amalg P(n) \\times B^n\\right) \\rightarrow \\amalg P(n) \\times \\left(A \\times B \\right)^n\n  \\]\ngiven by essentially the same formula:\n  \\[\n    \\left( a; (p; b_{1}, \\ldots, b_{n}) \\right) \\mapsto \\left(p; (a,b_{1}), \\ldots, (a, b_{n})\\right).\n  \\]\nThe strength for the $\\Lambda$-equivariant $P$ is just the induced functor between coequalizers.\n\\end{rem}\n\n\\begin{Defi}\n    Given a $2$-monad $T \\colon \\m{K} \\rightarrow \\m{K}$ with strength $d$ and costrength $d^{\\ast}$, a \\textit{pseudo-commutativity} consists of an invertible modification $\\gamma$ with components\n      \\[\n        \\xy\n            (0,0)*+{TA \\times TB}=\"00\";\n            (30,0)*+{T(A \\times TB)}=\"10\";\n            (60,0)*+{T^2(A \\times B)}=\"20\";\n            (0,-15)*+{T(TA \\times B)}=\"01\";\n            (30,-15)*+{T^2(A \\times B)}=\"11\";\n            (60,-15)*+{T(A \\times B)}=\"21\";\n            {\\ar^{d^{\\ast}_{A,TB}} \"00\" ; \"10\"};\n            {\\ar^{Td_{A,B}} \"10\" ; \"20\"};\n            {\\ar^{\\mu_{A \\times B}} \"20\" ; \"21\"};\n            {\\ar_{d_{TA,B}} \"00\" ; \"01\"};\n            {\\ar_{Td^{\\ast}_{A,B}} \"01\" ; \"11\"};\n            {\\ar_{\\mu_{A \\times B}} \"11\" ; \"21\"};\n            {\\ar@{=>}^{\\gamma_{A,B}} (30,-5.5) ; (30,-9.5)};\n        \\endxy\n      \\]\nsatisfying the following three strength axioms, two unit (or $\\eta$) axioms, and two multiplication (or $\\mu$) axioms for all $A$, $B$, and $C$.\n    \\begin{enumerate}\n        \\item $\\gamma_{A \\times B,C} * (d_{A,B} \\times 1_{TC}) = d_{A,B \\times C} * (1_A \\times \\gamma_{B,C})$\n        \\item $\\gamma_{A,B \\times C} * (1_{TA} \\times d_{B,C}) = \\gamma_{A \\times B, C} * (d^{\\ast}_{A,B} \\times 1_{TC})$\n        \\item $\\gamma_{A,B \\times C} * (1_{TA} \\times d^{\\ast}_{B,C}) = d^{\\ast}_{A \\times B,C} * (\\gamma_{A,B} \\times 1_{C})$\n        \\item $\\gamma_{A,B} * (\\eta_A \\times 1_{TB})$  is the identity on $d$.\n        \\item $\\gamma_{A,B} * (1_{TA} \\times \\eta_B)$ is the identity on $d^{*}$.\n        \\item $\\gamma_{A,B} * (\\mu_A \\times 1_{TB})$ is equal to the pasting below.\n          \\[\n            \\xy\n                (0,0)*+{\\scriptstyle T^2A \\times TB}=\"00\";\n                (30,0)*+{\\scriptstyle T(TA \\times TB)}=\"10\";\n                (60,0)*+{\\scriptstyle T^2(A \\times TB)}=\"20\";\n                (90,0)*+{\\scriptstyle T^3(A \\times B)}=\"30\";\n                (0,-15)*+{\\scriptstyle T(T^2A \\times B)}=\"01\";\n                (30,-15)*+{\\scriptstyle T^2(TA \\times B)}=\"11\";\n                (60,-15)*+{\\scriptstyle T^3(A \\times B)}=\"21\";\n                (90,-15)*+{\\scriptstyle T^2(A \\times B)}=\"31\";\n                (0,-30)*+{\\scriptstyle T^2(TA \\times B)}=\"02\";\n                (30,-30)*+{\\scriptstyle T(TA \\times B)}=\"12\";\n                (60,-30)*+{\\scriptstyle T^2(A \\times B)}=\"22\";\n                (90,-30)*+{\\scriptstyle T(A \\times B)}=\"32\";\n                {\\ar^{d^{\\ast}_{TA,TB}} \"00\" ; \"10\"};\n                {\\ar^{Td^{\\ast}_{A,TB}} \"10\" ; \"20\"};\n                {\\ar^{T^2 d_{A,B}} \"20\" ; \"30\"};\n                {\\ar_{d_{T^2A,B}} \"00\" ; \"01\"};\n                {\\ar_{Td_{TA,B}} \"10\" ; \"11\"};\n                {\\ar^{T\\mu_{A \\times B}} \"30\" ; \"31\"};\n                {\\ar_{T^2 d^{\\ast}_{A,B}} \"11\" ; \"21\"};\n                {\\ar_{T\\mu_{A \\times B}} \"21\" ; \"31\"};\n                {\\ar_{Td^{\\ast}_{TA,B}} \"01\" ; \"02\"};\n                {\\ar_{\\mu_{TA \\times B}} \"11\" ; \"12\"};\n                {\\ar_{\\mu_{T(A \\times B)}} \"21\" ; \"22\"};\n                {\\ar^{\\mu_{A \\times B}} \"31\" ; \"32\"};\n                {\\ar_{\\mu_{TA \\times B}} \"02\" ; \"12\"};\n                {\\ar_{Td^{\\ast}_{A,B}} \"12\" ; \"22\"};\n                {\\ar_{\\mu_{A \\times B}} \"22\" ; \"32\"};\n                {\\ar@{=>}^{T\\gamma_{A,B}} (60,-5.5) ; (60,-9.5)};\n                {\\ar@{=>}^{\\gamma_{TA,B}} (12.5,-13) ; (12.5,-17)};\n            \\endxy\n          \\]\n        \\item $\\gamma_{A,B} * (1_{TA} \\times \\mu_B)$ is equal to the pasting below.\n          \\[\n            \\xy\n                (0,0)*+{\\scriptstyle TA \\times T^2B}=\"00\";\n                (30,0)*+{\\scriptstyle T(A \\times T^2B)}=\"10\";\n                (60,0)*+{\\scriptstyle T^2(A \\times TB)}=\"20\";\n                (0,-15)*+{\\scriptstyle T(TA \\times TB)}=\"01\";\n                (30,-15)*+{\\scriptstyle T^2(A \\times TB)}=\"11\";\n                (60,-15)*+{\\scriptstyle T(A \\times TB)}=\"21\";\n                (0,-30)*+{\\scriptstyle T^2(TA \\times B)}=\"02\";\n                (30,-30)*+{\\scriptstyle T^3(A \\times B)}=\"12\";\n                (60,-30)*+{\\scriptstyle T^2(A \\times B)}=\"22\";\n                (0,-45)*+{\\scriptstyle T^3(A \\times B)}=\"03\";\n                (30,-45)*+{\\scriptstyle T^2(A \\times B)}=\"13\";\n                (60,-45)*+{\\scriptstyle T(A \\times B)}=\"23\";\n                {\\ar^{d^{\\ast}_{A,T^2B}} \"00\" ; \"10\"};\n                {\\ar^{Td_{A,TB}} \"10\" ; \"20\"};\n                {\\ar_{d_{TA,TB}} \"00\" ; \"01\"};\n                {\\ar^{\\mu_{A \\times TB}} \"20\" ; \"21\"};\n                {\\ar_{Td^{\\ast}_{A,TB}} \"01\" ; \"11\"};\n                {\\ar_{\\mu_{A \\times TB}} \"11\" ; \"21\"};\n                {\\ar_{Td_{TA,B}} \"01\" ; \"02\"};\n                {\\ar^{T^2 d_{A,B}} \"11\" ; \"12\"};\n                {\\ar^{Td_{A,B}} \"21\" ; \"22\"};\n                {\\ar^{\\mu_{T(A \\times B)}} \"12\" ; \"22\"};\n                {\\ar_{T^2 d^{\\ast}_{A,B}} \"02\" ; \"03\"};\n                {\\ar^{T\\mu_{A \\times B}} \"12\" ; \"13\"};\n                {\\ar^{\\mu_{A \\times B}} \"22\" ; \"23\"};\n                {\\ar_{T\\mu_{A \\times B}} \"03\" ; \"13\"};\n                {\\ar_{\\mu_{A \\times B}} \"13\" ; \"23\"};\n                {\\ar@{=>}^{T\\gamma_{A,B}} (13,-28) ; (13,-32)};\n                {\\ar@{=>}^{\\gamma_{A,TB}} (30,-5.5) ; (30,-9.5)};\n            \\endxy\n          \\]\n    \\end{enumerate}\n\\end{Defi}\n\n\\begin{rem}\n    It is noted in \\cite{HP} that this definition has some redundancy and therein it is shown that any two of the strength axioms immediately implies the third. Furthermore, the three strength axioms are equivalent when the $\\eta$ and $\\mu$ axioms hold, as well as the following associativity axiom:\n        \\[\n            \\gamma_{A,B \\times C} \\circ (1_{TA} \\times \\gamma_{B,C}) = \\gamma_{A \\times B,C} \\times (\\gamma_{A,B} \\times 1_{TC}).\n        \\]\n\\end{rem}\n\nWe need some further notation before stating our main theorem. Let $\\underline{a} = a_{1}, \\ldots , a_{m}$ and $\\underline{b} = b_{1}, \\ldots, b_{n}$ be two lists. Then the set $\\{ (a_{i}, b_{j})\\}$ has $mn$ elements, and two natural lexicographic orderings. One of these we write as $\\underline{(a, \\underline{b})}$, and it has the order given by\n  \\[\n    (a_{p}, b_{q}) < (a_{r}, b_{s}) \\textrm{ if } \\left\\{ \\begin{array}{l} p < r, \\textrm{ or } \\\\ p=r \\textrm{ and } q < s. \\end{array} \\right.\n  \\]\nThe other we write as $\\underline{(\\underline{a}, b)}$, and it has the order given by\n\\[\n    (a_{p}, b_{q}) < (a_{r}, b_{s}) \\textrm{ if } \\left\\{ \\begin{array}{l} q < s, \\textrm{ or } \\\\ q=s \\textrm{ and } p < r. \\end{array} \\right.\n  \\]\nThe notation $(a, \\underline{b})$ is meant to indicate that there is a single $a$ but a list of $b$'s, so then $\\underline{(a, \\underline{b})}$ would represent a list which itself consists of lists of that form. There exists a unique permutation $\\tau_{m,n} \\in \\Sigma_{mn}$ which has the property that $\\tau_{m,n}(i) = j$ if the $i$th element of the ordered set $\\underline{(a, \\underline{b})}$ is equal to the $j$th element of the ordered set $\\underline{(\\underline{a}, b)}$. By construction, we have $\\tau_{n,m} = \\tau_{m,n}^{-1}$. We illustrate these permutations with a couple of examples.\n    \\[\n        \\xy\n            {\\ar@{-} (0,0) ; (0,-10)};\n            {\\ar@{-} (5,0) ; (10,-10)};\n            {\\ar@{-} (10,0) ; (20,-10)};\n            {\\ar@{-} (15,0) ; (5,-10)};\n            {\\ar@{-} (20,0) ; (15,-10)};\n            {\\ar@{-} (25,0) ; (25,-10)};\n            (12.5,-13)*{\\tau_{2,3}};\n            {\\ar@{-} (45,0) ; (45,-10)};\n            {\\ar@{-} (50,0) ; (65,-10)};\n            {\\ar@{-} (55,0) ; (50,-10)};\n            {\\ar@{-} (60,0) ; (70,-10)};\n            {\\ar@{-} (65,0) ; (55,-10)};\n            {\\ar@{-} (70,0) ; (75,-10)};\n            {\\ar@{-} (75,0) ; (60,-10)};\n            {\\ar@{-} (80,0) ; (80,-10)};\n            (62.5,-13)*{\\tau_{4,2}}\n        \\endxy\n    \\]\nNote then that $\\tau_{m,n}$ is the permutation given by taking the transpose of the $m \\times n$ matrix with entries $(a_{i}, b_{j})$.\n\n% We now give sufficient conditions for equipping the $2$-monad $\\underline{P}$ associated to a $\\ML$-operad $P$ with a pseudo-commutative structure. Let $\\mathbb{N}_{+}$ denote the set of positive natural numbers.\n\nWe now define what it means for a $\\ML$-operad to be pseudo-commuative, before then showing that such an operad yields a pseudo-commutative structure on the corresponding $2$-monad $\\underline{P}$. Let $\\mathbb{N}_{+}$ denote the set of positive integers.\n\n\\begin{Defi}\\label{def:ps-comm_operad}\nLet $P$ be a $\\ML$-operad. A pseudo-commutative structure on $P$ consists of:\n    \\begin{itemize}\n        \\item For each pair $(m,n) \\in \\mathbb{N}_{+}^2$, an element $t_{m,n} \\in \\Lambda(mn)$ such that $\\pi(t_{m,n}) = \\tau_{m,n}$.\n        \\item For each $p \\in P(n)$, $q \\in P(m)$,  a natural isomorphism\n            \\[\n                \\lambda_{p,q} \\colon \\mu(p;q,\\ldots,q) \\cdot t_{m,n} \\cong \\mu(q;p,\\ldots,p).\n            \\]\n            We write this as $\\lambda_{p,q}\\colon \\mu(p; \\underline{q}) \\cdot t_{m,n} \\cong \\mu(q; \\underline{p})$.\n    \\end{itemize}\nThese are required to satisfy the following axioms:  \n    \\begin{enumerate}\n        \\item For all $n \\in \\mathbb{N}_+$,\n            \\[\n                t_{1,n} = e_n = t_{n,1}\n            \\]\n             and for all $p \\in P(n)$, the isomorphism $\\lambda_{p, \\id}\\colon p \\cdot e_n \\cong p$ is the identity map.\n        \\item QQQ Equivariance axiom! (See Remark 11.2 in \\cite{guillou_multiplicative}.) QQQ It's basically `compose, act, switch' is the same as `compose, switch, act', but can't actually see where it's used in the proof:\n          \\[\n            \\lambda_{p \\cdot g, q \\cdot h} \\circ \\mu^P\\left(\\id_p \\cdot g; \\underline{\\id_q \\cdot h}\\right) = \\mu^P\\left(\\id_q \\cdot h; \\underline{\\id_p \\cdot g}\\right) \\circ \\lambda_{p,q}.\n          \\]\n        \\item For all $l, m_1, \\ldots, m_l, n \\in \\mathbb{N}_+$, with $M = \\Sigma m_i$,\n            \\[\n                \\mu^{\\Lambda}\\left(e_l; t_{m_1,n}, \\ldots, t_{m_l,n}\\right) \\cdot \\mu^{\\Lambda}\\left(t_{l,n};\\underline{e_{m_1},\\ldots,e_{m_l}}\\right) = t_{n,M}.\n            \\]\n            Here $\\underline{e_{m_1},\\ldots,e_{m_l}}$ is the list $e_{m_{1}}, \\ldots, e_{m_{l}}$ repeated $n$ times.\n        \\item For all $l, m, n_1,\\ldots, n_m \\in \\mathbb{N}_+$, with $N = \\Sigma n_i$,\n            \\[\n                \\mu^{\\Lambda}\\left(t_{m,l};\\underline{e_{n_1}},\\ldots,\\underline{e_{n_m}}\\right) \\cdot \\mu^{\\Lambda}\\left(e_m;t_{n_1,l},\\ldots,t_{n_m,l}\\right) = t_{N,l}.\n            \\]\n            Here $\\underline{e_{n_{i}}}$ indicates that each $e_{n_{i}}$ is repeated $l$ times.\n        \\item For any $l, m_i, n \\in \\mathbb{N}_+$, with $1 \\leq i \\leq n$, and $p \\in P(l)$, $q_i \\in P(m_i)$ and $r \\in P(n)$, the following diagram commutes. (Note that we maintain the convention that anything underlined indicates a list, and double underlining indicates a list of lists. Each instance should have an obvious meaning from context and the equations appearing above.)\n          \\[\n            \\xy\n                (0,0)*+{\\mu\\left(p;\\underline{\\mu(q_i;\\underline{r})}\\right) \\cdot \\mu(e_l;\\underline{t_{n,m_i}})\\mu(t_{n,l};\\underline{\\underline{e_{m_i}}})}=\"00\";\n                (60,0)*+{\\mu\\left(p;\\underline{\\mu(q_i;\\underline{r})}\\right) \\cdot t_{n,M}}=\"10\";\n                (0,-15)*+{\\mu\\left(p;\\underline{\\mu(q_i;\\underline{r})\\cdot t_{n,m_i}}\\right) \\cdot \\mu(t_{n,l};\\underline{e_{m_1},\\ldots,e_{m_l}})}=\"01\";\n                (60,-20)*+{\\mu\\left(\\mu(p;q_1,\\ldots,q_n);\\underline{\\underline{r}}\\right)\\cdot t_{n,M}}=\"11\";\n                (0,-30)*+{\\mu\\left(p;\\underline{\\mu(r;\\underline{q_i})}\\right) \\cdot \\mu(t_{n,l};\\underline{e_{m_1},\\ldots,e_{m_l}})}=\"02\";\n                (60,-40)*+{\\mu\\left(\\mu(p;q_1,\\ldots,q_n);\\underline{\\underline{r}}\\right)}=\"12\";\n                (0,-45)*+{\\mu\\left(\\mu(p;\\underline{r}) \\cdot t_{n,l} ; \\underline{q_1,\\ldots,q_n}\\right)}=\"03\";\n                (60,-60)*+{\\mu\\left(r;\\underline{\\mu(p;q_1,\\ldots,q_n)}\\right)}=\"13\";\n                (0,-60)*+{\\mu\\left(\\mu(r,\\underline{p});\\underline{q_1,\\ldots,q_n}\\right)}=\"04\";\n                {\\ar@{=} \"00\" ; \"10\"};\n                {\\ar@{=} \"00\" ; \"01\"};\n                {\\ar@{=} \"10\" ; \"11\"};\n                {\\ar_{\\mu(1;\\underline{\\lambda_{q_i,r}}) \\cdot 1} \"01\" ; \"02\"};\n                {\\ar@{=} \"02\" ; \"03\"};\n                {\\ar@{=} \"04\" ; \"13\"};\n                {\\ar_{\\mu(\\lambda_{p,r};1)} \"03\" ; \"04\"};\n                {\\ar^{\\lambda_{\\mu(p;q_1,\\ldots,q_n),r}} \"11\" ; \"12\"};\n                {\\ar@{=} \"12\" ; \"13\"};\n            \\endxy\n          \\]\n        \\item For any $l,m, n_i \\in \\mathbb{N}_+$, with $1 \\leq i \\leq m$, and $p \\in P(l)$, $q \\in P(m)$ and $r_i \\in P(n_i)$, the following diagram commutes.\n          \\[\n            \\xy\n                (0,0)*+{\\mu\\left(\\mu(p;\\underline{q}) \\cdot t_{m,l} ; \\underline{\\underline{r_i}}\\right) \\cdot \\mu(e_m;\\underline{t_{n_i,l}})}=\"00\";\n                (60,0)*+{\\mu\\left(\\mu(p;\\underline{q});\\underline{\\underline{r_i}}\\right) \\cdot \\mu(t_{m,l};\\underline{\\underline{e_{n_i}}})\\mu(e_{m};\\underline{t_{n_i,l}})}=\"10\";\n                (60,-15)*+{\\mu\\left(p;\\underline{\\mu(q;\\underline{r_i})}\\right) \\cdot \\mu(t_{m,l};\\underline{\\underline{e_{n_i}}})\\mu(e_{m};\\underline{t_{n_i,l}})}=\"11\";\n                (0,-20)*+{\\mu\\left(\\mu(q;\\underline{p}); \\underline{r_1},\\ldots,\\underline{r_m}\\right) \\cdot \\mu(e_m;\\underline{t_{n_i,l}})}=\"01\";\n                (0,-40)*+{\\mu\\left(q;\\underline{\\underline{\\mu(p;r_i)}}\\right) \\cdot \\mu(e_m;\\underline{t_{n_i,l}})}=\"02\";\n                (0,-60)*+{\\mu\\left(q;\\underline{\\mu(p;\\underline{r_i}) \\cdot t_{n_i,l}}\\right)}=\"03\";\n                (60,-30)*+{\\mu\\left(p;\\underline{\\mu(q;r_1,\\ldots,r_m)}\\right) \\cdot t_{N,l}}=\"12\";\n                (60,-45)*+{\\mu\\left(\\mu(q;r_1,\\ldots,r_m); \\underline{\\underline{p}}\\right)}=\"13\";\n                (60,-60)*+{\\mu\\left(q;\\underline{\\mu(r_i;\\underline{p})}\\right)}=\"14\";\n                {\\ar@{=} \"00\" ; \"10\"};\n                {\\ar@{=} \"10\" ; \"11\"};\n                {\\ar@{=} \"11\" ; \"12\"};\n                {\\ar^{\\lambda_{p,\\mu(q;r_1,\\ldots,r_m)}} \"12\" ; \"13\"};\n                {\\ar@{=} \"13\" ; \"14\"};\n                {\\ar_{\\mu(\\lambda_{p,q};1) \\cdot 1} \"00\" ; \"01\"};\n                {\\ar@{=} \"01\" ; \"02\"};\n                {\\ar@{=} \"02\" ; \"03\"};\n                {\\ar_{\\mu(1;\\underline{\\lambda_{p,r_i}})} \"03\" ; \"14\"};\n            \\endxy\n          \\]\n    \\end{enumerate}\n\\end{Defi}\n\n\\begin{remark}\nOriginally the definition presented above did not include the equivariance axiom (Axiom 2). That this axiom is required was identified by the authors of \\cite{guillou_symmetric}.\n\\end{remark}\n\n\\begin{thm}\\label{pscomm}\nLet $P$ be a $\\ML$-operad equipped with a pseudo-commutative structure. Then $\\underline{P}$ has a pseudo-commutativity.\n\\end{thm}\n\n% \\begin{thm}\\label{pscomm}\n% Let $P$ be a $\\ML$-operad. Then the following equip $\\underline{P}$ with a pseudo-commutative structure.\n%     \\begin{itemize}\n%         \\item For each pair $(m,n) \\in \\mathbb{N}_{+}^2$, we are given an element $t_{m,n} \\in \\Lambda(mn)$ such that $\\pi(t_{m,n}) = \\tau_{m,n}$.\n%         \\item For each $p \\in P(n)$, $q \\in P(m)$, we are given a natural isomorphism\n%             \\[\n%                 \\lambda_{p,q} \\colon \\mu(p;q,\\ldots,q) \\cdot t_{m,n} \\cong \\mu(q;p,\\ldots,p).\n%             \\]\n%             We write this as $\\lambda_{p,q}\\colon \\mu(p; \\underline{q}) \\cdot t_{m,n} \\cong \\mu(q; \\underline{p})$.\n%     \\end{itemize}\n% These must satisfy the following:  \n%     \\begin{enumerate}\n%         \\item For all $n \\in \\mathbb{N}_+$\\nomenclature[N]{$\\mathbb{N}_+$}{the set of positive natural numbers},\n%             \\[\n%                 t_{1,n} = e_n = t_{n,1}\n%             \\]\n%              and for all $p \\in P(n)$, the isomorphism $\\lambda_{p, \\id}\\colon p \\cdot e_n \\cong p$ is the identity map.\n%         \\item For all $l, m_1, \\ldots, m_l, n \\in \\mathbb{N}_+$, with $M = \\Sigma m_i$,\n%             \\[\n%                 \\mu^{\\Lambda}\\left(e_l; t_{m_1,n}, \\ldots, t_{m_l,n}\\right) \\cdot \\mu^{\\Lambda}\\left(t_{l,n};\\underline{e_{m_1},\\ldots,e_{m_l}}\\right) = t_{n,M}.\n%             \\]\n%             Here $\\underline{e_{m_1},\\ldots,e_{m_l}}$ is the list $e_{m_{1}}, \\ldots, e_{m_{l}}$ repeated $n$ times.\n%         \\item For all $l, m, n_1,\\ldots, n_m \\in \\mathbb{N}_+$, with $N = \\Sigma n_i$,\n%             \\[\n%                 \\mu^{\\Lambda}\\left(t_{m,l};\\underline{e_{n_1}},\\ldots,\\underline{e_{n_m}}\\right) \\cdot \\mu^{\\Lambda}\\left(e_m;t_{n_1,l},\\ldots,t_{n_m,l}\\right) = t_{N,l}.\n%             \\]\n%             Here $\\underline{e_{n_{i}}}$ indicates that each $e_{n_{i}}$ is repeated $l$ times.\n%         \\item For any $l, m_i, n \\in \\mathbb{N}_+$, with $1 \\leq i \\leq n$, and $p \\in P(l)$, $q_i \\in P(m_i)$ and $r \\in P(n)$, the following diagram commutes. (Note that we maintain the convention that anything underlined indicates a list, and double underlining indicates a list of lists. Each instance should have an obvious meaning from context and the equations appearing above.)\n%           \\[\n%             \\xy\n%                 (0,0)*+{\\mu\\left(p;\\underline{\\mu(q_i;\\underline{r})}\\right) \\cdot \\mu(e_l;\\underline{t_{n,m_i}})\\mu(t_{n,l};\\underline{\\underline{e_{m_i}}})}=\"00\";\n%                 (60,0)*+{\\mu\\left(p;\\underline{\\mu(q_i;\\underline{r})}\\right) \\cdot t_{n,M}}=\"10\";\n%                 (0,-15)*+{\\mu\\left(p;\\underline{\\mu(q_i;\\underline{r})\\cdot t_{n,m_i}}\\right) \\cdot \\mu(t_{n,l};\\underline{e_{m_1},\\ldots,e_{m_l}})}=\"01\";\n%                 (60,-20)*+{\\mu\\left(\\mu(p;q_1,\\ldots,q_n);\\underline{\\underline{r}}\\right)\\cdot t_{n,M}}=\"11\";\n%                 (0,-30)*+{\\mu\\left(p;\\underline{\\mu(r;\\underline{q_i})}\\right) \\cdot \\mu(t_{n,l};\\underline{e_{m_1},\\ldots,e_{m_l}})}=\"02\";\n%                 (60,-40)*+{\\mu\\left(\\mu(p;q_1,\\ldots,q_n);\\underline{\\underline{r}}\\right)}=\"12\";\n%                 (0,-45)*+{\\mu\\left(\\mu(p;\\underline{r}) \\cdot t_{n,l} ; \\underline{q_1,\\ldots,q_n}\\right)}=\"03\";\n%                 (60,-60)*+{\\mu\\left(r;\\underline{\\mu(p;q_1,\\ldots,q_n)}\\right)}=\"13\";\n%                 (0,-60)*+{\\mu\\left(\\mu(r,\\underline{p});\\underline{q_1,\\ldots,q_n}\\right)}=\"04\";\n%                 {\\ar@{=} \"00\" ; \"10\"};\n%                 {\\ar@{=} \"00\" ; \"01\"};\n%                 {\\ar@{=} \"10\" ; \"11\"};\n%                 {\\ar_{\\mu(1;\\underline{\\lambda_{q_i,r}}) \\cdot 1} \"01\" ; \"02\"};\n%                 {\\ar@{=} \"02\" ; \"03\"};\n%                 {\\ar@{=} \"04\" ; \"13\"};\n%                 {\\ar_{\\mu(\\lambda_{p,r};1)} \"03\" ; \"04\"};\n%                 {\\ar^{\\lambda_{\\mu(p;q_1,\\ldots,q_n),r}} \"11\" ; \"12\"};\n%                 {\\ar@{=} \"12\" ; \"13\"};\n%             \\endxy\n%           \\]\n%         \\item For any $l,m, n_i \\in \\mathbb{N}_+$, with $1 \\leq i \\leq m$, and $p \\in P(l)$, $q \\in P(m)$ and $r_i \\in P(n_i)$, the following diagram commutes.\n%           \\[\n%             \\xy\n%                 (0,0)*+{\\mu\\left(\\mu(p;\\underline{q}) \\cdot t_{m,l} ; \\underline{\\underline{r_i}}\\right) \\cdot \\mu(e_m;\\underline{t_{n_i,l}})}=\"00\";\n%                 (60,0)*+{\\mu\\left(\\mu(p;\\underline{q});\\underline{\\underline{r_i}}\\right) \\cdot \\mu(t_{m,l};\\underline{\\underline{e_{n_i}}})\\mu(e_{m};\\underline{t_{n_i,l}})}=\"10\";\n%                 (60,-15)*+{\\mu\\left(p;\\underline{\\mu(q;\\underline{r_i})}\\right) \\cdot \\mu(t_{m,l};\\underline{\\underline{e_{n_i}}})\\mu(e_{m};\\underline{t_{n_i,l}})}=\"11\";\n%                 (0,-20)*+{\\mu\\left(\\mu(q;\\underline{p}); \\underline{r_1},\\ldots,\\underline{r_m}\\right) \\cdot \\mu(e_m;\\underline{t_{n_i,l}})}=\"01\";\n%                 (0,-40)*+{\\mu\\left(q;\\underline{\\underline{\\mu(p;r_i)}}\\right) \\cdot \\mu(e_m;\\underline{t_{n_i,l}})}=\"02\";\n%                 (0,-60)*+{\\mu\\left(q;\\underline{\\mu(p;\\underline{r_i}) \\cdot t_{n_i,l}}\\right)}=\"03\";\n%                 (60,-30)*+{\\mu\\left(p;\\underline{\\mu(q;r_1,\\ldots,r_m)}\\right) \\cdot t_{N,l}}=\"12\";\n%                 (60,-45)*+{\\mu\\left(\\mu(q;r_1,\\ldots,r_m); \\underline{\\underline{p}}\\right)}=\"13\";\n%                 (60,-60)*+{\\mu\\left(q;\\underline{\\mu(r_i;\\underline{p})}\\right)}=\"14\";\n%                 {\\ar@{=} \"00\" ; \"10\"};\n%                 {\\ar@{=} \"10\" ; \"11\"};\n%                 {\\ar@{=} \"11\" ; \"12\"};\n%                 {\\ar^{\\lambda_{p,\\mu(q;r_1,\\ldots,r_m)}} \"12\" ; \"13\"};\n%                 {\\ar@{=} \"13\" ; \"14\"};\n%                 {\\ar_{\\mu(\\lambda_{p,q};1) \\cdot 1} \"00\" ; \"01\"};\n%                 {\\ar@{=} \"01\" ; \"02\"};\n%                 {\\ar@{=} \"02\" ; \"03\"};\n%                 {\\ar_{\\mu(1;\\underline{\\lambda_{p,r_i}})} \"03\" ; \"14\"};\n%             \\endxy\n%           \\]\n%     \\end{enumerate}\n% \\end{thm}\n\n\\begin{proof}\nWe begin the proof by defining an invertible modification $\\gamma$ for the pseudo-commutativity for which the components are natural transformations $\\gamma_{A,B}$. Such a transformation $\\gamma_{A,B}$ has components with source\n  \\[\n    \\left[\\mu\\left(p; \\underline{q}\\right); \\underline{(x, \\underline{y})}\\right]\n  \\]\nand target\n  \\[\n    \\left[\\mu\\left(q; \\underline{p}\\right); \\underline{(\\underline{x},y)}\\right].\n  \\]\nNow $ \\lambda_{p,q} \\colon \\mu(p;q,\\ldots,q) \\cdot t_{m,n} \\cong \\mu(q;p,\\ldots,p)$ gives rise to another map by multiplication on the right by $t_{m,n}^{-1}$,\n  \\[\n    \\lambda_{p,q}\\cdot t_{m,n}^{-1} \\colon \\mu(p;q,\\ldots,q) \\cong \\mu(q;p,\\ldots,p) \\cdot t_{m,n}^{-1},\n  \\]\nso we define $(\\gamma_{A,B})_{[p;a_1,\\ldots,a_n],[q;b_1,\\ldots,b_m]}$ to be the morphism which is the image of $(\\lambda_{p,q}\\cdot t_{m,n}^{-1}, 1)$ under the map\n  \\[\n    \\coprod P(n) \\times (A \\times B)^{n} \\rightarrow \\coprod P(n) \\times_{\\Lambda(n)} (A \\times B)^{n}.\n  \\]\nNaturality of $\\gamma_{A,B}$ follows from that of each $\\lambda_{p,q}$. We will write this morphism as $[\\lambda_{p,q}t_{m,n}^{-1}, 1]$. In the case that either $p$ or $q$ is an identity then we choose the component of $\\gamma$ to be the isomorphism involving the appropriate identity element using axiom 1 above.\n\nThere are two things to note about the definition above before we continue. First, it is easy to check that\n  \\[\n    t_{m,n}^{-1} \\cdot \\underline{\\left(x, \\underline{y}\\right)} = \\underline{\\left(\\underline{x},y\\right)}\n  \\]\nsince $\\pi(t_{m,n}) = \\tau_{m,n}$; this ensures that $\\gamma$ has the correct target. Second, the morphism above has second component the identity. This is actually forced upon us by the requirement that $\\gamma$ be a modification:  in the case that $A,B$ are discrete categories, the only possible morphism is an identity, and the modification axiom then forces that statement to be true for general $A,B$ by considering the inclusion $A_{0} \\times B_{0} \\hookrightarrow A \\times B$ where $A_{0}, B_{0}$ are the discrete categories with the same objects as $A, B$.\n\nWe show that this is a modification by noting that it does not rely on objects in the lists $a_1, \\ldots, a_n$ or $b_1, \\ldots, b_m$, only on their lengths and the operations $p$ and $q$. As a result, if there are functors $f \\colon X \\rightarrow X'$ and $g \\colon Y \\rightarrow Y'$, then it is clear that\n    \\[\n        (\\underline{P}(f\\times g) \\circ \\gamma_{X,Y})_{\\left[p;\\underline{x}\\right],\\left[q;\\underline{y}\\right]} = [\\lambda_{p,q},\\underline{1}] = (\\gamma_{X',Y'} \\circ (\\underline{P}f\\times \\underline{P}g))_{\\left[p;\\underline{x}\\right],\\left[q;\\underline{y}\\right]}.\n    \\]\nAs such we can simply write $(\\gamma_{X,Y})_{[p;\\underline{x}],[q;\\underline{y}]}$ in shorthand as $\\gamma_{p,q}$.\n\nThere are now seven axioms to check for a pseudo-commutativity:  three strength axioms, two unit axioms, and two multiplication axioms. For the first strength axiom, we must verify that two different $2$-cells of shape\n  \\[\n    \\xy\n      (0,0)*+{A \\times TB \\times TC}=\"0\";\n      (50,0)*+{T(A \\times B \\times C)}=\"1\";\n      {\\ar@/^1pc/ \"0\"; \"1\"};\n      {\\ar@/_1pc/ \"0\"; \"1\"};\n      (25,0)*{\\Downarrow}\n    \\endxy\n  \\]\nare equal. The first of these is $\\gamma$ precomposed with $d \\times 1$, and so is the component of $\\gamma$ at an object\n  \\[\n    \\left( [p;(a,b_1),\\ldots,(a,b_n)], [q; c_{1}, \\ldots, c_{m}] \\right).\n  \\]\nThe second of these is $d$ applied to the component of $1 \\times \\gamma$ at\n  \\[\n    \\left(a, ([p;b_1,\\ldots,b_n], [q; c_{1}, \\ldots, c_{m}]) \\right).\n  \\]\nIt is straightforward to compute that each of these maps is the image of $\\left(\\lambda_{p,q}\\cdot t_{m,n}^{-1},1\\right)$ under the functor\n  \\[\n    \\coprod P(n) \\times (A \\times B)^{n} \\rightarrow \\coprod P(n) \\times_{\\Lambda(n)} (A \\times B)^{n}.\n  \\]\nThe other two strength axioms follow by analogous calculations for other whiskerings of $\\gamma$ with $d$ or $d^{*}$.\n\n\nFor the unit axioms, we must compute the components of $\\gamma$ precomposed with $\\eta \\times 1$ for the first axiom and $1 \\times \\eta$ for the second. Thus for the first unit axiom, we must compute the component of $\\gamma$ at $\\left( [e;a], [p; b_{1}, \\ldots, b_{m}] \\right)$. By definition, this is the image of $(\\lambda_{e,p}\\cdot t^{-1}_{m,1}, 1)$ under the map to the coequalizer, and by the first hypothesis of the theorem we know that $t^{-1}_{m,1}$ is the identity element and this isomorphism is the identity as well, so this component of $\\gamma$ is also the identity. The second unit axiom follows similarly, using that $t^{-1}_{1,n}$ is the identity.\n\nQQQ hypotheses are axioms now - all needs a bit of rewording\nFor the multiplication axioms, first note that hypothesis 2 in the statement of the theorem is necessary in order to ensure the existence of the top horizontal equality in the diagram of hypothesis 4; the same goes for hypotheses 3 and 5. We now explain how hypotheses 2 and 4 ensure that the first multiplication axiom holds, with the same reasoning showing that hypotheses 3 and 5 imply the second multiplication axiom.\n\nWe begin by studying the pasting diagram in the first multiplication axiom, but computing its values using the strength and costrength for the non-symmetric operad underlying $P$; this means that we evaluate on objects of the form $(p; a_{1}, \\ldots, a_{n})$ rather than on their equivalence classes. Let $p \\in P(l), q_{i} \\in P(m_{i})$ for $1 \\leq i \\leq l$, and $r \\in P(n)$. Computing the top and right leg around the pasting diagram gives the function on objects which sends\n  \\[\n    \\left( (p; (q_{1}; \\un{a_{1}}), \\ldots, (q_{l}; \\un{a_{l}})), (r; \\un{b}) \\right)\n  \\]\nto\n  \\[\n    \\left( \\mu(p; \\mu(q_{1}; \\un{r}), \\ldots, \\mu(q_{l}; \\un{r})); (\\un{(a_{1\\bullet}, \\un{b})}), \\ldots, (\\un{(a_{l\\bullet}, \\un{b})}) \\right),\n  \\]\nwhere $(\\un{(a_{i\\bullet}, \\un{b})})$ is the list of pairs\n  \\[\n    (a_{i1}, b_{1}), \\ldots, (a_{i1}, b_{m}), (a_{i2}, b_{1}), \\ldots, (a_{in_{i}}, b_{m}).\n  \\]\nThen $\\un{P}\\gamma$ is the image of the morphism which is the identity on the $(a_{ij}, b_{k})$'s, and is the morphism\n  \\[\n    \\mu\\left(1;\\lambda_{q_1,r}t^{-1}_{n,m_1},\\ldots,\\lambda_{q_l,r}t^{-1}_{n,m_l}\\right)\n  \\]\non the first component with domain and codomain shown below.\n  \\[\n    \\mu\\left(p;\\mu\\left(q_1;\\un{r}\\right),\\ldots,\\mu\\left(q_n;\\un{r}\\right)\\right) \\longrightarrow \\mu\\left(p;\\mu\\left(r;\\un{q_1}\\right)t^{-1}_{n,m_1},\\ldots,\\mu\\left(r;\\un{q_l}\\right)t^{-1}_{n,m_l}\\right)\n  \\]\n% \\[\n% \\xy\n% {\\ar^{\\scriptstyle \\mu\\left(1; \\lambda_{q_{1}, r} t^{-1}_{n,m_{1}}, \\ldots, \\lambda_{q_{1}, r} t^{-1}_{n,m_{l}}\\right)} (0,0)*+{\\scriptstyle \\mu\\left(p; \\mu(q_{1}; \\un{r}), \\ldots, \\mu(q_{n}; \\un{r})\\right)}; (75,0)*+{\\scriptstyle \\mu\\left(p; \\mu(r; \\un{q_{1}}) t^{-1}_{n,m_{1}}, \\ldots, \\mu(r; \\un{q_{l}}) t^{-1}_{n,m_{l}} \\right)} }\n% \\endxy\n% \\]\n% on the first component. \nBy the $\\Lambda$-operad axioms, the target of this morphism is equal to\n  \\[\n    \\mu\\left(p; \\mu\\left(r; \\un{q_{1}}\\right), \\ldots, \\mu\\left(r; \\un{q_{l}}\\right) \\right)\\mu\\left(e_{l}; t^{-1}_{n,m_{1}}, \\ldots, t^{-1}_{n,m_{l}}\\right).\n  \\]\nNote that this is not the same object as one obtains by computing $T\\mu \\circ T^{2}d^{*} \\circ Td \\circ d^{*}$ using the underlying non-symmetric operad of $P$ as we are required to use the $\\Lambda$-equivariance to ensure that the target of $\\gamma$ is the correct one.\n\nNext we compute the source of $(\\mu \\circ Td^{*})*\\gamma$, the other $2$-cell in the pasting appearing in the first multiplication axiom. We compute this once again using the strength and costrength for the underlying non-symmetric operad, and note once again that this will not match our previous calculations precisely, but only up to an application of $\\Lambda$-equivariance. This functor has its map on objects given by\n  \\[\n    \\left( (p; (q_{1}; \\un{a_{1}}), \\ldots, (q_{l}; \\un{a_{l}})), (r; \\un{b}) \\right) \\mapsto \\left(\\mu(\\mu(p; \\un{r}); \\un{q_{1}}, \\ldots, \\un{q_{l}}); \\un{(\\un{a_{1}}, b_{\\bullet})}, \\ldots, \\un{(\\un{a_{l}}, b_{\\bullet})} \\right).\n  \\]\n  Note that if we apply $\\Lambda$-equivariance, this matches the target computed above. Once again the component of $\\gamma$ is the image of a morphism which is the identity on the $(a_{ij}, b_{k})$'s, and its first component is\n  \\[\n    \\xy\n      {\\ar^{\\mu\\left(\\lambda_{p,r} \\cdot t^{-1}_{n,l}; 1, \\ldots, 1\\right)} (0,0)*+{\\mu\\left(\\mu(p; \\un{r}); \\un{q_{1}}, \\ldots, \\un{q_{l}}\\right)}; (60,0)*+{\\mu\\left(\\mu(r; \\un{p})\\cdot t^{-1}_{n,l}; \\un{q_{1}}, \\ldots, \\un{q_{l}}\\right).} }\n    \\endxy\n  \\]\n\nWe cannot compose these morphisms in $\\coprod P(n) \\times (A \\times B)^{n}$ as they do not have matching source and target, but we can in $\\coprod P(n) \\times_{\\Lambda} (A \\times B)^{n}$. The resulting morphism has first component given by the image of\n  \\[\n    \\xy\n      {\\ar^{\\scriptstyle \\mu\\left(1; \\lambda_{q_{1}, r} t^{-1}_{n,m_{1}}, \\ldots, \\lambda_{q_{1}, r} t^{-1}_{n,m_{l}}\\right)} (0,0)*+{\\scriptstyle \\mu\\left(p; \\mu\\left(q_{1}; \\un{r}\\right), \\ldots, \\mu\\left(q_{n}; \\un{r}\\right)\\right)}; (75,0)*+{\\scriptstyle \\mu\\left(p; \\mu\\left(r; \\un{q_{1}}\\right) t^{-1}_{n,m_{1}}, \\ldots, \\mu\\left(r; \\un{q_{l}}\\right) t^{-1}_{n,m_{l}} \\right)} };\n      {\\ar^<<<<<<<<<<<<<<<<<<<<<<{\\scriptstyle \\mu\\left(\\lambda_{p,r} \\cdot t^{-1}_{n,l}; 1, \\ldots, 1\\right)\\cdot \\mu\\left(e_{l}; t^{-1}_{n,m_{1}}, \\ldots, t^{-1}_{n,m_{l}}\\right)} (0,-10)*+{}; (75,-10)*+{\\scriptstyle \\mu\\left(\\mu\\left(r; \\un{p}\\right)\\cdot t^{-1}_{n,l}; \\un{q_{1}}, \\ldots, \\un{q_{l}}\\right)\\cdot \\mu\\left(e_{l}; t^{-1}_{n,m_{1}}, \\ldots, t^{-1}_{n,m_{l}}\\right),} }\n    \\endxy\n  \\]\nwhere we have made use of the operad axioms in identifying the target of the first map with the source of the second. Using the $\\Lambda$-operad axioms again on the target, we find that\n  \\[\n    \\mu\\left(\\mu(r; \\un{p})\\cdot t^{-1}_{n,l}; \\un{q_{1}}, \\ldots, \\un{q_{l}}\\right)\\cdot \\mu(e_{l}; t^{-1}_{n,m_{1}}, \\ldots, t^{-1}_{n,m_{l}})\n  \\]\nis equal to\n  \\[\n    \\mu\\left(\\mu(r; \\un{p}); \\un{q_{1}, \\ldots, q_{l}}\\right) \\cdot \\mu(t^{-1}_{n,l}; \\un{e}) \\cdot \\mu(e_{l}; t^{-1}_{n,m_{1}}, \\ldots, t^{-1}_{n,m_{l}}).\n  \\]\nThis composite of two morphisms, together with the necessary identities coming from operad axioms, is precisely the left and bottom leg of the diagram in hypothesis 4 in the statement of the theorem. Using the same method, one then verifies that $\\gamma * (\\mu \\times 1)$ has its first component the image of the morphism appearing along the top and right leg of the diagram in hypothesis 4. The second component of these morphisms are all identities arising from $\\Lambda$-equivariance, so the first multiplication axiom is a consequence of hypotheses 2 and 4. We leave the calculations for the second multiplication axiom to the reader as they are of the same nature.\n\\end{proof}\n\n\\begin{cor}\nLet $P$ be a non-symmetric operad. Then the induced monad $\\underline{P}$ is never pseudo-commutative.\n\\end{cor}\n\\begin{proof}\nIn the non-symmetric case, the $2$-monad is just given using coproducts and products, i.e., there is no coequalizer. In order to define $\\gamma$, we then need an isomorphism\n  \\[\n    \\left(\\mu(p; \\underline{q}); \\underline{(x, \\underline{y})}\\right) \\cong \\left(\\mu(q; \\underline{p}); \\underline{(\\underline{x},y)}\\right).\n  \\]\nWhen $A,B$ are discrete, there is no isomorphism $\\underline{\\left(x,\\underline{y}\\right)} \\cong \\underline{\\left(\\underline{x},y\\right)}$, and therefore no such $\\gamma$ can exist.\n\\end{proof}\n\n\n\nA further property that a pseudo-commutativity can possess is that of symmetry. This symmetry is then reflected in the monoidal structure on the $2$-category of algebras, which will then also have a symmetric tensor product (in a suitable, $2$-categorical sense).\n\n\\begin{Defi}\nLet $T \\colon \\m{K} \\rightarrow \\m{K}$ be a $2$-monad on a symmetric monoidal $2$-category $\\m{K}$ with symmetry $c$. We then say that a pseudo-commutativity $\\gamma$ for $T$ is \\textit{symmetric} when the following is satisfied for all $A$, $B \\in \\m{K}$:\n    \\[\n        Tc_{A,B} \\circ \\gamma_{A,B} \\circ c_{TB, TA} = \\gamma_{B,A}.\n    \\]\n\\end{Defi}\n\nWith the notion of symmetry at hand we are able to extend the above theorem, stating when $\\underline{P}$ is symmetric.\n\\begin{thm}\nThe pseudo-commutative structure for $\\underline{P}$ given by \\cref{pscomm}  is symmetric if for all $m,n \\in \\mathbb{N}_+$ the two conditions below hold.\n    \\begin{enumerate}\n        \\item $t_{m,n} = t_{n,m}^{-1}$.\n        \\item The following diagram commutes:\n          \\[\n              \\xy\n                (0,0)*+{\\mu\\left(p;\\underline{q}\\right) \\cdot t_{m,n}t_{n,m}}=\"00\";\n                (30,0)*+{\\mu\\left(p;\\underline{q}\\right) \\cdot e_{mn}}=\"10\";\n                (0,-15)*+{\\mu\\left(q;\\underline{p}\\right) \\cdot t_{n,m}}=\"01\";\n                (30,-15)*+{\\mu\\left(p;\\underline{q}\\right)}=\"11\";\n                {\\ar@{=} \"00\" ; \"10\"};\n                {\\ar_{\\lambda_{p,q} \\cdot 1} \"00\" ; \"01\"};\n                {\\ar@{=} \"10\" ; \"11\"};\n                {\\ar_{\\lambda_{q,p}} \"01\" ; \"11\"};\n              \\endxy\n          \\]\n    \\end{enumerate}\n\\end{thm}\n\\begin{proof}\nThe commutativity of the diagram above ensures that the first component of the symmetry axiom commutes in $P(n)$ before taking equivalence classes in the coequalizer, just as in the proof of \\cref{pscomm}.\n\\end{proof}\n\n\\begin{Defi}\nLet $P$ be a $\\ML$-operad in $\\mb{Cat}$. We say that $P$ is \\textit{contractible} if each category $P(n)$ is equivalent to the terminal category.\n\\end{Defi}\n\n\\begin{cor}\nIf $P$ is contractible and there exist $t_{m,n}$ as in \\cref{pscomm}, then $\\underline{P}$ acquires a pseudo-commutativity. Furthermore, it is symmetric if $t_{n,m} = t_{m,n}^{-1}$.\n\\end{cor}\n\\begin{proof}\nThe only thing left to define is the collection of natural isomorphisms $\\lambda_{p,q}$. But since each $P(n)$ is contractible, $\\lambda_{p,q}$ must be the unique isomorphism between its source and target, and furthermore the last two axioms hold since any pair of parallel arrows are equal in a contractible category.\n\\end{proof}\n\n\\begin{cor}\nIf $P$ is a contractible symmetric operad then $\\underline{P}$ has a symmetric pseudo-commutativity.\n\\end{cor}\n\\begin{proof}\nWe choose $t_{m,n} = \\tau_{m,n}$.\n\\end{proof}\n\n\\begin{rem}\nIf a $\\ML$-operad $P$ is contractible, it is not the case that its symmetrization $S(P)$ (see \\cref{thm_sym}) will also be contractible. The category $P(n) \\times_{\\Lambda(n)} \\Sigma_{n}$ will necessarily be a groupoid as it is a colimit of groupoids: contractible categories are always groupoids, and both $\\Lambda(n)$ and $\\Sigma_{n}$ are discrete. Let $g \\in \\textrm{ker} \\, \\pi_{n}$ be any non-identity element, and let $p \\in P(n)$ be any object. Then\n  \\[\n    [p \\cdot g, e] = [p, \\pi(g)e] = [p,e],\n  \\]\nbut unless $p\\cdot g = p$ in $P(n)$, there will be a unique isomorphism between them that will not be the identity, and hence will define a nontrivial automorphism of $[p,e]$ in  $P(n) \\times_{\\Lambda(n)} \\Sigma_{n}$. The existence of such ensures that $P(n) \\times_{\\Lambda(n)} \\Sigma_{n}$ is not contractible.\n\\end{rem}\n\n\n\nWe conclude with a computation using \\cref{pscomm}. This result (\\ref{braidpscomm} below) was only conjectured in \\cite{HP}, but we are able to prove it quite easily with the machinery developed thus far. Our strategy is to construct a $\\ML$-operad which is contractible together with the group elements required in \\cref{pscomm}. Note that the symmetrized version of this operad will not be contractible, and we do not know of a proof using the structure of the symmetrized operad.\n\n\\begin{thm}\\label{braidpscomm}\nThe $2$-monad $\\underline{B}$ for braided strict monoidal categories on $\\mb{Cat}$ has two pseudo-commutative structures on it, neither of which are symmetric.\n\\end{thm}\n\nIn order to apply our theory, the $2$-monad $\\underline{B}$ must arise from a $\\ML$-operad. The following proposition describes it as such, and can largely be found as Example 3.2 in the work of Fiedorowicz \\cite{fie-br}.\n\n\\begin{prop}\nThe $2$-monad $\\underline{B}$ is the $2$-monad associated to the $\\mb{B}$-operad $B$ with the category $B(n)$ having objects the elements of the $n$th braid group $B_{n}$ and a unique isomorphism between any pair of objects; the action of $B_{n}$ on $B(n)$ is given by right multiplication on objects and is then uniquely determined on morphisms.\n\\end{prop}\n\nThe interested reader could easily verify that algebras for the $\\mb{B}$-operad $B$ are braided strict monoidal categories. The objects of $\\underline{B}(X)$ can be identified with finite lists of objects of $X$, and morphisms are generated by the morphisms of $X$ together with new isomorphisms\n  \\[\n    x_{1}, \\ldots, x_{n} \\stackrel{\\gamma}{\\longrightarrow} x_{\\gamma^{-1}(1)}, \\ldots, x_{\\gamma^{-1}(n)}\n  \\]\nwhere $\\gamma \\in B_{n}$ and the notation $\\gamma^{-1}(i)$ means, as before, that we take the preimage of $i$ under the permutation $\\pi(\\gamma)$ associated to $\\gamma$. This shows that $\\underline{B}(X)$ is the free braided strict monoidal category generated by $X$ according to \\cite{js}, and it is easy to verify that the $2$-monad structure on $\\underline{B}$ arising from the $\\mb{B}$-operad structure on $B$ is the correct one to produce braided strict monoidal categories as algebras.\n\n\\begin{Defi}\nA braid $\\gamma \\in B_{n}$ is \\textit{positive} if it is an element of the submonoid of $B_{n}$ generated by the elements $\\sigma_{1}, \\sigma_{2}, \\ldots, \\sigma_{n-1}$.\n\\end{Defi}\n\n\\begin{Defi}\n A braid $\\gamma \\in B_{n}$ is \\textit{minimal} if no pair of strands in $\\gamma$ cross twice.\n\\end{Defi}\n\nFor our purposes, we are interested in braids which are both positive and minimal. A proof of the following lemma can be found in \\cite{EM2}.\n\n\\begin{lem}\\label{pmlem}\nLet $PM_{n}$ be the subset of $B_{n}$ consisting of positive, minimal braids. Then the function sending a braid to its underlying permutation is a bijection of sets $PM_{n} \\rightarrow \\Sigma_{n}$.\n\\end{lem}\n\n\\begin{rem}\\label{pmrem}\nIt is worth noting that this bijection is not an isomorphism of groups, since $PM_{n}$ is not a group or even a monoid. The element $\\sigma_{1} \\in B_{n}$ is certainly in $PM_{n}$, but $\\sigma_{1}^{2}$ is not as the first two strands cross twice. Thus we see that the product of two minimal braids is generally not minimal, but by definition the product of positive braids is positive.\n\\end{rem}\n\n\\begin{proof}[Proof of \\cref{braidpscomm}]\nIn order to use \\cref{pscomm} with the action operad being the braid operad $\\mb{B}$, we must first construct elements $t_{m,n} \\in B_{mn}$ satisfying certain properties. Using \\cref{pmlem}, we define $t_{m,n}$ to be the unique positive minimal braid such that $\\pi(t_{m,n}) = \\tau_{m,n}$. Since $\\tau_{1,n} = e_{n} = \\tau_{n,1}$ in $\\Sigma_{n}$ and the identity element $e_{n} \\in B_{n}$ is positive and minimal, we find that $t_{1,n} = e_{n} = t_{n,1}$ in $B_{n}$. Thus in order to verify the remaining hypotheses, we must check two equations, each of which states that some element $t_{m,n}$ can be expressed as a product of operadic compositions of other elements.\n\n% QQQ The capital M in the following sentence isn't used anywhere. Is it capital N?\n\nLet $l, m_{1}, \\ldots, m_{l}, n$ be natural numbers, and let $N = \\sum m_{i}$. We must check that\n  \\[\n    \\mu(e_{l}; t_{n, m_{1}}, \\ldots, t_{n, m_{l}}) \\mu\\left(t_{n,l}; \\underline{e_{m_{1}}, \\ldots, e_{m_{l}}}\\right) = t_{N, l}\n  \\]\nin $B_{lN}$. These braids have the same underlying permutations by construction, and both are positive since each operadic composition on the left is positive. The braid on the right is minimal by definition, so if we prove that the braid on the left is also minimal, they are necessarily equal. Now $\\mu\\left(t_{n,l}; \\underline{e_{m_{1}}, \\ldots, e_{m_{l}}}\\right)$ is given by the braid for $t_{n,l}$ but with the first strand replaced by $m_{1}$ strands, the second strand replaced by $m_{2}$ strands, and so on for the first $l$ strands of $t_{n,l}$, and then repeating for each group of $l$ strands. In particular, since strands $i, i+l, i+2l, \\ldots, i + (n-1)l$ never cross in $t_{n,l}$, none of the $m_{i}$ strands that each of these is replaced with cross. The braid $\\mu(e_{l}; t_{n, m_{1}}, \\ldots, t_{n, m_{l}})$ consists of the disjoint union of the braids for each $t_{n,m_{i}}$, so if two strands cross in $\\mu(e_{l}; t_{n, m_{1}}, \\ldots, t_{n, m_{l}})$ then they must both cross in some $t_{n,m_{i}}$. The strands in $t_{n,m_{i}}$ are those numbered from $n(m_{1} + \\cdots + m_{i-1}) + 1$ to $n(m_{1} + \\cdots + m_{i-1} + m_{i})$. This is a consecutive collection of $nm_{i}$ strands, and it is simple to check that these strands are precisely those connected (via the group operation in $B_{Nl}$, concatenation) to the duplicated copies of strands $i, i+l, i+2l, \\ldots, i + (n-1)l$ in $t_{n,l}$. Thus if a pair of strands were to cross in $\\mu(e_{l}; t_{n, m_{1}}, \\ldots, t_{n, m_{l}})$, that pair cannot also have crossed in $\\mu\\left(t_{n,l}; \\underline{e_{m_{1}}, \\ldots, e_{m_{l}}}\\right)$, showing that the resulting product braid\n  \\[\n    \\mu(e_{l}; t_{n, m_{1}}, \\ldots, t_{n, m_{l}}) \\mu\\left(t_{n,l}; \\underline{e_{m_{1}}, \\ldots, e_{m_{l}}}\\right)\n  \\]\nis minimal. The calculation showing that\n  \\[\n    \\mu\\left(t_{m,l}; \\underline{e_{1}}, \\ldots, \\underline{e_{n_{m}}}\\right) \\mu\\left(e_{m}; t_{n_{1}, l}, \\ldots, t_{n_{m}, l}\\right)\n  \\]\nis also minimal follows from the same argument, showing that it is equal to $t_{N, l}$ (here $N$ is the sum of the $n_{i}$, where once again $i$ ranges from 1 to $l$).\n\nThese calculations show, using \\cref{pscomm}, that the $\\mb{B}$-operad $B$ induces a $2$-monad which has a pseudo-commutative structure. As noted before, $B$-algebras are precisely braided strict monoidal categories. The second pseudo-commutative structure arises by using negative, minimal braids instead of positive ones, and proceeds using the same arguments. This finishes the first part of the proof of \\cref{braidpscomm}.\n\nWe will now show that neither of these pseudo-commutative structures is symmetric. The symmetry axiom in this case reduces to the fact that, in some category which is given as a coequalizer, the morphism with first component\n  \\[\n    f\\colon \\mu\\left(p; \\underline{q}\\right) \\cdot t_{n,m}t_{m,n} \\rightarrow \\mu\\left(q; \\underline{p}\\right) \\cdot t_{m,n} \\rightarrow \\mu\\left(p; \\underline{q}\\right)\n  \\]\nis the identity. Now it is clear that $t_{n,m}$ is not equal to $t_{m,n}^{-1}$ in general: taking $m=n=2$, we note that $t_{2,2} = \\sigma_{2}$, and this element is certainly not of order two in $B_{4}$. $B(4)$ is the category whose objects are the elements of $B_{4}$ with a unique isomorphism between any two pair of objects, and $B_{4}$ acts by multiplication on the right; this action is easily shown to be free and transitive. We recall (see \\cref{coeq-lem}) that in a coequalizer of the form $A \\times_{G} B$, a morphism $[f_{1}, f_{2}]$ equals $[g_{1}, g_{2}]$ if and only if there exists an $x \\in G$ such that\n  \\begin{align*}\n    f_{1} \\cdot x &= g_{1}, \\\\\n    x^{-1} \\cdot f_{2} &= g_{2}.\n  \\end{align*}\nFor the coequalizer in question, for $f$ to be the first component of an identity morphism would imply that $f \\cdot x$ would be a genuine identity in $B(4)$ for some $x$. But $f \\cdot x$ would have source $\\mu\\left(p; \\underline{q}\\right) t_{n,m}t_{m,n}x$ and target $\\mu\\left(p; \\underline{q}\\right)x$, which requires $t_{n,m}t_{m,n}$ to be the identity group element for all $n,m$. In particular, this would force $t_{2,2}$ to have order two, which as noted above does not hold in $B_{4}$, thus giving a contradiction.\n\\end{proof}\n\n\\begin{rem}\nThe pseudo-commutativities given above are not necessarily the only ones that exist for the $\\mb{B}$-operad $B$, but we do not know a general strategy for producing others.\n\\end{rem}\n\n\\subsection{Profunctors and multicategories}\nIn this section we generalize from operads to multicategories (or colored operads). The notions of plain and symmetric multicategories are standard \\cite{bd_hda3}, but in fact there is a corresponding notion of $\\mb{\\Lambda}$-multicategory for any action operad $\\mb{\\Lambda}$. We will give the basic definition and then show that it arises abstractly from a lifting of $E\\Lambda$ as a $2$-monad  on $\\mb{Cat}$ to a pseudomonad on $\\mb{Prof}$, the bicategory of categories, profunctors, and transformations. A quick treatment of similar material but restricted to the symmetric case can be found in \\cite{garner_poly}.\n\n\\begin{Defi}\\label{lambda_multicat}\nLet $\\mb{\\Lambda}$ be an action operad. A \\emph{$\\mb{\\Lambda}$-multicategory} $M$ consists of the following data:\n\\begin{itemize}\n  \\item a set of objects $M_{0}$;\n  \\item for any finite list $x_{1}, \\ldots, x_{n}$ of objects and any object $y$, a set\n    \\[\n      M(x_{1}, \\ldots, x_{n}; y)\n    \\]\n  of multi-arrows (or just arrows) from $x_{1}, \\ldots, x_{n}$ to $y$;\n  \\item for each $\\alpha \\in \\Lambda(n)$, an isomorphism\n    \\[\n      -\\cdot \\alpha \\colon M(x_{1}, \\ldots, x_{n}; y) \\rightarrow M\\left(x_{\\pi(\\alpha)(1)}, \\ldots, x_{\\pi(\\alpha)(n)}; y\\right);\n    \\]\n  \\item for each object $x$, an arrow $\\id_{x} \\in M(x;x)$; and\n  \\item a composition function\n  % \\[\n  % M(y_{1}, \\ldots, y_{k}; z) \\times M(x_{11}, \\ldots, x_{1,n_{1}}; y_{1}) \\times \\cdots \\times M(x_{k1}, \\ldots, x_{k,n_{k}}; y_{k}) \\rightarrow M(\\underline{x}; z)\n  % \\]\n    \\[\n      M(y_1,\\ldots,y_k;z) \\times \\prod_{i=1}^k M(x_{i1},\\ldots,x_{in_i};y_i) \\rightarrow M(\\underline{x};z)\n    \\]\n  where $\\underline{x} = x_{11}, \\ldots, x_{1,n_{1}}, x_{21}, \\ldots, x_{k,n_{k}}$, and which we write as\n    \\[\n      (g; f_{1}, \\ldots, f_{k}) \\mapsto g(f_{1}, \\ldots, f_{k}).\n    \\]\n\\end{itemize}\nThese data are subject to the following axioms.\n\\begin{enumerate}\n\\item $\\id$ is a two-sided unit:\n  \\begin{align*}\n    \\id(f) &= f, \\\\\n    f(\\id,\\ldots,\\id) &= f.\n  \\end{align*}\n\\item Composition is associative:\n  \\[\n    f\\left( g_{1}(h_{11}, \\ldots, h_{1m_{1}}), \\ldots, g_{n}(h_{n1}, \\ldots, h_{nm_{n}}) \\right) = f(g_{1}, \\ldots, g_{n})(h_{11}, \\ldots, h_{nm_{n}}).\n  \\]\n\\item Composition respects the group actions:\n% \\[\n% \\begin{array}{rcl}\n% f(g_{1} \\cdot \\alpha_{1}, \\ldots, g_{n} \\cdot \\alpha_{n}) & = & f(g_{1}, \\ldots, g_{n}) \\cdot \\mu^{\\Lambda}(e; \\alpha_{1}, \\ldots, \\alpha_{n}), \\\\\n% f\\cdot \\alpha (g_{1}, \\ldots, g_{n}) & = & f(g_{\\pi^{-1}(\\alpha)(1)}, \\ldots, g_{\\pi^{-1}(\\alpha)(n)}) \\cdot \\mu^{\\Lambda}(\\alpha; e_{1}, \\ldots, e_{n}).\n% \\end{array}\n% \\]\n  \\begin{align*}\n    f(g_1 \\cdot \\alpha_1,\\ldots, g_n \\cdot \\alpha_n) &= f(g_1,\\ldots,g_n) \\cdot \\mu^{\\Lambda}(e;\\alpha_1,\\ldots,\\alpha_n), \\\\\n    (f \\cdot \\alpha)(g_1,\\ldots,g_n) &= f\\left(g_{\\pi^{-1}(\\alpha)(1)},\\ldots,g_{\\pi^{-1}(\\alpha)(n)}\\right) \\cdot \\mu^{\\Lambda}(\\alpha;e_1,\\ldots,e_n).\n  \\end{align*}\n\\end{enumerate}\n\\end{Defi}\n\n\\begin{Defi}\nLet $M, N$ be $\\mb{\\Lambda}$-multicategories. A \\emph{$\\mb{\\Lambda}$-multifunctor} $F$ consists of the following data:\n\\begin{itemize}\n\\item a function $F_{0} \\colon M_{0} \\rightarrow N_{0}$ on sets of objects and\n\\item functions $F \\colon M(x_1, \\ldots, x_n; y) \\rightarrow N(F_{0}(x_1), \\ldots, F_{0}(x_n); F_{0}(y))$ which are $\\Lambda(n)$-equivariant in that $F(f \\cdot \\alpha) = F(f) \\cdot \\alpha$.\n\\end{itemize}\nThese data are subject to the following axioms.\n\\begin{enumerate}\n\\item $F$ preserves identites: $F(\\id_x) = \\id_{F_{0}(x)}$.\n\\item $F$ preserves composition: $F\\left( f(g_1, \\ldots, g_n) \\right) = F(f) \\left( F(g_1), \\ldots, F(g_n) \\right).$\n\\end{enumerate}\n\\end{Defi}\n\n\n\nRecall that the bicategory $\\mb{Prof}$ has objects categories, $1$-cells $F \\colon X \\srarrow Y$ profunctors from $X$ to $Y$ or equivalently functors\n  \\[\n    F \\colon Y^{\\textrm{op}} \\times X \\rightarrow \\mb{Sets},\n  \\]\nand $2$-cells transformations $F \\Rightarrow G$. Composition of profunctors is given by the coend formula\n  \\[\n    G \\circ F (z,x) = \\int^{y \\in Y} G(z,y) \\times F(y,x)\n  \\]\nand hence is only unital and associative up to coherent isomorphism. There exists an embedding pseudofunctor $(-)^{+} \\colon  \\mb{Cat} \\hookrightarrow \\mb{Prof}$ which is the identity on objects and sends a functor $F \\colon X \\rightarrow Y$ to the profunctor $F^{+}$ defined by $F^{+}(y,x) = Y(y,Fx)$.\n\n\n\\begin{thm}\nThe $2$-monad $E\\Lambda$ on the $2$-category $\\mb{Cat}$ lifts to a pseudomonad $\\widetilde{E\\Lambda}$ on the bicategory $\\mb{Prof}$.\n\\end{thm}\n\\begin{proof}\nOn objects, we have $\\widetilde{E\\Lambda}(X) = E\\Lambda(X)$. Let $F \\colon  X \\srarrow Y$ be a profunctor given by the functor $F \\colon Y^{\\textrm{op}} \\times X \\rightarrow \\mb{Sets}$. We define $\\widetilde{E\\Lambda}F$ to be the functor\n  \\[\n    ( E\\Lambda(Y) )^{\\textrm{op}} \\times E\\Lambda(X) \\rightarrow \\mb{Sets}\n  \\]\nwhich is defined by the formulas\n  \\[\n    \\widetilde{\\Lambda}F \\left( [e; x_1, \\ldots, x_n], [e; y_1, \\ldots, y_m] \\right) = \\left\\{\n    \\begin{array}{lr}\n    \\varnothing & \\textrm{if $n \\neq m$}, \\\\\n    \\coprod_{g \\in \\Lambda(n)} \\prod_{i=1}^{n} F\\left(y_i, x_{\\pi(g)(i)}\\right) & \\textrm{if $n = m$.}\n    \\end{array}\n    \\right.\n  \\]\nFor a functor $G \\colon X \\rightarrow Y$, it is easy to check that\n  \\[\n    \\widetilde{E\\Lambda}\\left(G^{+}\\right) = \\left( E\\Lambda G \\right)^{+}\n  \\]\nusing \\cref{hom-set-lemma}. The same formulas define the action of  $\\widetilde{E\\Lambda}$ on $2$-cells as well. The multiplication and unit of $\\widetilde{E\\Lambda}$ are just $\\mu^{+}$ and $\\eta^{+}$, where $\\mu, \\eta$ are the multiplication and unit, respectively, of $E\\Lambda$. The remainder of the pseudomonad data comes from the pseudofunctoriality of $(-)^{+}$, and the axioms follow from the $2$-monad axioms for $E\\Lambda$ and the pseudofunctor axioms for $(-)^{+}$.\n\\end{proof}\n\n\\begin{rem}\nSince $\\mb{Prof}$ is essentially the Kleisli bicategory for the free cocompletion pseudomonad, this lift corresponds to a pseudo-distributive law between $E\\Lambda$ and the free cocompletion pseudomonad, but we do not pursue this perspective here.\n\\end{rem}\n\nGiven a bicategory $B$ and a pseudomonad $T$ on $B$, we can form the Kleisli bicategory of $T$, $\\mb{Kl}_{T}$. It has the same objects as $B$, but a $1$-cell from $a$ to $b$ in  $\\mb{Kl}_{T}$ is a $1$-cell $f \\colon a \\rightarrow Tb$ in $B$. In the case $B = \\mb{Prof}, T = \\widetilde{E\\Lambda}$, the objects of $\\mb{Kl}_{T}$ are categories, the $1$-cells $X \\srarrow Y$ are profunctors from $X$ to $E\\Lambda Y$, or alternatively a functor $(E\\Lambda Y)^{op} \\times X \\rightarrow \\mb{Sets}$, and the $2$-cells are natural transformation between such.\n\nWe now recall some standard definitions \\cite{ben-bicats}.\n\n\\begin{Defi}\nLet $B$ be a bicategory. A \\emph{monad} $(x,t,\\mu,\\eta)$ in $B$ consists of the following data:\n\\begin{itemize}\n  \\item an object $x$,\n  \\item a $1$-cell $t \\colon  x \\rightarrow x$,\n  \\item a $2$-cell $\\mu \\colon t^{2} \\Rightarrow t$, and\n  \\item a $2$-cell $\\eta \\colon \\id_x \\Rightarrow t$.\n\\end{itemize}\nThese data are subject to the following axioms.\n  \\[\n    \\xy\n      (0,0)*+{(t \\circ t) \\circ t} =\"1\";\n      (25,0)*+{t \\circ (t \\circ t)} =\"2\";\n      (40,-12)*+{t \\circ t} =\"3\";\n      (0,-24)*+{t \\circ t} =\"4\";\n      (40,-24)*+{t} =\"5\";\n      {\\ar^{\\cong} \"1\";\"2\" };\n      {\\ar^{t * \\mu} \"2\";\"3\" };\n      {\\ar^{\\mu} \"3\";\"5\" };\n      {\\ar_{\\mu * t} \"1\";\"4\" };\n      {\\ar_{\\mu} \"4\";\"5\" };\n      (60,0)*+{\\id_{x} \\circ t} =\"11\";\n      (90,0)*+{t \\circ t} =\"12\";\n      (90,-10)*+{t} =\"13\";\n      {\\ar^{\\eta * t} \"11\";\"12\" };\n      {\\ar^{\\mu} \"12\";\"13\" };\n      {\\ar_{\\cong} \"11\";\"13\" };\n      (60,-16)*+{t \\circ \\id_{x}} =\"11\";\n      (90,-16)*+{t \\circ t} =\"12\";\n      (90,-26)*+{t} =\"13\";\n      {\\ar^{t * \\eta} \"11\";\"12\" };\n      {\\ar^{\\mu} \"12\";\"13\" };\n      {\\ar_{\\cong} \"11\";\"13\" };\n    \\endxy\n  \\]\n\\end{Defi}\n\nWe have already defined monad maps in the particular case that $B = \\textbf{Cat}$ (see \\cref{defi:monad_map}), but we now recall a more general definition.\n\\begin{Defi}\nLet $(x,t,\\mu,\\eta), (x',t',\\mu',\\eta')$ be monads in $B$. An \\emph{oplax monad map} $(F, \\alpha)$ from $t$ to $t'$ consists of the following data:\n\\begin{itemize}\n\\item a $1$-cell $F \\colon x \\rightarrow x'$ and\n\\item a $2$-cell $\\alpha \\colon F \\circ t \\Rightarrow t' \\circ F$.\n\\end{itemize}\nThese data are subject to the following axioms, in which we suppress the constraints of the bicategory $B$.\n  \\[\n    \\xy\n      (0,0)*+{Ft^{2}} =\"1\";\n      (25,0)*+{t'Ft} =\"2\";\n      (40,-12)*+{t'^{2} F} =\"3\";\n      (0,-24)*+{Ft} =\"4\";\n      (40,-24)*+{t'F} =\"5\";\n      {\\ar^{\\alpha * t} \"1\";\"2\" };\n      {\\ar^{t' * \\alpha} \"2\";\"3\" };\n      {\\ar^{\\mu' * F} \"3\";\"5\" };\n      {\\ar_{F * \\mu} \"1\";\"4\" };\n      {\\ar_{\\alpha} \"4\";\"5\" };\n      (60,0)*+{F} =\"11\";\n      (90,0)*+{Ft} =\"12\";\n      (90,-10)*+{t'F} =\"13\";\n      {\\ar^{F*\\eta} \"11\";\"12\" };\n      {\\ar^{\\alpha} \"12\";\"13\" };\n      {\\ar_{\\eta'*F} \"11\";\"13\" };\n    \\endxy\n  \\]\n\\end{Defi}\n\n\\begin{Defi}\nLet $(F,\\alpha), (F', \\alpha')$ be oplax monad maps from $t$ to $t'$. A \\emph{transformation of monad maps} $\\Gamma \\colon (F, \\alpha) \\Rightarrow (F', \\alpha')$ is a $2$-cell $\\Gamma \\colon F \\Rightarrow F'$ such that\n  \\[\n    \\xy\n      (0,0)*+{Ft} =\"1\";\n      (40,0)*+{t'F} =\"2\";\n      (40,-12)*+{t'F'} =\"3\";\n      (0,-12)*+{F't} =\"4\";\n      {\\ar^{\\alpha } \"1\";\"2\" };\n      {\\ar^{t' * \\Gamma} \"2\";\"3\" };\n      {\\ar_{\\Gamma * t} \"1\";\"4\" };\n      {\\ar_{\\alpha'} \"4\";\"3\" };\n    \\endxy\n  \\]\ncommutes.\n\\end{Defi}\n\nIt is simple to check that monads, oplax monad maps, and transformations of monad maps form a bicategory.\n\n\n\\begin{thm}\nThe category $\\mb{\\Lambda}\\mbox{-}\\mb{Multicat}$ of\n\\begin{itemize}\n\\item $\\mb{\\Lambda}$-multicategories and\n\\item $\\mb{\\Lambda}$-multifunctors\n\\end{itemize}\nand the bicategory $\\mb{Mnd}_{d}(\\mb{Kl}_{\\widetilde{E\\Lambda}})$ of\n\\begin{itemize}\n\\item monads on sets (viewed as discrete categories) in $\\mb{Kl}_{\\widetilde{E\\Lambda}}$,\n\\item oplax monad maps $(F, \\alpha)$ between them which are isomorphic to one of the form $(f^{+}, \\alpha)$ for $f \\colon S \\rightarrow T$ for some function of the underlying sets, and\n\\item transformations of monad maps\n\\end{itemize}\nare biequivalent.\n\nUnder this biequivalence, the category of $\\mb{\\Lambda}$-operads is equivalent to the bicategory of monads on the terminal set in $\\mb{Kl}_{\\widetilde{E\\Lambda}}$.\n\\end{thm}\n\\begin{proof}\nFirst, we note that $\\mb{Mnd}_{d}(\\mb{Kl}_{\\widetilde{E\\Lambda}})$ is a locally essentially discrete bicategory, by which we mean the hom-categories are all equivalent to discrete categories. We will show there is a unique isomorphism or no $2$-cell at all between oplax monad maps of the form $(f^{+}, \\alpha)$, from which the claim follows in general. A $2$-cell between such has as its data a natural transformation $\\gamma \\colon f^{+} \\Rightarrow g^{+}$ which has components\n  \\[\n    \\gamma_{[e; t_1, \\ldots, t_n], s} \\colon f^{+}([e; t_1, \\ldots, t_n], s) \\rightarrow g^{+}([e; t_1, \\ldots, t_n], s).\n  \\]\nBoth of these sets are empty unless $n=1$, and then the source is nonempty when $f(s) = t$ and the target is nonempty when $g(s)=t$; when nonempty, both of these sets are singletons. If both are nonempty for some $s$, then the functions $f,g$ agree on $s$. Assume the target is nonempty for some $([e;t], s)$ but that the source is empty, in other words that $g(s)=t$ but $f(s) \\neq t$. Then consider $\\gamma_{[e;f(s)], s}$. Its source is $f^{+}([e;f(s)], s)$ which is nonempty by construction, but its target is $g^{+}([e;f(s)], s)$. We know that $g(s) = t \\neq f(s)$, so $g^{+}([e;f(s)], s)$ must be empty, giving a map from a nonempty set to an empty one, a contradiction. Thus there is a at most one $2$-cell from an oplax monad map $(f^{+}, \\alpha)$ to another $(g^{+}, \\beta)$, such a map can only exist if $f = g$, and if it does exist then it is invertible. Thus the hom-categories of $\\mb{Mnd}_{d}(\\mb{Kl}_{\\widetilde{E\\Lambda}})$ are essentially discrete, and this bicategory is equivalent to a category.\n\nWe begin by describing an object of $\\mb{Mnd}_{d}(\\mb{Kl}_{\\widetilde{E\\Lambda}})$ which is a monad in $\\mb{Kl}_{\\widetilde{E\\Lambda}}$ whose underlying category is a set $S$. A $1$-cell $M \\colon S \\srarrow S$ is then a functor $(E\\Lambda S)^{op} \\times S \\rightarrow \\mb{Sets}$ which amounts to sets $M(s_1, \\ldots, s_n; s)$ for $s_1, \\ldots, s_n, s \\in S$ together with a right action of $\\Lambda(n)$ as in \\ref{lambda_multicat}. A $2$-cell $1_{S} \\Rightarrow M$ consists of a $\\Lambda(1)$-equivariant function $\\Lambda(1) \\rightarrow M(s;s)$ for each $s \\in S$, in other words an element $\\id_{s} \\in M(s;s)$. A $2$-cell $M \\circ M \\Rightarrow M$ then consists of a multicategorical composition function, as in \\ref{lambda_multicat}, with appropriate equivariance built in by the coend used for composition of profunctors. Associativity and unit conditions are then seen to be the same as for $\\mb{\\Lambda}$-multicategories.\n\nBy definition, an oplax monad map $(f^{+}, \\alpha) \\colon  (S,M) \\rightarrow (S', M')$ consists of a function $f \\colon S \\rightarrow S'$ and a transformation $\\alpha \\colon M \\circ f^{+} \\Rightarrow f^{+} \\circ M'$ satisfying two axioms. The transformation $\\alpha$ amounts to giving $\\Lambda(n)$-equivariant functions\n  \\[\n    M(s_1, \\ldots, s_n; s) \\rightarrow M'\\left(f(s_1), \\ldots, f(s_n); f(s)\\right),\n  \\]\nand the two axioms correspond to the unit and composition axioms for a $\\mb{\\Lambda}$-multifunctor.\n\nThese descriptions give the action on objects and morphisms of a pseudofunctor $\\mb{\\Lambda}\\mbox{-}\\mb{Multicat} \\rightarrow \\mb{Mnd}_{d}(\\mb{Kl}_{\\widetilde{E\\Lambda}})$ with local contractibility providing the pseudofunctoriality constraints as well as showing that the axioms for a pseudofunctor hold. It is also clear that this pseudofunctor is biessentially surjective and locally essentially surjective, so it is a biequivalence once again using local contractibility.\n\nThe final claim is then an immediate consequence of the definitions of $\\mb{\\Lambda}$-operad and $\\mb{\\Lambda}$-multicategory.\n\\end{proof}\n",
			"file": "4-monoidal_structures/4-monoidal_structures_multicategories.tex",
			"file_size": 102696,
			"file_write_time": 133310432772076991,
			"settings":
			{
				"buffer_size": 101240,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "5-invertible_objects/5-invertible_objects.tex",
			"settings":
			{
				"buffer_size": 42932,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAzKcAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"",
					null,
					"BQAAAFehAAAAAAAAYqEAAAAAAAAIAAAAXHNlY3Rpb26ZjgAAAAAAAKSOAAAAAAAACAAAAFxzZWN0aW9u3GkAAAAAAADnaQAAAAAAAAgAAABcc2VjdGlvbs81AAAAAAAA2jUAAAAAAAAIAAAAXHNlY3Rpb27cBQAAAAAAAOcFAAAAAAAACAAAAFxzZWN0aW9u",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvBAAAAAAAAO8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAACAAAAAAAAAAIAAAAXGNoYXB0ZXI",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"",
					null,
					"AwAAAKJ3AAAAAAAAoncAAAAAAAAaAAAAXGluZGV4e2Z1bmN0b3Ihc3VyamVjdGl2ZX1aWAAAAAAAAFpYAAAAAAAAFgAAAFxpbmRleHthYmVsaWFuaXphdGlvbn3BBgAAAAAAAMEGAAAAAAAAGQAAAFxpbmRleHtvYmplY3QhaW52ZXJ0aWJsZX0",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBBgAAAAAAANoGAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAIQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "6-invertibility/6-invertibility.tex",
			"settings":
			{
				"buffer_size": 29399,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAqXIAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"",
					null,
					"BAAAAE5rAAAAAAAAWWsAAAAAAAAIAAAAXHNlY3Rpb27/XQAAAAAAAApeAAAAAAAACAAAAFxzZWN0aW9u31MAAAAAAADqUwAAAAAAAAgAAABcc2VjdGlvbqgCAAAAAAAAswIAAAAAAAAIAAAAXHNlY3Rpb24",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGagAAAAAAAAZqAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAACAAAAAAAAAAIAAAAXGNoYXB0ZXI",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAIQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "7-automorphisms/7-automorphisms.tex",
			"settings":
			{
				"buffer_size": 58457,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAJeQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"",
					null,
					"BgAAAOnPAAAAAAAA9M8AAAAAAAAIAAAAXHNlY3Rpb243nQAAAAAAAEKdAAAAAAAACAAAAFxzZWN0aW9uREYAAAAAAABPRgAAAAAAAAgAAABcc2VjdGlvbpU0AAAAAAAAoDQAAAAAAAAIAAAAXHNlY3Rpb25NHAAAAAAAAFgcAAAAAAAACAAAAFxzZWN0aW9u4wEAAAAAAADuAQAAAAAAAAgAAABcc2VjdGlvbg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC03QAAAAAAALTdAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAACAAAAAAAAAAIAAAAXGNoYXB0ZXI",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAIQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "8-examples/8-examples.tex",
			"settings":
			{
				"buffer_size": 46547,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAApbUAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"",
					null,
					"BAAAAGV9AAAAAAAAcH0AAAAAAAAIAAAAXHNlY3Rpb255ZgAAAAAAAIRmAAAAAAAACAAAAFxzZWN0aW9u8jgAAAAAAAD9OAAAAAAAAAgAAABcc2VjdGlvbhQAAAAAAAAAHwAAAAAAAAAIAAAAXHNlY3Rpb24",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYrgAAAAAAABiuAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAACAAAAAAAAAAIAAAAXGNoYXB0ZXI",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAIQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					""
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Script Builder"
				]
			],
			[
				"Packages/LaTeXTools/LaTeX.sublime-build",
				"XeLaTeX"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"latextools",
				"LaTeXTools: Clear cache"
			],
			[
				"latextools clear",
				"LaTeXTools: Clear cache"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"bib",
				"Build With: LaTeX - Basic Builder - XeLaTeX"
			],
			[
				"Package Control: Add",
				"Package Control: Add Repository"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"package",
				"Install Package Control"
			],
			[
				"has",
				"Set Syntax: Haskell"
			]
		],
		"width": 444.0
	},
	"console":
	{
		"height": 723.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Alex/AppData/Local/Programs/MiKTeX/tex/latex/biblatex/biblatex.sty",
		"/C/Users/Alex/AppData/Local/Programs/MiKTeX/tex/latex/biblatex-apa/apa.bbx",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Research/action_operads/paper/bibs/yau.bib",
		"/C/Users/Alex/AppData/Roaming/Sublime Text 3/Packages/User/LaTeXTools.sublime-settings",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Research/action_operads/paper/test.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Research/action_operads/paper/operads_paper.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2223/config.yml",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Research/action_operads/paper/introduction/0-intro.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Research/action_operads/paper/action_operads/1-action_operads.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/GTRM/2122/games-and-rec-coursebuilder/teaching-sessions/sem1week07-more-combinatorics/principles-worksheet.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/GTRM/2122/games-and-rec-coursebuilder/teaching-sessions/sem1week07-more-combinatorics/principles-slides.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/GTRM/2223/games-and-rec-2223-chirun/teaching-sessions/sem2week03-peg_solitaire/peg_solitaire_exercises.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/GTRM/2223/games-and-rec-2223-chirun/assessment/games-and-rec-combinatorics-graph-theory.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/GTRM/2223/games-and-rec-2223-chirun/assessment/games-and-rec-group-theory.log",
		"/C/Users/Alex/Dropbox/git_pages/alex-corner/index.html",
		"/C/Users/Alex/Dropbox/git_pages/alex-corner/research.html",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2223/intro/assignment.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2223/sets/sets/sets-notes_2.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2223/digraphs/digraphs_basics-notes.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2223/digraphs/digraphs-exercises.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2223/digraphs/adjacency-notes.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/R/NBN/select.R",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/complex_numbers/complex_numbers/build/complex_numbers/basic_ideas/index.html",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site_rehash/codes/encoding/encoding.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/katie_notes/Weekly Books/week2-error-correction.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/R/Hills/hill_code.R",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/R/Hills/hill_codes",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/GTRM/2223/games-and-rec-2223-chirun/group-theory-notes/permutations/permutations_15-puzzle.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/GTRM/2223/games-and-rec-2223-chirun/group-theory-notes/braids/braids-slides.tex",
		"/C/Users/Alex/AppData/Local/Programs/MiKTeX/tex/latex/base/inputenc.sty",
		"/C/Users/Alex/Dropbox/Notes/BMC2015/Alex_Corner-Lax_monoidal_model_structures.tex",
		"/C/Users/Alex/Dropbox/Notes/BMC2015/Alex_Corner-Lax_monoidal_model_structures.log",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/GTRM/2223/games-and-rec-2223-chirun/teaching-sessions/sem1week08-partisan/partizan-games.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2223/intro/fomca_general_feedback.md",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/complex_numbers/complex_numbers/complex_numbers/complex_numbers.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2122/fomca_site_2122/matrices/matrix-exercises_1.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/Lectures/lecture_08/lecture_08.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2223/intro/assignment-resit.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2122/Lectures/lecture_02/lecture_02.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2223/logic/prop/propositional-exercises_2.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Admin/auto-reply.txt",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2223/intro/assessment.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2223/build/index.html",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site/intro.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site/codes/exercises_1.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site/reminders/ascii/ascii.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site/codes/basic_ideas.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site/cryptography/classical/caesar-notes.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site/cryptography/classical/exercises_7.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site/config.yml",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site_new/codes/correction-notes.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site_new/codes/detection-notes.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site_new/codes/basic_ideas.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site_new/config.yml",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2223/modular/modular_2/modular_2-notes.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2223/logic/prop/propositional-notes.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2223/modular/modular_1/modular_1-notes.md",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2223/intro/schedule.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2223/intro/material.tex",
		"/C/Users/Alex/Desktop/text_responses.txt",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/test/dice_test.log",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/test/dice_test.tex",
		"/C/Users/Alex/Desktop/tex_notes/main.log",
		"/C/Users/Alex/Desktop/tex_notes/main.tex",
		"/C/Users/Alex/Desktop/tex_notes/sections/Lecture5/Lecture5.aux",
		"/C/Users/Alex/AppData/Local/Programs/MiKTeX/tex/latex/inputenx/inputenx.sty",
		"/C/Users/Alex/Desktop/tex_notes/style.sty",
		"/C/Users/Alex/Desktop/tex_notes/sections/Lecture5/Lecture5.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2122/fomca_site_2122/config.yml",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/complex_numbers/complex_numbers/config.yml",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/fomca_site_2122/intro/assignment.tex",
		"/C/Users/Alex/Dropbox/Docs/DnD/DND-5e-LaTeX-Template-master/Horizon_Walker.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site/cryptography/modern/DF_key-notes.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site/intro/schedule.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site/intro/assessment.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site/intro/assignment.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site/intro/assignment_1b.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/2223/codes_and_crypt_site/intro/material.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/codes_and_crypt_site/intro.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/codes_and_crypt_site/intro/material.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Admin/References/statement.bib",
		"/C/Users/Alex/Dropbox/G101/Year 1/SPR SEM 08 SoMaS Results.txt",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2122/Lectures/lecture_04/lecture_04.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/Lectures/lecture_06/lecture_06.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/Tutorials/tutorial_06/tutorial_06.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/Lectures/lecture_07/lecture_07.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/Tutorials/tutorial_07/tutorial_07.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Number and Structure/2021-22/IMR/Alyssa/IMR/NS_activity7_submission_AlyssaOwen",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/codes_and_crypt_site/assignment/assignment.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/Lectures/lecture_05/lecture_05.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/Tutorials/tutorial_05/tutorial_05.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2122/Lectures/lecture_02/lecture_02_on-screen_examples.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/Lectures/lecture_01/lecture_01.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2223/Tutorials/tutorial_01/tutorial_01.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2122/fomca_site_2122/sets/sets/sets-notes_1.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/complex_numbers/complex_numbers/build/complex_numbers/index.html",
		"/C/Users/Alex/Dropbox/Docs/a_s_corner_CV.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Admin/References/sheffield_statement.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/complex_numbers/complex_numbers/intro.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/complex_numbers/complex_numbers/intro/material.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/complex_numbers/fomca_site_2122/README.md",
		"/C/Users/Alex/AppData/Local/Temp/7zO41E6C9A3/README.txt",
		"/C/Users/Alex/Desktop/Exported Items.bib",
		"/C/Users/Alex/Desktop/test/test.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Admin/To-Do Lists/2022_02_07.md",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/codes_and_crypt_site/config.yml",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Admin/To-Do Lists/2022_04_04.md",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2122/fomca_site_2122/intro/assignment-resit.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2122/assignment/resit_solution/fomca_resit_answers.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/GTRM/2122/assessment/task 2/combinatorics/combinatorics-general_feedback.md",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/games-and-rec-2122-coursebuilder/assessment/group_theory-general_feedback.md",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/GTRM/2122/assessment/task 2/group_theory/group_theory-general_feedback.md",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/games-and-rec-2122-coursebuilder/config.yml",
		"/C/Users/Alex/Dropbox/Jobs/sheffield_statement.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Explorations in Mathematics/2122/Exam/Explorations Exam and Verification/README.txt",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2122/accreditation/maths_coursework/readme.txt",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/portfolio task/portfolio_activity-4_general_feedback.md",
		"/C/Users/Alex/Dropbox/git_pages/alex-corner/teaching.html",
		"/C/Users/Alex/Dropbox/git_pages/alex-corner/default.css",
		"/C/Users/Alex/Dropbox/git_pages/alex-corner/README_dep.md",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Research/action_operads/pullback_gen_rel.py",
		"/C/Users/Alex/Documents/action_operads/operads_book.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2122/fomca_site_2122/intro/assignment.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/FoMCA/2122/fomca_site_2122/intro/assessment-resit.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Research/MARS/MARS_monoidal_categories_2.tex",
		"/C/Users/Alex/Downloads/hexboard/hexboard.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/codes_and_crypt_site/codes/exercises_3.tex",
		"/C/Users/Alex/OneDrive - Sheffield Hallam University/Teaching/Linear and Discrete/codes_and_crypt_site/codes/exercises_2.tex"
	],
	"find":
	{
		"height": 29.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"obvious",
			"obvious th",
			"live",
			"bib",
			"}\n",
			"yau",
			"\\",
			"yau",
			"ref",
			"cite",
			"biblat",
			"osorno",
			"yau",
			"geometry",
			"Alg",
			"bib",
			"\\\\index\\{[a-z,A-Z,0-9,\\\\, ,!,$,\\-,!]*\\}",
			"\\\\index\\{[a-z,A-Z,0-9, ,!,$,\\-,!]*\\}",
			"\\nomenclature",
			"\\index",
			"\\\\index\\{[a-z, ,!,$, 0-9]*\\}",
			"\\index",
			"\\nomenclature",
			"\\\\index\\{[a-z, ,!]*\\}",
			"\\index",
			"\\\\index\\{[A-Z,a-z, ,!,-]*\\}",
			"\\\\index\\{[A-Z,a-z, ,!]*\\}",
			"\\index",
			"\\\\index\\{[a-z, ,!,$,\\\\]*\\}",
			"\\index",
			"\\\\index\\{[a-z, ,!]*\\}",
			"\\\\index\\{action operad\\}",
			"\\index",
			"\\nomencla",
			"\\nomenclau",
			"\\\\nomenclau",
			"\\nomenclau",
			"\\\\nomenclature\\[N\\]\\{\\$B_\\{n\\}\\$\\}\\{[a-z, , $]*\\}",
			"\\\\nomenclature\\[N\\]\\{\\$\\\\[a-z,A-Z]*\\$\\}\\{[a-z, ]*\\}",
			"\\\\section",
			"\\\\nomenclature\\[N\\]\\{\\$\\\\[a-z,A-Z]*\\$\\}\\{[a-z, ]*\\}",
			"\\\\nomenclature\\[N\\]\\{\\$\\\\Sigma\\$\\}\\{the symmetric operad\\}",
			"\\nomenclature",
			"\\\\nomenclature\\{[a-z,!,-]*\\}",
			"\\\\index\\{[a-z,!,-]*\\}",
			"\\\\section",
			"\\\\index\\{operad\\!non\\-symmetric\\}",
			"\\index",
			"xel",
			"\\chapter",
			"\\section",
			"section",
			"chapter",
			"sem1week04",
			"\\pause",
			"torus",
			"sem2week04",
			"\\pi",
			"        \\foreach \\i in {1,...,7}\n            {\n                \\node () at (0.5, \\i + 0.5) {$\\i$};\n            }",
			"        \\node (a) at (1.5, 8.5) {$a$};\n        \\node (b) at (2.5, 8.5) {$b$};\n        \\node (c) at (3.5, 8.5) {$c$};\n        \\node (d) at (4.5, 8.5) {$d$};\n        \\node (e) at (5.5, 8.5) {$e$};\n        \\node (f) at (6.5, 8.5) {$f$};\n        \\node (g) at (7.5, 8.5) {$g$};",
			"        \\node (a) at (1.5, 8.5) {$a$};\n        \\node (b) at (2.5, 8.5) {$b};\n        \\node (c) at (3.5, 8.5) {$c};\n        \\node (d) at (4.5, 8.5) {$d};\n        \\node (e) at (5.5, 8.5) {$e};\n        \\node (f) at (6.5, 8.5) {$f};\n        \\node (g) at (7.5, 8.5) {$g};",
			"alphalph",
			"star,",
			"braid",
			"brai",
			"binary relation",
			"redg",
			"circle",
			"\\end{center}",
			"enumerate",
			"\\odot",
			"definition",
			"[",
			"tikz",
			"exercise",
			"exervise",
			"cite",
			"check",
			"supermarket",
			"up",
			"\\$[A-Z]\\$",
			"caesar",
			"  ",
			" ",
			"  ",
			"``",
			"live",
			"include",
			"\\sin",
			"bgroup",
			"windows",
			"xetex",
			"$r$",
			"Intersection",
			"universe",
			"x",
			"operatorname",
			"opn",
			"teaching",
			"technic",
			"note ",
			"number",
			"create",
			"these are then",
			"qqq second",
			"but now recall from",
			"intertible",
			"\\ast",
			"ast",
			"object",
			"xelatex",
			"xel",
			"font",
			"scale=0.01",
			"newcommand",
			"serif",
			"font",
			"theme",
			"input",
			"zplus",
			"[]",
			"error pattern",
			"parity",
			"\\mathbb{n}",
			"544",
			"profile braid",
			"juggling",
			"task"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"/",
			"",
			"\\section",
			"\\subsection",
			"subsection",
			"sem2week05",
			"",
			"        \\foreach \\i in {1,...,7}\n            {\n                \\node () at (0.5, 8 - \\i + 0.5) {$\\i$};\n            }",
			"        \\node (a) at (1.5, 8.5) {$a$};\n        \\node (b) at (2.5, 8.5) {$b$};\n        \\node (c) at (3.5, 8.5) {$c$};\n        \\node (d) at (4.5, 8.5) {$d$};\n        \\node (e) at (5.5, 8.5) {$e$};\n        \\node (f) at (6.5, 8.5) {$f$};\n        \\node (g) at (7.5, 8.5) {$g$};\n        \\foreach \\i in {1,...,7}\n            {\n                \\node () at (0.5, \\i + 0.5) {$\\i$};\n            }",
			"        \\node (a) at (1.5, 8.5) {$a$};\n        \\node (b) at (2.5, 8.5) {$b$};\n        \\node (c) at (3.5, 8.5) {$c$};\n        \\node (d) at (4.5, 8.5) {$d$};\n        \\node (e) at (5.5, 8.5) {$e$};\n        \\node (f) at (6.5, 8.5) {$f$};\n        \\node (g) at (7.5, 8.5) {$g$};",
			"star, star point height = 0.3,",
			"binary operation",
			"\\cdot",
			"[A-Z]",
			" ",
			"(i\\theta)",
			"opn",
			"\\opn",
			"\\odot",
			"scale=0.02",
			"spec",
			"0.10",
			"**",
			"$$",
			"'",
			"`",
			"\\Mod{n}",
			"$\\ML$-monoidal",
			"$\\Lambda$-monoidal category",
			"$\\Lambda$-monoidal categories",
			"\\lmc",
			"",
			"&=",
			"",
			" ",
			"",
			"\\trans{i}{i+1}",
			"\\trans{1}{2}",
			"\\, \\,",
			"",
			"\\gp",
			"\\ab",
			"enumerate",
			"Molly",
			"Elisha",
			"elisha",
			"[width=0.1\\textwidth]",
			"\\Sigma",
			"\\begin{frame}",
			"\\binom{n}{2}",
			"",
			"\\rightarrow ",
			"\\rightarrow",
			"_{\\mathrm{inv}}",
			"{\\mathrm{inv}}",
			"\\right)",
			"\\left(",
			"\\right]",
			"\\left[",
			"\\left(",
			"\\right)",
			"\\left(",
			"\\right",
			"\\left",
			"\\id",
			"\\section{",
			"url",
			"\\Rightarrow",
			" Rightarrow ",
			"\\wedge",
			"\\vee",
			"$.",
			": $",
			" ",
			"~\\operatorname{mod}~",
			"%\\end{minipage}",
			"%\\begin{minipage}[t]{7cm}",
			"\\item",
			"{enumerate}",
			"\\item",
			"{enumerate}",
			"\\mathbb{R}",
			"~|~",
			"%\\end{minipage}",
			"%\\begin{minipage}[t]{5cm}",
			"\\item",
			"{enumerate}",
			"%\\begin{minipage}[t]{7cm}",
			"%\\begin{minipage}[t]{8cm}",
			"$\\begin{minipage}[t]{8cm}",
			"\\item",
			"%\\end{minipage}",
			"%\\begin{minipage}[t]{5cm}",
			"{enumerate}",
			"%\\end{minipage}",
			"%\\begin{minipage}{0.3\\linewidth}",
			"{enumerate}",
			"\\item",
			"{enumerate}",
			"(x)$",
			"([x])\\$",
			"\\item",
			"{enumerate}",
			"\\item",
			"\\end{enumerate}",
			"\\item",
			"{enumerate}",
			"\\begin{enumerate}",
			"\\item",
			"\\begin{enumerate}",
			"\\item",
			"\\end{enumerate}}",
			"\\begin{enumerate}",
			"\\end{enumerate}",
			"\\begin{enumerate}",
			"\\item",
			"\\end{enumerate}",
			"",
			"\\begin{enumerate}",
			"\\item",
			"\\end{enumerate}",
			"\\begin{enumerate}",
			"",
			"\\mathrm{Im}\\pi",
			"Im",
			"~\\backslash~",
			"\\backslash",
			"\\psi^F\\right)"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "operads_paper.tex",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7859,
						"regions":
						{
						},
						"selection":
						[
							[
								208,
								208
							]
						],
						"settings":
						{
							"syntax": "Packages/LaTeX/LaTeX.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/acesac5/OneDrive - Sheffield Hallam University/Teaching/R/Hills/hill_code.R",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 899,
						"regions":
						{
						},
						"selection":
						[
							[
								47,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Users/acesac5/OneDrive - Sheffield Hallam University/Teaching/R/intro week/intro_week.R",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 420,
						"regions":
						{
						},
						"selection":
						[
							[
								420,
								420
							]
						],
						"settings":
						{
							"auto_name": "library(tidyverse)",
							"syntax": "Packages/R/R.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 92,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								92
							]
						],
						"settings":
						{
							"auto_name": "Thank you for your email. I am on leave 20-22 June",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/Users/acesac5/OneDrive - Sheffield Hallam University/Teaching/R/intro week/intro_week.csv",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1665,
						"regions":
						{
						},
						"selection":
						[
							[
								1665,
								1665
							]
						],
						"settings":
						{
							"auto_name": "\"Title\",\"Grid Reference\",\"X (Easting)\",\"Y (Northin",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "action_op_ref.bib",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23608,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/LaTeXTools/BibLaTeX.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1.33333333333,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "1-introduction/1-intro.tex",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 56,
						"regions":
						{
						},
						"selection":
						[
							[
								33,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/LaTeX/LaTeX.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "2-action_operads/2-action_operads.tex",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 105719,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"spell_check": true,
							"syntax": "Packages/LaTeX/LaTeX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4340.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "3-operads_in_cat/3-operads_in_cat.tex",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 113016,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/LaTeX/LaTeX.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1.33333333333,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "4-monoidal_structures/4-monoidal_structures_multicategories.tex",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 101240,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/LaTeX/LaTeX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1.33333333333,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "5-invertible_objects/5-invertible_objects.tex",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42932,
						"regions":
						{
						},
						"selection":
						[
							[
								33,
								33
							]
						],
						"settings":
						{
							"syntax": "Packages/LaTeX/LaTeX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "6-invertibility/6-invertibility.tex",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29399,
						"regions":
						{
						},
						"selection":
						[
							[
								33,
								33
							]
						],
						"settings":
						{
							"syntax": "Packages/LaTeX/LaTeX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "7-automorphisms/7-automorphisms.tex",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 58457,
						"regions":
						{
						},
						"selection":
						[
							[
								33,
								33
							]
						],
						"settings":
						{
							"syntax": "Packages/LaTeX/LaTeX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "8-examples/8-examples.tex",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 46547,
						"regions":
						{
						},
						"selection":
						[
							[
								33,
								33
							]
						],
						"settings":
						{
							"syntax": "Packages/LaTeX/LaTeX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 131.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.latextools":
	{
		"height": 498.0
	},
	"pinned_build_system": "Packages/LaTeXTools/LaTeX.sublime-build",
	"project": "",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"bib",
				"C:\\Users\\Alex\\OneDrive - Sheffield Hallam University\\Research\\action_operads\\paper\\5-invertible_objects\\5-invertible_objects.tex"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 210.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 1
	}
}
